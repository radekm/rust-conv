// WARNING: the code in here is horrible. It is a behemoth that needs breaking up into simpler parts.
/// Builder for a floating window which can be dragged, closed, collapsed, resized and scrolled (off by default).
///
/// You can customize:
/// * title
/// * default, minimum, maximum and/or fixed size, collapsed/expanded
/// * if the window has a scroll area (off by default)
/// * if the window can be collapsed (minimized) to just the title bar (yes, by default)
/// * if there should be a close button (none by default)
///
/// ```
/// # egui::__run_test_ctx(|ctx| {
/// egui::Window::new("My Window").show(ctx, |ui| {
///    ui.label("Hello World!");
/// });
/// # });
/// ```
///
/// The previous rectangle used by this window can be obtained through [`crate::Memory::area_rect()`].
///
/// Note that this is NOT a native OS window.
/// To create a new native OS window, use [`crate::Context::show_viewport_deferred`].
// Ziggify generic struct: < ' open >
const Window = struct {
title: WidgetText,
open: Option(*bool),
area: Area,
frame: ?Frame,
resize: Resize,
scroll: ScrollArea,
collapsible: bool,
default_open: bool,
with_title_bar: bool,
};
// BEGIN: impl < ' open > Window < ' open >
/// The window title is used as a unique [`Id`] and must be unique, and should not change.
/// This is true even if you disable the title bar with `.title_bar(false)`.
/// If you need a changing title, you must call `window.id(…)` with a fixed id.
pub fn new(title: WidgetText)Window < ' open >{
const title = title . into (  )  . fallbackTextStyle ( TextStyle . Heading ) ;
const area = Area . new ( Id . new ( title . text (  )  )  )  . constrain ( true )  . edgesPaddedForResize ( true ) ;
Window < ' open > {.title = title,.open = None,.area = area,.frame = None,.resize = Resize . default (  )  . withStroke ( false )  . minSize ( [96.0 , 32.0] )  . defaultSize ( [340.0 , 420.0] ) ,.scroll = ScrollArea . neither (  ) ,.collapsible = true,.default_open = true,.with_title_bar = true,}
}
/// Assign a unique id to the Window. Required if the title changes, or is shared with another window.
pub fn id(self: *Window < ' open >,id: Id)Window < ' open >{
self . area = self . area . id ( id ) ;
self
}
/// Call this to add a close-button to the window title bar.
///
/// * If `*open == false`, the window will not be visible.
/// * If `*open == true`, the window will have a close button.
/// * If the close button is pressed, `*open` will be set to `false`.
pub fn open(self: *Window < ' open >,open: *bool)Window < ' open >{
self . open = Some ( open ) ;
self
}
/// If `false` the window will be grayed out and non-interactive.
pub fn enabled(self: *Window < ' open >,enabled: bool)Window < ' open >{
self . area = self . area . enabled ( enabled ) ;
self
}
/// If `false` the window will be non-interactive.
pub fn interactable(self: *Window < ' open >,interactable: bool)Window < ' open >{
self . area = self . area . interactable ( interactable ) ;
self
}
/// If `false` the window will be immovable.
pub fn movable(self: *Window < ' open >,movable: bool)Window < ' open >{
self . area = self . area . movable ( movable ) ;
self
}
/// Usage: `Window::new(…).mutate(|w| w.resize = w.resize.auto_expand_width(true))`
// TODO(emilk): I'm not sure this is a good interface for this.
pub fn mutate(self: *Window < ' open >,mutate: /* Ziggify: impl Fn ( & mut Self ) */)Window < ' open >{
mutate ( &self ) ;
self
}
/// Usage: `Window::new(…).resize(|r| r.auto_expand_width(true))`
// TODO(emilk): I'm not sure this is a good interface for this.
pub fn resize(self: *Window < ' open >,mutate: /* Ziggify: impl Fn ( Resize ) -> Resize */)Window < ' open >{
self . resize = mutate ( self . resize ) ;
self . area = self . area . edgesPaddedForResize ( self . resize . isResizable (  )  ) ;
self
}
/// Change the background color, margins, etc.
pub fn frame(self: *Window < ' open >,frame: Frame)Window < ' open >{
self . frame = Some ( frame ) ;
self
}
/// Set minimum width of the window.
pub fn minWidth(self: *Window < ' open >,min_width: f32)Window < ' open >{
self . resize = self . resize . minWidth ( min_width ) ;
self
}
/// Set minimum height of the window.
pub fn minHeight(self: *Window < ' open >,min_height: f32)Window < ' open >{
self . resize = self . resize . minHeight ( min_height ) ;
self
}
/// Set minimum size of the window, equivalent to calling both `min_width` and `min_height`.
pub fn minSize(self: *Window < ' open >,min_size: Vec2)Window < ' open >{
self . resize = self . resize . minSize ( min_size ) ;
self
}
/// Set maximum width of the window.
pub fn maxWidth(self: *Window < ' open >,max_width: f32)Window < ' open >{
self . resize = self . resize . maxWidth ( max_width ) ;
self
}
/// Set maximum height of the window.
pub fn maxHeight(self: *Window < ' open >,max_height: f32)Window < ' open >{
self . resize = self . resize . maxHeight ( max_height ) ;
self
}
/// Set maximum size of the window, equivalent to calling both `max_width` and `max_height`.
pub fn maxSize(self: *Window < ' open >,max_size: Vec2)Window < ' open >{
self . resize = self . resize . maxSize ( max_size ) ;
self
}
/// Set current position of the window.
/// If the window is movable it is up to you to keep track of where it moved to!
pub fn currentPos(self: *Window < ' open >,current_pos: Pos2)Window < ' open >{
self . area = self . area . currentPos ( current_pos ) ;
self
}
/// Set initial position of the window.
pub fn defaultPos(self: *Window < ' open >,default_pos: Pos2)Window < ' open >{
self . area = self . area . defaultPos ( default_pos ) ;
self
}
/// Sets the window position and prevents it from being dragged around.
pub fn fixedPos(self: *Window < ' open >,pos: Pos2)Window < ' open >{
self . area = self . area . fixedPos ( pos ) ;
self
}
/// Constrains this window to the screen bounds.
///
/// To change the area to constrain to, use [`Self::constrain_to`].
///
/// Default: `true`.
pub fn constrain(self: *Window < ' open >,constrain: bool)Window < ' open >{
self . area = self . area . constrain ( constrain ) ;
self
}
/// Constrain the movement of the window to the given rectangle.
///
/// For instance: `.constrain_to(ctx.screen_rect())`.
pub fn constrainTo(self: *Window < ' open >,constrain_rect: Rect)Window < ' open >{
self . area = self . area . constrainTo ( constrain_rect ) ;
self
}
/// Where the "root" of the window is.
///
/// For instance, if you set this to [`Align2::RIGHT_TOP`]
/// then [`Self::fixed_pos`] will set the position of the right-top
/// corner of the window.
///
/// Default: [`Align2::LEFT_TOP`].
pub fn pivot(self: *Window < ' open >,pivot: Align2)Window < ' open >{
self . area = self . area . pivot ( pivot ) ;
self
}
/// Set anchor and distance.
///
/// An anchor of `Align2::RIGHT_TOP` means "put the right-top corner of the window
/// in the right-top corner of the screen".
///
/// The offset is added to the position, so e.g. an offset of `[-5.0, 5.0]`
/// would move the window left and down from the given anchor.
///
/// Anchoring also makes the window immovable.
///
/// It is an error to set both an anchor and a position.
pub fn anchor(self: *Window < ' open >,align: Align2,offset: Vec2)Window < ' open >{
self . area = self . area . anchor ( align , offset ) ;
self
}
/// Set initial collapsed state of the window
pub fn defaultOpen(self: *Window < ' open >,default_open: bool)Window < ' open >{
self . default_open = default_open;
self
}
/// Set initial size of the window.
pub fn defaultSize(self: *Window < ' open >,default_size: Vec2)Window < ' open >{
self . resize = self . resize . defaultSize ( default_size ) ;
self
}
/// Set initial width of the window.
pub fn defaultWidth(self: *Window < ' open >,default_width: f32)Window < ' open >{
self . resize = self . resize . defaultWidth ( default_width ) ;
self
}
/// Set initial height of the window.
pub fn defaultHeight(self: *Window < ' open >,default_height: f32)Window < ' open >{
self . resize = self . resize . defaultHeight ( default_height ) ;
self
}
/// Sets the window size and prevents it from being resized by dragging its edges.
pub fn fixedSize(self: *Window < ' open >,size: Vec2)Window < ' open >{
self . resize = self . resize . fixedSize ( size ) ;
self . area = self . area . edgesPaddedForResize ( false ) ;
self
}
/// Set initial position and size of the window.
pub fn defaultRect(self: Window < ' open >,rect: Rect)Window < ' open >{
self . defaultPos ( rect . min )  . defaultSize ( rect . size (  )  ) 
}
/// Sets the window pos and size and prevents it from being moved and resized by dragging its edges.
pub fn fixedRect(self: Window < ' open >,rect: Rect)Window < ' open >{
self . fixedPos ( rect . min )  . fixedSize ( rect . size (  )  ) 
}
/// Can the user resize the window by dragging its edges?
///
/// Note that even if you set this to `false` the window may still auto-resize.
///
/// Default is `true`.
pub fn resizable(self: *Window < ' open >,resizable: bool)Window < ' open >{
self . resize = self . resize . resizable ( resizable ) ;
self . area = self . area . edgesPaddedForResize ( resizable ) ;
self
}
/// Can the window be collapsed by clicking on its title?
pub fn collapsible(self: *Window < ' open >,collapsible: bool)Window < ' open >{
self . collapsible = collapsible;
self
}
/// Show title bar on top of the window?
/// If `false`, the window will not be collapsible nor have a close-button.
pub fn titleBar(self: *Window < ' open >,title_bar: bool)Window < ' open >{
self . with_title_bar = title_bar;
self
}
/// Not resizable, just takes the size of its contents.
/// Also disabled scrolling.
/// Text will not wrap, but will instead make your window width expand.
pub fn autoSized(self: *Window < ' open >)Window < ' open >{
self . resize = self . resize . autoSized (  ) ;
self . scroll = ScrollArea . neither (  ) ;
self . area = self . area . edgesPaddedForResize ( false ) ;
self
}
/// Enable/disable horizontal/vertical scrolling. `false` by default.
pub fn scroll2(self: *Window < ' open >,scroll: Vec2b)Window < ' open >{
self . scroll = self . scroll . scroll2 ( scroll ) ;
self
}
/// Enable/disable horizontal scrolling. `false` by default.
pub fn hscroll(self: *Window < ' open >,hscroll: bool)Window < ' open >{
self . scroll = self . scroll . hscroll ( hscroll ) ;
self
}
/// Enable/disable vertical scrolling. `false` by default.
pub fn vscroll(self: *Window < ' open >,vscroll: bool)Window < ' open >{
self . scroll = self . scroll . vscroll ( vscroll ) ;
self
}
/// Enable/disable scrolling on the window by dragging with the pointer. `true` by default.
///
/// See [`ScrollArea::drag_to_scroll`] for more.
pub fn dragToScroll(self: *Window < ' open >,drag_to_scroll: bool)Window < ' open >{
self . scroll = self . scroll . dragToScroll ( drag_to_scroll ) ;
self
}

// END: impl < ' open > Window < ' open >
// BEGIN: impl < ' open > Window < ' open >
/// Returns `None` if the window is not open (if [`Window::open`] was called with `&mut false`).
/// Returns `Some(InnerResponse { inner: None })` if the window is collapsed.
pub fn show /* < R > */ (self: Window < ' open >,ctx: Context,add_contents: /* Ziggify: impl FnOnce ( & mut Ui ) -> R */,)Option(InnerResponse(?R)){
self . showDyn ( ctx , Box . new ( add_contents )  ) 
}
fn showDyn /* < ' c , R > */ (self: Window < ' open >,ctx: Context,add_contents: Box(/* Ziggify: dyn FnOnce ( & mut Ui ) -> R + ' c*/),)Option(InnerResponse(?R)){
const /* Ziggify: Window { title , open , area , frame , resize , scroll , collapsible , default_open , with_title_bar , } */ =self;
const header_color = frame . mapOrElse (  or ctx . style (  )  . visuals . widgets . open . weak_bg_fill ,  | f | f . fill ) ;
var window_frame = frame . unwrapOrElse (  or Frame . window (  & ctx . style (  )  )  ) ;
// Keep the original inner margin for later use
const window_margin = window_frame . inner_margin;
const border_padding = window_frame . stroke . width / 2.0;
// Add border padding to the inner margin to prevent it from covering the contents
window_frame . inner_margin +  = border_padding;
const is_explicitly_closed = matches !  ( open , Some ( false )  ) ;
const is_open =  ! is_explicitly_closed or ctx . memory (  | mem | mem . everythingIsVisible (  )  ) ;
area . showOpenCloseAnimation ( ctx ,  & window_frame , is_open ) ;
if( ! is_open){
return None;

}
const area_id = area . id;
const area_layer_id = area . layer (  ) ;
const resize_id = area_id . with ( "resize" ) ;
var collapsing = CollapsingState . loadWithDefaultOpen ( ctx , area_id . with ( "collapsing" )  , default_open ) ;
const is_collapsed = with_title_bar and  ! collapsing . isOpen (  ) ;
const possible = PossibleInteractions . new (  & area ,  & resize , is_collapsed ) ;
const resize = resize . resizable ( false ) ;// We resize it manually
var resize = resize . id ( resize_id ) ;
const on_top = Some ( area_layer_id )  == ctx . topLayerId (  ) ;
var area = area . begin ( ctx ) ;
// Calculate roughly how much larger the window size is compared to the inner rect
const /* Ziggify: ( title_bar_height , title_content_spacing ) */ =if(with_title_bar){
const style = ctx . style (  ) ;
const spacing = window_margin . top + window_margin . bottom;
const height = ctx . fonts (  | f | title . fontHeight ( f ,  & style )  )  + spacing;
window_frame . rounding . ne = window_frame . rounding . ne . clamp ( 0.0 , height / 2.0 ) ;
window_frame . rounding . nw = window_frame . rounding . nw . clamp ( 0.0 , height / 2.0 ) ;
 ( height , spacing ) 
}
else{
 ( 0.0 , 0.0 ) 
}
;
// First check for resize to avoid frame delay:
const last_frame_outer_rect = area . state (  )  . rect (  ) ;
const resize_interaction = resizeInteraction ( ctx , possible , area_layer_id , last_frame_outer_rect ) ;
const margins = window_frame . outer_margin . sum (  )  + window_frame . inner_margin . sum (  )  + vec2 ( 0.0 , title_bar_height ) ;
resizeResponse ( resize_interaction , ctx , margins , area_layer_id , &area , resize_id ,  ) ;
var area_content_ui = area . contentUi ( ctx ) ;
const content_inner = {
// BEGIN FRAME --------------------------------
const frame_stroke = window_frame . stroke;
var frame = window_frame . begin ( &area_content_ui ) ;
const show_close_button = open . isSome (  ) ;
const where_to_put_header_background =  & area_content_ui . painter (  )  . add ( Shape . Noop ) ;
// Backup item spacing before the title bar
const item_spacing = frame . content_ui . spacing (  )  . item_spacing;
// Use title bar spacing as the item spacing before the content
frame . content_ui . spacingMut (  )  . item_spacing . y = title_content_spacing;
const title_bar = if(with_title_bar){
const title_bar = showTitleBar ( &frame . content_ui , title , show_close_button , &collapsing , collapsible ,  ) ;
resize . min_size . x = resize . min_size . x . atLeast ( title_bar . rect . width (  )  ) ;// Prevent making window smaller than title bar width
Some ( title_bar ) 
}
else{
None
}
;
// Remove item spacing after the title bar
frame . content_ui . spacingMut (  )  . item_spacing . y = 0.0;
const /* Ziggify: ( content_inner , mut content_response ) */ =collapsing . showBodyUnindented ( &frame . content_ui ,  | ui | {
// Restore item spacing for the content
ui . spacingMut (  )  . item_spacing . y = item_spacing . y;
resize . show ( ui ,  | ui | {
if(scroll . isAnyScrollEnabled (  ) ){
scroll . show ( ui , add_contents )  . inner
}
else{
addContents ( ui ) 
}

}
 ) 
}
 )  . mapOr (  ( None , None )  ,  | ir |  ( Some ( ir . inner )  , Some ( ir . response )  )  ) ;
const outer_rect = frame . end ( &area_content_ui )  . rect;
paintResizeCorner (  & area_content_ui ,  & possible , outer_rect , frame_stroke , window_frame . rounding ,  ) ;
// END FRAME --------------------------------
if (/* Ziggify: Some ( title_bar ) */ title_bar) {
var title_rect = Rect . fromMinSize ( outer_rect . min + vec2 ( border_padding , border_padding )  , Vec2 {.x = outer_rect . size (  )  . x - border_padding * 2.0,.y = title_bar_height,} ,  ) ;
title_rect = area_content_ui . painter (  )  . roundRectToPixels ( title_rect ) ;
if(on_top and area_content_ui . visuals (  )  . window_highlight_topmost){
var round = window_frame . rounding;
// Eliminate the rounding gap between the title bar and the window frame
round -  = border_padding;
if( ! is_collapsed){
round . se = 0.0;
round . sw = 0.0;

}
area_content_ui . painter (  )  . set (  * where_to_put_header_background , RectShape . filled ( title_rect , round , header_color )  ,  ) ;

}
;
// Fix title bar separator line position
if (/* Ziggify: Some ( response ) */ &content_response) {
response . rect . min . y = outer_rect . min . y + title_bar_height + border_padding;

}
title_bar . ui ( &area_content_ui , title_rect ,  & content_response , open , &collapsing , collapsible ,  ) ;

}
collapsing . store ( ctx ) ;
paintFrameInteraction (  & area_content_ui , outer_rect , resize_interaction ) ;
content_inner
}
;
const full_response = area . end ( ctx , area_content_ui ) ;
const inner_response = InnerResponse {.inner = content_inner,.response = full_response,};
Some ( inner_response ) 
}

// END: impl < ' open > Window < ' open >
fn paintResizeCorner(ui: Ui,possible: PossibleInteractions,outer_rect: Rect,stroke: Stroke,rounding: Rounding,)void{
const stroke = stroke . into (  ) ;
const rounding = rounding . into (  ) ;
const /* Ziggify: ( corner , radius ) */ =if(possible . resize_right and possible . resize_bottom){
 ( Align2 . RIGHT_BOTTOM , rounding . se ) 
}
else if(possible . resize_left and possible . resize_bottom){
 ( Align2 . LEFT_BOTTOM , rounding . sw ) 
}
else if(possible . resize_left and possible . resize_top){
 ( Align2 . LEFT_TOP , rounding . nw ) 
}
else if(possible . resize_right and possible . resize_top){
 ( Align2 . RIGHT_TOP , rounding . ne ) 
}
else{
return ;

}
;
// Adjust the corner offset to accommodate the stroke width and window rounding
const offset = if(radius <= 2.0 and stroke . width < 2.0){
2.0
}
else{
// The corner offset is calculated to make the corner appear to be in the correct position
 ( 2.0_f32 . sqrt (  )  *  ( 1.0 + radius + stroke . width / 2.0 )  - radius )  * 45.0_f32 . toRadians (  )  . cos (  ) 
}
;
const corner_size = Vec2 . splat ( ui . visuals (  )  . resize_corner_size ) ;
const corner_rect = corner . alignSizeWithinRect ( corner_size , outer_rect ) ;
const corner_rect = corner_rect . translate (  - offset * corner . toSign (  )  ) ;// move away from corner
crate . resize . paintResizeCornerWithStyle ( ui ,  & corner_rect , stroke . color , corner ) ;

}
// ----------------------------------------------------------------------------
/// Which sides can be resized?
const PossibleInteractions = struct {
// Which sides can we drag to resize or move?
resize_left: bool,
resize_right: bool,
resize_top: bool,
resize_bottom: bool,
};
// BEGIN: impl PossibleInteractions
fn new(area: Area,resize: Resize,is_collapsed: bool)PossibleInteractions{
const movable = area . isEnabled (  )  and area . isMovable (  ) ;
const resizable = area . isEnabled (  )  and resize . isResizable (  )  and  ! is_collapsed;
const pivot = area . getPivot (  ) ;
PossibleInteractions {.resize_left = resizable and  ( movable or pivot . x (  )  !  = Align . LEFT ) ,.resize_right = resizable and  ( movable or pivot . x (  )  !  = Align . RIGHT ) ,.resize_top = resizable and  ( movable or pivot . y (  )  !  = Align . TOP ) ,.resize_bottom = resizable and  ( movable or pivot . y (  )  !  = Align . BOTTOM ) ,}
}
pub fn resizable(self: PossibleInteractions)bool{
self . resize_left or self . resize_right or self . resize_top or self . resize_bottom
}

// END: impl PossibleInteractions
/// Resizing the window edges.
const ResizeInteraction = struct {
start_rect: Rect,
left: SideResponse,
right: SideResponse,
top: SideResponse,
bottom: SideResponse,
};
/// A minitature version of `Response`, for each side of the window.
const SideResponse = struct {
hover: bool,
drag: bool,
};
// BEGIN: impl SideResponse
pub fn any(self: SideResponse)bool{
self . hover or self . drag
}

// END: impl SideResponse
// BEGIN: impl std :: ops :: BitOrAssign for SideResponse
fn bitorAssign(self: *SideResponse,rhs: SideResponse)void{
 * self = SideResponse {.hover = self . hover or rhs . hover,.drag = self . drag or rhs . drag,};

}

// END: impl std :: ops :: BitOrAssign for SideResponse
// BEGIN: impl ResizeInteraction
pub fn setCursor(self: ResizeInteraction,ctx: Context)void{
const left = self . left . any (  ) ;
const right = self . right . any (  ) ;
const top = self . top . any (  ) ;
const bottom = self . bottom . any (  ) ;
if( ( left and top )  or  ( right and bottom ) ){
ctx . setCursorIcon ( CursorIcon . ResizeNwSe ) ;

}
else if( ( right and top )  or  ( left and bottom ) ){
ctx . setCursorIcon ( CursorIcon . ResizeNeSw ) ;

}
else if(left or right){
ctx . setCursorIcon ( CursorIcon . ResizeHorizontal ) ;

}
else if(bottom or top){
ctx . setCursorIcon ( CursorIcon . ResizeVertical ) ;

}

}
pub fn anyHovered(self: ResizeInteraction)bool{
self . left . hover or self . right . hover or self . top . hover or self . bottom . hover
}
pub fn anyDragged(self: ResizeInteraction)bool{
self . left . drag or self . right . drag or self . top . drag or self . bottom . drag
}

// END: impl ResizeInteraction
fn resizeResponse(resize_interaction: ResizeInteraction,ctx: Context,margins: Vec2,area_layer_id: LayerId,area: *area.Prepared,resize_id: Id,)void{
const /* Ziggify: Some ( new_rect ) */ =moveAndResizeWindow ( ctx ,  & resize_interaction ) else{
return ;

}
;
var new_rect = ctx . roundRectToPixels ( new_rect ) ;
if(area . constrain (  ) ){
new_rect = ctx . constrainWindowRectToArea ( new_rect , area . constrainRect (  )  ) ;

}
// TODO(emilk): add this to a Window state instead as a command "move here next frame"
area . stateMut (  )  . setLeftTopPos ( new_rect . leftTop (  )  ) ;
if(resize_interaction . anyDragged (  ) ){
if (/* Ziggify: Some ( mut state ) */ resize . State . load ( ctx , resize_id ) ) {
state . requested_size = Some ( new_rect . size (  )  - margins ) ;
state . store ( ctx , resize_id ) ;

}

}
ctx . memoryMut (  | mem | mem . areasMut (  )  . moveToTop ( area_layer_id )  ) ;

}
fn moveAndResizeWindow(ctx: Context,interaction: ResizeInteraction)?Rect{
if( ! interaction . anyDragged (  ) ){
return None;

}
const pointer_pos = ctx . input (  | i | i . pointer . interactPos (  )  ) ;
var rect = interaction . start_rect;// prevent drift
if(interaction . left . drag){
rect . min . x = ctx . roundToPixel ( pointer_pos . x ) ;

}
else if(interaction . right . drag){
rect . max . x = ctx . roundToPixel ( pointer_pos . x ) ;

}
if(interaction . top . drag){
rect . min . y = ctx . roundToPixel ( pointer_pos . y ) ;

}
else if(interaction . bottom . drag){
rect . max . y = ctx . roundToPixel ( pointer_pos . y ) ;

}
Some ( rect ) 
}
fn resizeInteraction(ctx: Context,possible: PossibleInteractions,layer_id: LayerId,rect: Rect,)ResizeInteraction{
if( ! possible . resizable (  ) ){
return ResizeInteraction {.start_rect = rect,.left = Default . default (  ) ,.right = Default . default (  ) ,.top = Default . default (  ) ,.bottom = Default . default (  ) ,};

}
const is_dragging =  | rect , id | {
const response = ctx . createWidget ( WidgetRect {.layer_id = layer_id,.id = id,.rect = rect,.interact_rect = rect,.sense = Sense . drag (  ) ,.enabled = true,} ) ;
SideResponse {.hover = response . hovered (  ) ,.drag = response . dragged (  ) ,}
}
;
const id = Id . new ( layer_id )  . with ( "edge_drag" ) ;
const side_grab_radius = ctx . style (  )  . interaction . resize_grab_radius_side;
const corner_grab_radius = ctx . style (  )  . interaction . resize_grab_radius_corner;
const corner_rect =  | center : Pos2 | Rect . fromCenterSize ( center , Vec2 . splat ( 2.0 * corner_grab_radius )  ) ;
// What are we dragging/hovering?
const /* Ziggify: [ mut left , mut right , mut top , mut bottom ] */ =[SideResponse . default (  ) ;4];
// ----------------------------------------
// Check sides first, so that corners are on top, covering the sides (i.e. corners have priority)
if(possible . resize_right){
const response = isDragging ( Rect . fromMinMax ( rect . rightTop (  )  , rect . rightBottom (  )  )  . expand ( side_grab_radius )  , id . with ( "right" )  ,  ) ;
right |  = response;

}
if(possible . resize_left){
const response = isDragging ( Rect . fromMinMax ( rect . leftTop (  )  , rect . leftBottom (  )  )  . expand ( side_grab_radius )  , id . with ( "left" )  ,  ) ;
left |  = response;

}
if(possible . resize_bottom){
const response = isDragging ( Rect . fromMinMax ( rect . leftBottom (  )  , rect . rightBottom (  )  )  . expand ( side_grab_radius )  , id . with ( "bottom" )  ,  ) ;
bottom |  = response;

}
if(possible . resize_top){
const response = isDragging ( Rect . fromMinMax ( rect . leftTop (  )  , rect . rightTop (  )  )  . expand ( side_grab_radius )  , id . with ( "top" )  ,  ) ;
top |  = response;

}
// ----------------------------------------
// Now check corners:
if(possible . resize_right and possible . resize_bottom){
const response = isDragging ( cornerRect ( rect . rightBottom (  )  )  , id . with ( "right_bottom" )  ) ;
right |  = response;
bottom |  = response;

}
if(possible . resize_right and possible . resize_top){
const response = isDragging ( cornerRect ( rect . rightTop (  )  )  , id . with ( "right_top" )  ) ;
right |  = response;
top |  = response;

}
if(possible . resize_left and possible . resize_bottom){
const response = isDragging ( cornerRect ( rect . leftBottom (  )  )  , id . with ( "left_bottom" )  ) ;
left |  = response;
bottom |  = response;

}
if(possible . resize_left and possible . resize_top){
const response = isDragging ( cornerRect ( rect . leftTop (  )  )  , id . with ( "left_top" )  ) ;
left |  = response;
top |  = response;

}
const interaction = ResizeInteraction {.start_rect = rect,.left = left,.right = right,.top = top,.bottom = bottom,};
interaction . setCursor ( ctx ) ;
interaction
}
/// Fill in parts of the window frame when we resize by dragging that part
fn paintFrameInteraction(ui: Ui,rect: Rect,interaction: ResizeInteraction)void{
const visuals = if(interaction . anyDragged (  ) ){
ui . style (  )  . visuals . widgets . active
}
else if(interaction . anyHovered (  ) ){
ui . style (  )  . visuals . widgets . hovered
}
else{
return ;

}
;
const /* Ziggify: [ left , right , top , bottom ] : [ bool ; 4 ] ; if interaction . any_dragged ( ) { left = interaction . left . drag ; right = interaction . right . drag ; top = interaction . top . drag ; bottom = interaction . bottom . drag ; } else { left = interaction . left . hover ; right = interaction . right . hover ; top = interaction . top . hover ; bottom = interaction . bottom . hover ; } let rounding */ =ui . visuals (  )  . window_rounding;
const /* Ziggify: Rect { min , max } */ =rect;
var points = Vec . new (  ) ;
if(right and  ! bottom and  ! top){
points . push ( pos2 ( max . x , min . y + rounding . ne )  ) ;
points . push ( pos2 ( max . x , max . y - rounding . se )  ) ;

}
if(right and bottom){
points . push ( pos2 ( max . x , min . y + rounding . ne )  ) ;
points . push ( pos2 ( max . x , max . y - rounding . se )  ) ;
addCircleQuadrant ( &points , pos2 ( max . x - rounding . se , max . y - rounding . se )  , rounding . se , 0.0 ,  ) ;

}
if(bottom){
points . push ( pos2 ( max . x - rounding . se , max . y )  ) ;
points . push ( pos2 ( min . x + rounding . sw , max . y )  ) ;

}
if(left and bottom){
addCircleQuadrant ( &points , pos2 ( min . x + rounding . sw , max . y - rounding . sw )  , rounding . sw , 1.0 ,  ) ;

}
if(left){
points . push ( pos2 ( min . x , max . y - rounding . sw )  ) ;
points . push ( pos2 ( min . x , min . y + rounding . nw )  ) ;

}
if(left and top){
addCircleQuadrant ( &points , pos2 ( min . x + rounding . nw , min . y + rounding . nw )  , rounding . nw , 2.0 ,  ) ;

}
if(top){
points . push ( pos2 ( min . x + rounding . nw , min . y )  ) ;
points . push ( pos2 ( max . x - rounding . ne , min . y )  ) ;

}
if(right and top){
addCircleQuadrant ( &points , pos2 ( max . x - rounding . ne , min . y + rounding . ne )  , rounding . ne , 3.0 ,  ) ;
points . push ( pos2 ( max . x , min . y + rounding . ne )  ) ;
points . push ( pos2 ( max . x , max . y - rounding . se )  ) ;

}
ui . painter (  )  . add ( Shape . line ( points , visuals . bg_stroke )  ) ;

}
// ----------------------------------------------------------------------------
const TitleBar = struct {
/// A title Id used for dragging windows
id: Id,
/// Prepared text in the title
title_galley: Galley,
/// Size of the title bar in a collapsed state (if window is collapsible),
/// which includes all necessary space for showing the expand button, the
/// title and the close button.
min_rect: Rect,
/// Size of the title bar in an expanded state. This size become known only
/// after expanding window and painting its content
rect: Rect,
};
fn showTitleBar(ui: *Ui,title: WidgetText,show_close_button: bool,collapsing: *CollapsingState,collapsible: bool,)TitleBar{
const inner_response = ui . horizontal (  | ui | {
const height = ui . fonts (  | fonts | title . fontHeight ( fonts , ui . style (  )  )  )  . max ( ui . spacing (  )  . interact_size . y ) ;
ui . setMinHeight ( height ) ;
const item_spacing = ui . spacing (  )  . item_spacing;
const button_size = Vec2 . splat ( ui . spacing (  )  . icon_width ) ;
const pad =  ( height - button_size . y )  / 2.0;// calculated so that the icon is on the diagonal (if window padding is symmetrical)
if(collapsible){
ui . addSpace ( pad ) ;
collapsing . showDefaultButtonWithSize ( ui , button_size ) ;

}
const title_galley = title . intoGalley ( ui , Some ( false )  , f32 . INFINITY , TextStyle . Heading ) ;
const minimum_width = if(collapsible or show_close_button){
// If at least one button is shown we make room for both buttons (since title is centered):
2.0 *  ( pad + button_size . x + item_spacing . x )  + title_galley . size (  )  . x
}
else{
pad + title_galley . size (  )  . x + pad
}
;
const min_rect = Rect . fromMinSize ( ui . minRect (  )  . min , vec2 ( minimum_width , height )  ) ;
const id = ui . advanceCursorAfterRect ( min_rect ) ;
TitleBar {.id = id,.title_galley = title_galley,.min_rect = min_rect,.rect = Rect . NAN,}
}
 ) ;
const title_bar = inner_response . inner;
const rect = inner_response . response . rect;
TitleBar {.rect = rect,/* Ziggify: .. title_bar*/}
}
// BEGIN: impl TitleBar
/// Finishes painting of the title bar when the window content size already known.
///
/// # Parameters
///
/// - `ui`:
/// - `outer_rect`:
/// - `content_response`: if `None`, window is collapsed at this frame, otherwise contains
///   a result of rendering the window content
/// - `open`: if `None`, no "Close" button will be rendered, otherwise renders and processes
///   the "Close" button and writes a `false` if window was closed
/// - `collapsing`: holds the current expanding state. Can be changed by double click on the
///   title if `collapsible` is `true`
/// - `collapsible`: if `true`, double click on the title bar will be handled for a change
///   of `collapsing` state
fn ui(self: *TitleBar,ui: *Ui,outer_rect: Rect,content_response: ?Response,open: Option(*bool),collapsing: *CollapsingState,collapsible: bool,)void{
if (/* Ziggify: Some ( content_response ) */  & content_response) {
// Now we know how large we got to be:
self . rect . max . x = self . rect . max . x . max ( content_response . rect . max . x ) ;

}
if (/* Ziggify: Some ( open ) */ open) {
// Add close button now that we know our full width:
if(self . closeButtonUi ( ui )  . clicked (  ) ){
 * open = false;

}

}
const full_top_rect = Rect . fromXYRanges ( self . rect . xRange (  )  , self . min_rect . yRange (  )  ) ;
const text_pos = emath . align . centerSizeInRect ( self . title_galley . size (  )  , full_top_rect )  . leftTop (  ) ;
const text_pos = text_pos - self . title_galley . rect . min . toVec2 (  ) ;
const text_pos = text_pos - 1.5 * Vec2 . Y;// HACK: center on x-height of text (looks better)
ui . painter (  )  . galley ( text_pos , self . title_galley . clone (  )  , ui . visuals (  )  . textColor (  )  ,  ) ;
if (/* Ziggify: Some ( content_response ) */  & content_response) {
// paint separator between title and content:
const y = content_response . rect . top (  ) ;
// let y = lerp(self.rect.bottom()..=content_response.rect.top(), 0.5);
const stroke = ui . visuals (  )  . widgets . noninteractive . bg_stroke;
// Workaround: To prevent border infringement,
// the 0.1 value should ideally be calculated using TessellationOptions::feathering_size_in_pixels
const x_range = outer_rect . xRange (  )  . shrink ( 0.1 ) ;
ui . painter (  )  . hline ( x_range , y , stroke ) ;

}
// Don't cover the close- and collapse buttons:
const double_click_rect = self . rect . shrink2 ( vec2 ( 32.0 , 0.0 )  ) ;
if(ui . interact ( double_click_rect , self . id , Sense . click (  )  )  . doubleClicked (  )  and collapsible){
collapsing . toggle ( ui ) ;

}

}
/// Paints the "Close" button at the right side of the title bar
/// and processes clicks on it.
///
/// The button is square and its size is determined by the
/// [`crate::style::Spacing::icon_width`] setting.
fn closeButtonUi(self: TitleBar,ui: *Ui)Response{
const button_size = Vec2 . splat ( ui . spacing (  )  . icon_width ) ;
const pad =  ( self . rect . height (  )  - button_size . y )  / 2.0;// calculated so that the icon is on the diagonal (if window padding is symmetrical)
const button_rect = Rect . fromMinSize ( pos2 ( self . rect . right (  )  - pad - button_size . x , self . rect . center (  )  . y - 0.5 * button_size . y ,  )  , button_size ,  ) ;
closeButton ( ui , button_rect ) 
}

// END: impl TitleBar
/// Paints the "Close" button of the window and processes clicks on it.
///
/// The close button is just an `X` symbol painted by a current stroke
/// for foreground elements (such as a label text).
///
/// # Parameters
/// - `ui`:
/// - `rect`: The rectangular area to fit the button in
///
/// Returns the result of a click on a button if it was pressed
fn closeButton(ui: *Ui,rect: Rect)Response{
const close_id = ui . autoIdWith ( "window_close_button" ) ;
const response = ui . interact ( rect , close_id , Sense . click (  )  ) ;
ui . expandToIncludeRect ( response . rect ) ;
const visuals = ui . style (  )  . interact (  & response ) ;
const rect = rect . shrink ( 2.0 )  . expand ( visuals . expansion ) ;
const stroke = visuals . fg_stroke;
ui . painter (  )  . lineSegment ( [rect . leftTop (  )  , rect . rightBottom (  ) ] , stroke ) ;
ui . painter (  )  . lineSegment ( [rect . rightTop (  )  , rect . leftBottom (  ) ] , stroke ) ;
response
}
