Token main.Token.#
Token main.Token.!
Token main.Token.[
Token main.Token.d_ident: warn
Token main.Token.(
Token main.Token.d_ident: missing_docs
Token main.Token.)
Token main.Token.]
    AFTER: // Let's keep `Context` well-documented.
Token main.Token.kw_use
Token main.Token.d_ident: std
Token main.Token.::
Token main.Token.{
Token main.Token.d_ident: borrow
Token main.Token.::
Token main.Token.d_ident: Cow
Token main.Token.,
Token main.Token.d_ident: cell
Token main.Token.::
Token main.Token.d_ident: RefCell
Token main.Token.,
Token main.Token.d_ident: panic
Token main.Token.::
Token main.Token.d_ident: Location
Token main.Token.,
Token main.Token.d_ident: sync
Token main.Token.::
Token main.Token.d_ident: Arc
Token main.Token.,
Token main.Token.d_ident: time
Token main.Token.::
Token main.Token.d_ident: Duration
Token main.Token.}
Token main.Token.;
Token main.Token.kw_use
Token main.Token.d_ident: ahash
Token main.Token.::
Token main.Token.d_ident: HashMap
Token main.Token.;
Token main.Token.kw_use
Token main.Token.d_ident: epaint
Token main.Token.::
Token main.Token.{
Token main.Token.d_ident: emath
Token main.Token.::
Token main.Token.d_ident: TSTransform
Token main.Token.,
Token main.Token.d_ident: mutex
Token main.Token.::
Token main.Token.*
Token main.Token.,
Token main.Token.d_ident: stats
Token main.Token.::
Token main.Token.*
Token main.Token.,
Token main.Token.d_ident: text
Token main.Token.::
Token main.Token.d_ident: Fonts
Token main.Token.,
Token main.Token.d_ident: util
Token main.Token.::
Token main.Token.d_ident: OrderedFloat
Token main.Token.,
Token main.Token.d_ident: TessellationOptions
Token main.Token.,
Token main.Token.*
Token main.Token.,
Token main.Token.}
Token main.Token.;
Token main.Token.kw_use
Token main.Token.d_ident: crate
Token main.Token.::
Token main.Token.{
Token main.Token.d_ident: animation_manager
Token main.Token.::
Token main.Token.d_ident: AnimationManager
Token main.Token.,
Token main.Token.d_ident: data
Token main.Token.::
Token main.Token.d_ident: output
Token main.Token.::
Token main.Token.d_ident: PlatformOutput
Token main.Token.,
Token main.Token.d_ident: frame_state
Token main.Token.::
Token main.Token.d_ident: FrameState
Token main.Token.,
Token main.Token.d_ident: input_state
Token main.Token.::
Token main.Token.*
Token main.Token.,
Token main.Token.d_ident: layers
Token main.Token.::
Token main.Token.d_ident: GraphicLayers
Token main.Token.,
Token main.Token.d_ident: load
Token main.Token.::
Token main.Token.{
Token main.Token.d_ident: Bytes
Token main.Token.,
Token main.Token.d_ident: Loaders
Token main.Token.,
Token main.Token.d_ident: SizedTexture
Token main.Token.}
Token main.Token.,
Token main.Token.d_ident: memory
Token main.Token.::
Token main.Token.d_ident: Options
Token main.Token.,
Token main.Token.d_ident: os
Token main.Token.::
Token main.Token.d_ident: OperatingSystem
Token main.Token.,
Token main.Token.d_ident: output
Token main.Token.::
Token main.Token.d_ident: FullOutput
Token main.Token.,
Token main.Token.d_ident: util
Token main.Token.::
Token main.Token.d_ident: IdTypeMap
Token main.Token.,
Token main.Token.d_ident: viewport
Token main.Token.::
Token main.Token.d_ident: ViewportClass
Token main.Token.,
Token main.Token.d_ident: TextureHandle
Token main.Token.,
Token main.Token.d_ident: ViewportCommand
Token main.Token.,
Token main.Token.*
Token main.Token.,
Token main.Token.}
Token main.Token.;
Token main.Token.kw_use
Token main.Token.d_ident: self
Token main.Token.::
Token main.Token.{
Token main.Token.d_ident: hit_test
Token main.Token.::
Token main.Token.d_ident: WidgetHits
Token main.Token.,
Token main.Token.d_ident: interaction
Token main.Token.::
Token main.Token.d_ident: InteractionSnapshot
Token main.Token.}
Token main.Token.;
    BEFORE: /// Information given to the backend about when it is time to repaint the ui.
    BEFORE: ///
    BEFORE: /// This is given in the callback set by [`Context::set_request_repaint_callback`].
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: derive
Token main.Token.(
Token main.Token.d_ident: Clone
Token main.Token.,
Token main.Token.d_ident: Copy
Token main.Token.,
Token main.Token.d_ident: Debug
Token main.Token.)
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_struct
Token main.Token.d_ident: RequestRepaintInfo
Token main.Token.{
    BEFORE: /// This is used to specify what viewport that should repaint.
Token main.Token.kw_pub
Token main.Token.d_ident: viewport_id
Token main.Token.:
Token main.Token.d_ident: ViewportId
Token main.Token.,
    BEFORE: /// Repaint after this duration. If zero, repaint as soon as possible.
Token main.Token.kw_pub
Token main.Token.d_ident: delay
Token main.Token.:
Token main.Token.d_ident: Duration
Token main.Token.,
    BEFORE: /// The current frame number.
    BEFORE: ///
    BEFORE: /// This can be compared to [`Context::frame_nr`] to see if we've already
    BEFORE: /// triggered the painting of the next frame.
Token main.Token.kw_pub
Token main.Token.d_ident: current_frame_nr
Token main.Token.:
Token main.Token.d_ident: u64
Token main.Token.,
Token main.Token.}
    BEFORE: // ----------------------------------------------------------------------------
Token main.Token.d_ident: thread_local
Token main.Token.!
Token main.Token.{
Token main.Token.kw_static
Token main.Token.d_ident: IMMEDIATE_VIEWPORT_RENDERER
Token main.Token.:
Token main.Token.d_ident: RefCell
Token main.Token.<
Token main.Token.d_ident: Option
Token main.Token.<
Token main.Token.d_ident: Box
Token main.Token.<
Token main.Token.d_ident: ImmediateViewportRendererCallback
Token main.Token.>
Token main.Token.>
Token main.Token.>
Token main.Token.=
Token main.Token.d_ident: Default
Token main.Token.::
Token main.Token.d_ident: default
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.}
    BEFORE: // ----------------------------------------------------------------------------
Token main.Token.kw_struct
Token main.Token.d_ident: WrappedTextureManager
Token main.Token.(
Token main.Token.d_ident: Arc
Token main.Token.<
Token main.Token.d_ident: RwLock
Token main.Token.<
Token main.Token.d_ident: epaint
Token main.Token.::
Token main.Token.d_ident: TextureManager
Token main.Token.>
Token main.Token.>
Token main.Token.)
Token main.Token.;
Token main.Token.kw_impl
Token main.Token.d_ident: Default
Token main.Token.kw_for
Token main.Token.d_ident: WrappedTextureManager
Token main.Token.{
Token main.Token.kw_fn
Token main.Token.d_ident: default
Token main.Token.(
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: Self
Token main.Token.{
Token main.Token.kw_let
Token main.Token.kw_mut
Token main.Token.d_ident: tex_mngr
Token main.Token.=
Token main.Token.d_ident: epaint
Token main.Token.::
Token main.Token.d_ident: textures
Token main.Token.::
Token main.Token.d_ident: TextureManager
Token main.Token.::
Token main.Token.d_ident: default
Token main.Token.(
Token main.Token.)
Token main.Token.;
    BEFORE: // Will be filled in later
Token main.Token.kw_let
Token main.Token.d_ident: font_id
Token main.Token.=
Token main.Token.d_ident: tex_mngr
Token main.Token..
Token main.Token.d_ident: alloc
Token main.Token.(
Token main.Token.d_string: "egui_font_texture"
Token main.Token..
Token main.Token.d_ident: into
Token main.Token.(
Token main.Token.)
Token main.Token.,
Token main.Token.d_ident: epaint
Token main.Token.::
Token main.Token.d_ident: FontImage
Token main.Token.::
Token main.Token.d_ident: new
Token main.Token.(
Token main.Token.[
Token main.Token.d_number: 0
Token main.Token.,
Token main.Token.d_number: 0
Token main.Token.]
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: into
Token main.Token.(
Token main.Token.)
Token main.Token.,
Token main.Token.d_ident: Default
Token main.Token.::
Token main.Token.d_ident: default
Token main.Token.(
Token main.Token.)
Token main.Token.,
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: assert_eq
Token main.Token.!
Token main.Token.(
Token main.Token.d_ident: font_id
Token main.Token.,
Token main.Token.d_ident: TextureId
Token main.Token.::
Token main.Token.d_ident: default
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: Self
Token main.Token.(
Token main.Token.d_ident: Arc
Token main.Token.::
Token main.Token.d_ident: new
Token main.Token.(
Token main.Token.d_ident: RwLock
Token main.Token.::
Token main.Token.d_ident: new
Token main.Token.(
Token main.Token.d_ident: tex_mngr
Token main.Token.)
Token main.Token.)
Token main.Token.)
Token main.Token.}
Token main.Token.}
    BEFORE: // ----------------------------------------------------------------------------
    BEFORE: /// Generic event callback.
Token main.Token.kw_pub
Token main.Token.kw_type
Token main.Token.d_ident: ContextCallback
Token main.Token.=
Token main.Token.d_ident: Arc
Token main.Token.<
Token main.Token.kw_dyn
Token main.Token.d_ident: Fn
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: Context
Token main.Token.)
Token main.Token.+
Token main.Token.d_ident: Send
Token main.Token.+
Token main.Token.d_ident: Sync
Token main.Token.>
Token main.Token.;
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: derive
Token main.Token.(
Token main.Token.d_ident: Clone
Token main.Token.)
Token main.Token.]
Token main.Token.kw_struct
Token main.Token.d_ident: NamedContextCallback
Token main.Token.{
Token main.Token.d_ident: debug_name
Token main.Token.:
Token main.Token.&
Token main.Token.'
Token main.Token.kw_static
Token main.Token.d_ident: str
Token main.Token.,
Token main.Token.d_ident: callback
Token main.Token.:
Token main.Token.d_ident: ContextCallback
Token main.Token.,
Token main.Token.}
    BEFORE: /// Callbacks that users can register
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: derive
Token main.Token.(
Token main.Token.d_ident: Clone
Token main.Token.,
Token main.Token.d_ident: Default
Token main.Token.)
Token main.Token.]
Token main.Token.kw_struct
Token main.Token.d_ident: Plugins
Token main.Token.{
Token main.Token.kw_pub
Token main.Token.d_ident: on_begin_frame
Token main.Token.:
Token main.Token.d_ident: Vec
Token main.Token.<
Token main.Token.d_ident: NamedContextCallback
Token main.Token.>
Token main.Token.,
Token main.Token.kw_pub
Token main.Token.d_ident: on_end_frame
Token main.Token.:
Token main.Token.d_ident: Vec
Token main.Token.<
Token main.Token.d_ident: NamedContextCallback
Token main.Token.>
Token main.Token.,
Token main.Token.}
Token main.Token.kw_impl
Token main.Token.d_ident: Plugins
Token main.Token.{
Token main.Token.kw_fn
Token main.Token.d_ident: call
Token main.Token.(
Token main.Token.d_ident: ctx
Token main.Token.:
Token main.Token.&
Token main.Token.d_ident: Context
Token main.Token.,
Token main.Token.d_ident: _cb_name
Token main.Token.:
Token main.Token.&
Token main.Token.d_ident: str
Token main.Token.,
Token main.Token.d_ident: callbacks
Token main.Token.:
Token main.Token.&
Token main.Token.[
Token main.Token.d_ident: NamedContextCallback
Token main.Token.]
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: crate
Token main.Token.::
Token main.Token.d_ident: profile_scope
Token main.Token.!
Token main.Token.(
Token main.Token.d_string: "plugins"
Token main.Token.,
Token main.Token.d_ident: _cb_name
Token main.Token.)
Token main.Token.;
Token main.Token.kw_for
Token main.Token.d_ident: NamedContextCallback
Token main.Token.{
Token main.Token.d_ident: debug_name
Token main.Token.:
Token main.Token.d_ident: _name
Token main.Token.,
Token main.Token.d_ident: callback
Token main.Token.,
Token main.Token.}
Token main.Token.kw_in
Token main.Token.d_ident: callbacks
Token main.Token.{
Token main.Token.d_ident: crate
Token main.Token.::
Token main.Token.d_ident: profile_scope
Token main.Token.!
Token main.Token.(
Token main.Token.d_string: "plugin"
Token main.Token.,
Token main.Token.d_ident: _name
Token main.Token.)
Token main.Token.;
Token main.Token.(
Token main.Token.d_ident: callback
Token main.Token.)
Token main.Token.(
Token main.Token.d_ident: ctx
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.}
Token main.Token.kw_fn
Token main.Token.d_ident: on_begin_frame
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: ctx
Token main.Token.:
Token main.Token.&
Token main.Token.d_ident: Context
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: Self
Token main.Token.::
Token main.Token.d_ident: call
Token main.Token.(
Token main.Token.d_ident: ctx
Token main.Token.,
Token main.Token.d_string: "on_begin_frame"
Token main.Token.,
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: on_begin_frame
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.kw_fn
Token main.Token.d_ident: on_end_frame
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: ctx
Token main.Token.:
Token main.Token.&
Token main.Token.d_ident: Context
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: Self
Token main.Token.::
Token main.Token.d_ident: call
Token main.Token.(
Token main.Token.d_ident: ctx
Token main.Token.,
Token main.Token.d_string: "on_end_frame"
Token main.Token.,
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: on_end_frame
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.}
    BEFORE: // ----------------------------------------------------------------------------
    BEFORE: /// Repaint-logic
Token main.Token.kw_impl
Token main.Token.d_ident: ContextImpl
Token main.Token.{
    BEFORE: /// This is where we update the repaint logic.
Token main.Token.kw_fn
Token main.Token.d_ident: begin_frame_repaint_logic
Token main.Token.(
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: viewport_id
Token main.Token.:
Token main.Token.d_ident: ViewportId
Token main.Token.)
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: viewport
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: viewports
Token main.Token..
Token main.Token.d_ident: entry
Token main.Token.(
Token main.Token.d_ident: viewport_id
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: or_default
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: std
Token main.Token.::
Token main.Token.d_ident: mem
Token main.Token.::
Token main.Token.d_ident: swap
Token main.Token.(
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: repaint
Token main.Token..
Token main.Token.d_ident: prev_causes
Token main.Token.,
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: repaint
Token main.Token..
Token main.Token.d_ident: causes
Token main.Token.,
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: repaint
Token main.Token..
Token main.Token.d_ident: causes
Token main.Token..
Token main.Token.d_ident: clear
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: repaint
Token main.Token..
Token main.Token.d_ident: prev_frame_paint_delay
Token main.Token.=
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: repaint
Token main.Token..
Token main.Token.d_ident: repaint_delay
Token main.Token.;
Token main.Token.kw_if
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: repaint
Token main.Token..
Token main.Token.d_ident: outstanding
Token main.Token.==
Token main.Token.d_number: 0
Token main.Token.{
    BEFORE: // We are repainting now, so we can wait a while for the next repaint.
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: repaint
Token main.Token..
Token main.Token.d_ident: repaint_delay
Token main.Token.=
Token main.Token.d_ident: Duration
Token main.Token.::
Token main.Token.d_ident: MAX
Token main.Token.;
Token main.Token.}
Token main.Token.kw_else
Token main.Token.{
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: repaint
Token main.Token..
Token main.Token.d_ident: repaint_delay
Token main.Token.=
Token main.Token.d_ident: Duration
Token main.Token.::
Token main.Token.d_ident: ZERO
Token main.Token.;
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: repaint
Token main.Token..
Token main.Token.d_ident: outstanding
Token main.Token.-
Token main.Token.=
Token main.Token.d_number: 1
Token main.Token.;
Token main.Token.kw_if
Token main.Token.kw_let
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: callback
Token main.Token.)
Token main.Token.=
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: request_repaint_callback
Token main.Token.{
Token main.Token.(
Token main.Token.d_ident: callback
Token main.Token.)
Token main.Token.(
Token main.Token.d_ident: RequestRepaintInfo
Token main.Token.{
Token main.Token.d_ident: viewport_id
Token main.Token.,
Token main.Token.d_ident: delay
Token main.Token.:
Token main.Token.d_ident: Duration
Token main.Token.::
Token main.Token.d_ident: ZERO
Token main.Token.,
Token main.Token.d_ident: current_frame_nr
Token main.Token.:
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: repaint
Token main.Token..
Token main.Token.d_ident: frame_nr
Token main.Token.,
Token main.Token.}
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.}
Token main.Token.}
Token main.Token.kw_fn
Token main.Token.d_ident: request_repaint
Token main.Token.(
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: viewport_id
Token main.Token.:
Token main.Token.d_ident: ViewportId
Token main.Token.,
Token main.Token.d_ident: cause
Token main.Token.:
Token main.Token.d_ident: RepaintCause
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: request_repaint_after
Token main.Token.(
Token main.Token.d_ident: Duration
Token main.Token.::
Token main.Token.d_ident: ZERO
Token main.Token.,
Token main.Token.d_ident: viewport_id
Token main.Token.,
Token main.Token.d_ident: cause
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.kw_fn
Token main.Token.d_ident: request_repaint_after
Token main.Token.(
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: delay
Token main.Token.:
Token main.Token.d_ident: Duration
Token main.Token.,
Token main.Token.d_ident: viewport_id
Token main.Token.:
Token main.Token.d_ident: ViewportId
Token main.Token.,
Token main.Token.d_ident: cause
Token main.Token.:
Token main.Token.d_ident: RepaintCause
Token main.Token.,
Token main.Token.)
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: viewport
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: viewports
Token main.Token..
Token main.Token.d_ident: entry
Token main.Token.(
Token main.Token.d_ident: viewport_id
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: or_default
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_if
Token main.Token.d_ident: delay
Token main.Token.==
Token main.Token.d_ident: Duration
Token main.Token.::
Token main.Token.d_ident: ZERO
Token main.Token.{
    BEFORE: // Each request results in two repaints, just to give some things time to settle.
    BEFORE: // This solves some corner-cases of missing repaints on frame-delayed responses.
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: repaint
Token main.Token..
Token main.Token.d_ident: outstanding
Token main.Token.=
Token main.Token.d_number: 1
Token main.Token.;
Token main.Token.}
Token main.Token.kw_else
Token main.Token.{
    BEFORE: // For non-zero delays, we only repaint once, because
    BEFORE: // otherwise we would just schedule an immediate repaint _now_,
    BEFORE: // which would then clear the delay and repaint again.
    BEFORE: // Hovering a tooltip is a good example of a case where we want to repaint after a delay.
Token main.Token.}
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: repaint
Token main.Token..
Token main.Token.d_ident: causes
Token main.Token..
Token main.Token.d_ident: push
Token main.Token.(
Token main.Token.d_ident: cause
Token main.Token.)
Token main.Token.;
    BEFORE: // We save some CPU time by only calling the callback if we need to.
    BEFORE: // If the new delay is greater or equal to the previous lowest,
    BEFORE: // it means we have already called the callback, and don't need to do it again.
Token main.Token.kw_if
Token main.Token.d_ident: delay
Token main.Token.<
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: repaint
Token main.Token..
Token main.Token.d_ident: repaint_delay
Token main.Token.{
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: repaint
Token main.Token..
Token main.Token.d_ident: repaint_delay
Token main.Token.=
Token main.Token.d_ident: delay
Token main.Token.;
Token main.Token.kw_if
Token main.Token.kw_let
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: callback
Token main.Token.)
Token main.Token.=
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: request_repaint_callback
Token main.Token.{
Token main.Token.(
Token main.Token.d_ident: callback
Token main.Token.)
Token main.Token.(
Token main.Token.d_ident: RequestRepaintInfo
Token main.Token.{
Token main.Token.d_ident: viewport_id
Token main.Token.,
Token main.Token.d_ident: delay
Token main.Token.,
Token main.Token.d_ident: current_frame_nr
Token main.Token.:
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: repaint
Token main.Token..
Token main.Token.d_ident: frame_nr
Token main.Token.,
Token main.Token.}
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.}
Token main.Token.}
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: must_use
Token main.Token.]
Token main.Token.kw_fn
Token main.Token.d_ident: requested_immediate_repaint_prev_frame
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: viewport_id
Token main.Token.:
Token main.Token.&
Token main.Token.d_ident: ViewportId
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: bool
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: viewports
Token main.Token..
Token main.Token.d_ident: get
Token main.Token.(
Token main.Token.d_ident: viewport_id
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: map_or
Token main.Token.(
Token main.Token.d_ident: false
Token main.Token.,
Token main.Token.|
Token main.Token.d_ident: v
Token main.Token.|
Token main.Token.{
Token main.Token.d_ident: v
Token main.Token..
Token main.Token.d_ident: repaint
Token main.Token..
Token main.Token.d_ident: requested_immediate_repaint_prev_frame
Token main.Token.(
Token main.Token.)
Token main.Token.}
Token main.Token.)
Token main.Token.}
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: must_use
Token main.Token.]
Token main.Token.kw_fn
Token main.Token.d_ident: has_requested_repaint
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: viewport_id
Token main.Token.:
Token main.Token.&
Token main.Token.d_ident: ViewportId
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: bool
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: viewports
Token main.Token..
Token main.Token.d_ident: get
Token main.Token.(
Token main.Token.d_ident: viewport_id
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: map_or
Token main.Token.(
Token main.Token.d_ident: false
Token main.Token.,
Token main.Token.|
Token main.Token.d_ident: v
Token main.Token.|
Token main.Token.{
Token main.Token.d_number: 0
Token main.Token.<
Token main.Token.d_ident: v
Token main.Token..
Token main.Token.d_ident: repaint
Token main.Token..
Token main.Token.d_ident: outstanding
Token main.Token.|
Token main.Token.|
Token main.Token.d_ident: v
Token main.Token..
Token main.Token.d_ident: repaint
Token main.Token..
Token main.Token.d_ident: repaint_delay
Token main.Token.<
Token main.Token.d_ident: Duration
Token main.Token.::
Token main.Token.d_ident: MAX
Token main.Token.}
Token main.Token.)
Token main.Token.}
Token main.Token.}
    BEFORE: // ----------------------------------------------------------------------------
    BEFORE: /// State stored per viewport
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: derive
Token main.Token.(
Token main.Token.d_ident: Default
Token main.Token.)
Token main.Token.]
Token main.Token.kw_struct
Token main.Token.d_ident: ViewportState
Token main.Token.{
    BEFORE: /// The type of viewport.
    BEFORE: ///
    BEFORE: /// This will never be [`ViewportClass::Embedded`],
    BEFORE: /// since those don't result in real viewports.
Token main.Token.d_ident: class
Token main.Token.:
Token main.Token.d_ident: ViewportClass
Token main.Token.,
    BEFORE: /// The latest delta
Token main.Token.d_ident: builder
Token main.Token.:
Token main.Token.d_ident: ViewportBuilder
Token main.Token.,
    BEFORE: /// The user-code that shows the GUI, used for deferred viewports.
    BEFORE: ///
    BEFORE: /// `None` for immediate viewports.
Token main.Token.d_ident: viewport_ui_cb
Token main.Token.:
Token main.Token.d_ident: Option
Token main.Token.<
Token main.Token.d_ident: Arc
Token main.Token.<
Token main.Token.d_ident: DeferredViewportUiCallback
Token main.Token.>
Token main.Token.>
Token main.Token.,
Token main.Token.d_ident: input
Token main.Token.:
Token main.Token.d_ident: InputState
Token main.Token.,
    BEFORE: /// State that is collected during a frame and then cleared
Token main.Token.d_ident: frame_state
Token main.Token.:
Token main.Token.d_ident: FrameState
Token main.Token.,
    BEFORE: /// Has this viewport been updated this frame?
Token main.Token.d_ident: used
Token main.Token.:
Token main.Token.d_ident: bool
Token main.Token.,
    BEFORE: /// Written to during the frame.
Token main.Token.d_ident: widgets_this_frame
Token main.Token.:
Token main.Token.d_ident: WidgetRects
Token main.Token.,
    BEFORE: /// Read
Token main.Token.d_ident: widgets_prev_frame
Token main.Token.:
Token main.Token.d_ident: WidgetRects
Token main.Token.,
    BEFORE: /// State related to repaint scheduling.
Token main.Token.d_ident: repaint
Token main.Token.:
Token main.Token.d_ident: ViewportRepaintInfo
Token main.Token.,
    BEFORE: // ----------------------
    BEFORE: // Updated at the start of the frame:
    BEFORE: //
    BEFORE: /// Which widgets are under the pointer?
Token main.Token.d_ident: hits
Token main.Token.:
Token main.Token.d_ident: WidgetHits
Token main.Token.,
    BEFORE: /// What widgets are being interacted with this frame?
    BEFORE: ///
    BEFORE: /// Based on the widgets from last frame, and input in this frame.
Token main.Token.d_ident: interact_widgets
Token main.Token.:
Token main.Token.d_ident: InteractionSnapshot
Token main.Token.,
    BEFORE: // ----------------------
    BEFORE: // The output of a frame:
    BEFORE: //
Token main.Token.d_ident: graphics
Token main.Token.:
Token main.Token.d_ident: GraphicLayers
Token main.Token.,
    BEFORE: // Most of the things in `PlatformOutput` are not actually viewport dependent.
Token main.Token.d_ident: output
Token main.Token.:
Token main.Token.d_ident: PlatformOutput
Token main.Token.,
Token main.Token.d_ident: commands
Token main.Token.:
Token main.Token.d_ident: Vec
Token main.Token.<
Token main.Token.d_ident: ViewportCommand
Token main.Token.>
Token main.Token.,
Token main.Token.}
    BEFORE: /// What called [`Context::request_repaint`]?
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: derive
Token main.Token.(
Token main.Token.d_ident: Clone
Token main.Token.,
Token main.Token.d_ident: Debug
Token main.Token.)
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_struct
Token main.Token.d_ident: RepaintCause
Token main.Token.{
    BEFORE: /// What file had the call that requested the repaint?
Token main.Token.kw_pub
Token main.Token.d_ident: file
Token main.Token.:
Token main.Token.d_ident: String
Token main.Token.,
    BEFORE: /// What line number of the the call that requested the repaint?
Token main.Token.kw_pub
Token main.Token.d_ident: line
Token main.Token.:
Token main.Token.d_ident: u32
Token main.Token.,
Token main.Token.}
Token main.Token.kw_impl
Token main.Token.d_ident: RepaintCause
Token main.Token.{
    BEFORE: /// Capture the file and line number of the call site.
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: allow
Token main.Token.(
Token main.Token.d_ident: clippy
Token main.Token.::
Token main.Token.d_ident: new_without_default
Token main.Token.)
Token main.Token.]
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: track_caller
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: new
Token main.Token.(
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: Self
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: caller
Token main.Token.=
Token main.Token.d_ident: Location
Token main.Token.::
Token main.Token.d_ident: caller
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: Self
Token main.Token.{
Token main.Token.d_ident: file
Token main.Token.:
Token main.Token.d_ident: caller
Token main.Token..
Token main.Token.d_ident: file
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: to_owned
Token main.Token.(
Token main.Token.)
Token main.Token.,
Token main.Token.d_ident: line
Token main.Token.:
Token main.Token.d_ident: caller
Token main.Token..
Token main.Token.d_ident: line
Token main.Token.(
Token main.Token.)
Token main.Token.,
Token main.Token.}
Token main.Token.}
Token main.Token.}
Token main.Token.kw_impl
Token main.Token.d_ident: std
Token main.Token.::
Token main.Token.d_ident: fmt
Token main.Token.::
Token main.Token.d_ident: Display
Token main.Token.kw_for
Token main.Token.d_ident: RepaintCause
Token main.Token.{
Token main.Token.kw_fn
Token main.Token.d_ident: fmt
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: f
Token main.Token.:
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: std
Token main.Token.::
Token main.Token.d_ident: fmt
Token main.Token.::
Token main.Token.d_ident: Formatter
Token main.Token.<
Token main.Token.'
Token main.Token.d_ident: _
Token main.Token.>
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: std
Token main.Token.::
Token main.Token.d_ident: fmt
Token main.Token.::
Token main.Token.d_ident: Result
Token main.Token.{
Token main.Token.d_ident: write
Token main.Token.!
Token main.Token.(
Token main.Token.d_ident: f
Token main.Token.,
Token main.Token.d_string: "{}:{}"
Token main.Token.,
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: file
Token main.Token.,
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: line
Token main.Token.)
Token main.Token.}
Token main.Token.}
    BEFORE: /// Per-viewport state related to repaint scheduling.
Token main.Token.kw_struct
Token main.Token.d_ident: ViewportRepaintInfo
Token main.Token.{
    BEFORE: /// Monotonically increasing counter.
Token main.Token.d_ident: frame_nr
Token main.Token.:
Token main.Token.d_ident: u64
Token main.Token.,
    BEFORE: /// The duration which the backend will poll for new events
    BEFORE: /// before forcing another egui update, even if there's no new events.
    BEFORE: ///
    BEFORE: /// Also used to suppress multiple calls to the repaint callback during the same frame.
    BEFORE: ///
    BEFORE: /// This is also returned in [`crate::ViewportOutput`].
Token main.Token.d_ident: repaint_delay
Token main.Token.:
Token main.Token.d_ident: Duration
Token main.Token.,
    BEFORE: /// While positive, keep requesting repaints. Decrement at the start of each frame.
Token main.Token.d_ident: outstanding
Token main.Token.:
Token main.Token.d_ident: u8
Token main.Token.,
    BEFORE: /// What caused repaints during this frame?
Token main.Token.d_ident: causes
Token main.Token.:
Token main.Token.d_ident: Vec
Token main.Token.<
Token main.Token.d_ident: RepaintCause
Token main.Token.>
Token main.Token.,
    BEFORE: /// What triggered a repaint the previous frame?
    BEFORE: /// (i.e: why are we updating now?)
Token main.Token.d_ident: prev_causes
Token main.Token.:
Token main.Token.d_ident: Vec
Token main.Token.<
Token main.Token.d_ident: RepaintCause
Token main.Token.>
Token main.Token.,
    BEFORE: /// What was the output of `repaint_delay` on the previous frame?
    BEFORE: ///
    BEFORE: /// If this was zero, we are repainting as quickly as possible
    BEFORE: /// (as far as we know).
Token main.Token.d_ident: prev_frame_paint_delay
Token main.Token.:
Token main.Token.d_ident: Duration
Token main.Token.,
Token main.Token.}
Token main.Token.kw_impl
Token main.Token.d_ident: Default
Token main.Token.kw_for
Token main.Token.d_ident: ViewportRepaintInfo
Token main.Token.{
Token main.Token.kw_fn
Token main.Token.d_ident: default
Token main.Token.(
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: Self
Token main.Token.{
Token main.Token.d_ident: Self
Token main.Token.{
Token main.Token.d_ident: frame_nr
Token main.Token.:
Token main.Token.d_number: 0
Token main.Token.,
    BEFORE: // We haven't scheduled a repaint yet.
Token main.Token.d_ident: repaint_delay
Token main.Token.:
Token main.Token.d_ident: Duration
Token main.Token.::
Token main.Token.d_ident: MAX
Token main.Token.,
    BEFORE: // Let's run a couple of frames at the start, because why not.
Token main.Token.d_ident: outstanding
Token main.Token.:
Token main.Token.d_number: 1
Token main.Token.,
Token main.Token.d_ident: causes
Token main.Token.:
Token main.Token.d_ident: Default
Token main.Token.::
Token main.Token.d_ident: default
Token main.Token.(
Token main.Token.)
Token main.Token.,
Token main.Token.d_ident: prev_causes
Token main.Token.:
Token main.Token.d_ident: Default
Token main.Token.::
Token main.Token.d_ident: default
Token main.Token.(
Token main.Token.)
Token main.Token.,
Token main.Token.d_ident: prev_frame_paint_delay
Token main.Token.:
Token main.Token.d_ident: Duration
Token main.Token.::
Token main.Token.d_ident: MAX
Token main.Token.,
Token main.Token.}
Token main.Token.}
Token main.Token.}
Token main.Token.kw_impl
Token main.Token.d_ident: ViewportRepaintInfo
Token main.Token.{
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: requested_immediate_repaint_prev_frame
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: bool
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: prev_frame_paint_delay
Token main.Token.==
Token main.Token.d_ident: Duration
Token main.Token.::
Token main.Token.d_ident: ZERO
Token main.Token.}
Token main.Token.}
    BEFORE: // ----------------------------------------------------------------------------
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: derive
Token main.Token.(
Token main.Token.d_ident: Default
Token main.Token.)
Token main.Token.]
Token main.Token.kw_struct
Token main.Token.d_ident: ContextImpl
Token main.Token.{
    BEFORE: /// Since we could have multiple viewports across multiple monitors with
    BEFORE: /// different `pixels_per_point`, we need a `Fonts` instance for each unique
    BEFORE: /// `pixels_per_point`.
    BEFORE: /// This is because the `Fonts` depend on `pixels_per_point` for the font atlas
    BEFORE: /// as well as kerning, font sizes, etc.
Token main.Token.d_ident: fonts
Token main.Token.:
Token main.Token.d_ident: std
Token main.Token.::
Token main.Token.d_ident: collections
Token main.Token.::
Token main.Token.d_ident: BTreeMap
Token main.Token.<
Token main.Token.d_ident: OrderedFloat
Token main.Token.<
Token main.Token.d_ident: f32
Token main.Token.>
Token main.Token.,
Token main.Token.d_ident: Fonts
Token main.Token.>
Token main.Token.,
Token main.Token.d_ident: font_definitions
Token main.Token.:
Token main.Token.d_ident: FontDefinitions
Token main.Token.,
Token main.Token.d_ident: memory
Token main.Token.:
Token main.Token.d_ident: Memory
Token main.Token.,
Token main.Token.d_ident: animation_manager
Token main.Token.:
Token main.Token.d_ident: AnimationManager
Token main.Token.,
Token main.Token.d_ident: plugins
Token main.Token.:
Token main.Token.d_ident: Plugins
Token main.Token.,
    BEFORE: /// All viewports share the same texture manager and texture namespace.
    BEFORE: ///
    BEFORE: /// In all viewports, [`TextureId::default`] is special, and points to the font atlas.
    BEFORE: /// The font-atlas texture _may_ be different across viewports, as they may have different
    BEFORE: /// `pixels_per_point`, so we do special book-keeping for that.
    BEFORE: /// See <https://github.com/emilk/egui/issues/3664>.
Token main.Token.d_ident: tex_manager
Token main.Token.:
Token main.Token.d_ident: WrappedTextureManager
Token main.Token.,
    BEFORE: /// Set during the frame, becomes active at the start of the next frame.
Token main.Token.d_ident: new_zoom_factor
Token main.Token.:
Token main.Token.d_ident: Option
Token main.Token.<
Token main.Token.d_ident: f32
Token main.Token.>
Token main.Token.,
Token main.Token.d_ident: os
Token main.Token.:
Token main.Token.d_ident: OperatingSystem
Token main.Token.,
    BEFORE: /// How deeply nested are we?
Token main.Token.d_ident: viewport_stack
Token main.Token.:
Token main.Token.d_ident: Vec
Token main.Token.<
Token main.Token.d_ident: ViewportIdPair
Token main.Token.>
Token main.Token.,
    BEFORE: /// What is the last viewport rendered?
Token main.Token.d_ident: last_viewport
Token main.Token.:
Token main.Token.d_ident: ViewportId
Token main.Token.,
Token main.Token.d_ident: paint_stats
Token main.Token.:
Token main.Token.d_ident: PaintStats
Token main.Token.,
Token main.Token.d_ident: request_repaint_callback
Token main.Token.:
Token main.Token.d_ident: Option
Token main.Token.<
Token main.Token.d_ident: Box
Token main.Token.<
Token main.Token.kw_dyn
Token main.Token.d_ident: Fn
Token main.Token.(
Token main.Token.d_ident: RequestRepaintInfo
Token main.Token.)
Token main.Token.+
Token main.Token.d_ident: Send
Token main.Token.+
Token main.Token.d_ident: Sync
Token main.Token.>
Token main.Token.>
Token main.Token.,
Token main.Token.d_ident: viewport_parents
Token main.Token.:
Token main.Token.d_ident: ViewportIdMap
Token main.Token.<
Token main.Token.d_ident: ViewportId
Token main.Token.>
Token main.Token.,
Token main.Token.d_ident: viewports
Token main.Token.:
Token main.Token.d_ident: ViewportIdMap
Token main.Token.<
Token main.Token.d_ident: ViewportState
Token main.Token.>
Token main.Token.,
Token main.Token.d_ident: embed_viewports
Token main.Token.:
Token main.Token.d_ident: bool
Token main.Token.,
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: cfg
Token main.Token.(
Token main.Token.d_ident: feature
Token main.Token.=
Token main.Token.d_string: "accesskit"
Token main.Token.)
Token main.Token.]
Token main.Token.d_ident: is_accesskit_enabled
Token main.Token.:
Token main.Token.d_ident: bool
Token main.Token.,
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: cfg
Token main.Token.(
Token main.Token.d_ident: feature
Token main.Token.=
Token main.Token.d_string: "accesskit"
Token main.Token.)
Token main.Token.]
Token main.Token.d_ident: accesskit_node_classes
Token main.Token.:
Token main.Token.d_ident: accesskit
Token main.Token.::
Token main.Token.d_ident: NodeClassSet
Token main.Token.,
Token main.Token.d_ident: loaders
Token main.Token.:
Token main.Token.d_ident: Arc
Token main.Token.<
Token main.Token.d_ident: Loaders
Token main.Token.>
Token main.Token.,
Token main.Token.}
Token main.Token.kw_impl
Token main.Token.d_ident: ContextImpl
Token main.Token.{
Token main.Token.kw_fn
Token main.Token.d_ident: begin_frame_mut
Token main.Token.(
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.kw_mut
Token main.Token.d_ident: new_raw_input
Token main.Token.:
Token main.Token.d_ident: RawInput
Token main.Token.)
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: viewport_id
Token main.Token.=
Token main.Token.d_ident: new_raw_input
Token main.Token..
Token main.Token.d_ident: viewport_id
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: parent_id
Token main.Token.=
Token main.Token.d_ident: new_raw_input
Token main.Token..
Token main.Token.d_ident: viewports
Token main.Token..
Token main.Token.d_ident: get
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: viewport_id
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: and_then
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: v
Token main.Token.|
Token main.Token.d_ident: v
Token main.Token..
Token main.Token.d_ident: parent
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: unwrap_or_default
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: ids
Token main.Token.=
Token main.Token.d_ident: ViewportIdPair
Token main.Token.::
Token main.Token.d_ident: from_self_and_parent
Token main.Token.(
Token main.Token.d_ident: viewport_id
Token main.Token.,
Token main.Token.d_ident: parent_id
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: is_outermost_viewport
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: viewport_stack
Token main.Token..
Token main.Token.d_ident: is_empty
Token main.Token.(
Token main.Token.)
Token main.Token.;
    AFTER: // not necessarily root, just outermost immediate viewport
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: viewport_stack
Token main.Token..
Token main.Token.d_ident: push
Token main.Token.(
Token main.Token.d_ident: ids
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: begin_frame_repaint_logic
Token main.Token.(
Token main.Token.d_ident: viewport_id
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: viewport
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: viewports
Token main.Token..
Token main.Token.d_ident: entry
Token main.Token.(
Token main.Token.d_ident: viewport_id
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: or_default
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_if
Token main.Token.d_ident: is_outermost_viewport
Token main.Token.{
Token main.Token.kw_if
Token main.Token.kw_let
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: new_zoom_factor
Token main.Token.)
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: new_zoom_factor
Token main.Token..
Token main.Token.d_ident: take
Token main.Token.(
Token main.Token.)
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: ratio
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: memory
Token main.Token..
Token main.Token.d_ident: options
Token main.Token..
Token main.Token.d_ident: zoom_factor
Token main.Token./
Token main.Token.d_ident: new_zoom_factor
Token main.Token.;
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: memory
Token main.Token..
Token main.Token.d_ident: options
Token main.Token..
Token main.Token.d_ident: zoom_factor
Token main.Token.=
Token main.Token.d_ident: new_zoom_factor
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: input
Token main.Token.=
Token main.Token.&
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: input
Token main.Token.;
    BEFORE: // This is a bit hacky, but is required to avoid jitter:
Token main.Token.kw_let
Token main.Token.kw_mut
Token main.Token.d_ident: rect
Token main.Token.=
Token main.Token.d_ident: input
Token main.Token..
Token main.Token.d_ident: screen_rect
Token main.Token.;
Token main.Token.d_ident: rect
Token main.Token..
Token main.Token.d_ident: min
Token main.Token.=
Token main.Token.(
Token main.Token.d_ident: ratio
Token main.Token.*
Token main.Token.d_ident: rect
Token main.Token..
Token main.Token.d_ident: min
Token main.Token..
Token main.Token.d_ident: to_vec2
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: to_pos2
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: rect
Token main.Token..
Token main.Token.d_ident: max
Token main.Token.=
Token main.Token.(
Token main.Token.d_ident: ratio
Token main.Token.*
Token main.Token.d_ident: rect
Token main.Token..
Token main.Token.d_ident: max
Token main.Token..
Token main.Token.d_ident: to_vec2
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: to_pos2
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: new_raw_input
Token main.Token..
Token main.Token.d_ident: screen_rect
Token main.Token.=
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: rect
Token main.Token.)
Token main.Token.;
    BEFORE: // We should really scale everything else in the input too,
    BEFORE: // but the `screen_rect` is the most important part.
Token main.Token.}
Token main.Token.}
Token main.Token.kw_let
Token main.Token.d_ident: pixels_per_point
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: memory
Token main.Token..
Token main.Token.d_ident: options
Token main.Token..
Token main.Token.d_ident: zoom_factor
Token main.Token.*
Token main.Token.d_ident: new_raw_input
Token main.Token..
Token main.Token.d_ident: viewport
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: native_pixels_per_point
Token main.Token..
Token main.Token.d_ident: unwrap_or
Token main.Token.(
Token main.Token.d_number: 1.0
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: all_viewport_ids
Token main.Token.:
Token main.Token.d_ident: ViewportIdSet
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: all_viewport_ids
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: viewport
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: viewports
Token main.Token..
Token main.Token.d_ident: entry
Token main.Token.(
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: viewport_id
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: or_default
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: memory
Token main.Token..
Token main.Token.d_ident: begin_frame
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: input
Token main.Token.,
Token main.Token.&
Token main.Token.d_ident: new_raw_input
Token main.Token.,
Token main.Token.&
Token main.Token.d_ident: all_viewport_ids
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: input
Token main.Token.=
Token main.Token.d_ident: std
Token main.Token.::
Token main.Token.d_ident: mem
Token main.Token.::
Token main.Token.d_ident: take
Token main.Token.(
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: input
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: begin_frame
Token main.Token.(
Token main.Token.d_ident: new_raw_input
Token main.Token.,
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: repaint
Token main.Token..
Token main.Token.d_ident: requested_immediate_repaint_prev_frame
Token main.Token.(
Token main.Token.)
Token main.Token.,
Token main.Token.d_ident: pixels_per_point
Token main.Token.,
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: frame_state
Token main.Token..
Token main.Token.d_ident: begin_frame
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: input
Token main.Token.)
Token main.Token.;
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: area_order
Token main.Token.:
Token main.Token.d_ident: HashMap
Token main.Token.<
Token main.Token.d_ident: LayerId
Token main.Token.,
Token main.Token.d_ident: usize
Token main.Token.>
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: memory
Token main.Token..
Token main.Token.d_ident: areas
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: order
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: iter
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: enumerate
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: map
Token main.Token.(
Token main.Token.|
Token main.Token.(
Token main.Token.d_ident: i
Token main.Token.,
Token main.Token.d_ident: id
Token main.Token.)
Token main.Token.|
Token main.Token.(
Token main.Token.*
Token main.Token.d_ident: id
Token main.Token.,
Token main.Token.d_ident: i
Token main.Token.)
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: collect
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.kw_mut
Token main.Token.d_ident: layers
Token main.Token.:
Token main.Token.d_ident: Vec
Token main.Token.<
Token main.Token.d_ident: LayerId
Token main.Token.>
Token main.Token.=
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: widgets_prev_frame
Token main.Token..
Token main.Token.d_ident: layer_ids
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: collect
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: layers
Token main.Token..
Token main.Token.d_ident: sort_by
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: a
Token main.Token.,
Token main.Token.d_ident: b
Token main.Token.|
Token main.Token.{
Token main.Token.kw_if
Token main.Token.d_ident: a
Token main.Token..
Token main.Token.d_ident: order
Token main.Token.==
Token main.Token.d_ident: b
Token main.Token..
Token main.Token.d_ident: order
Token main.Token.{
    BEFORE: // Maybe both are windows, so respect area order:
Token main.Token.d_ident: area_order
Token main.Token..
Token main.Token.d_ident: get
Token main.Token.(
Token main.Token.d_ident: a
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: cmp
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: area_order
Token main.Token..
Token main.Token.d_ident: get
Token main.Token.(
Token main.Token.d_ident: b
Token main.Token.)
Token main.Token.)
Token main.Token.}
Token main.Token.kw_else
Token main.Token.{
    BEFORE: // comparing e.g. background to tooltips
Token main.Token.d_ident: a
Token main.Token..
Token main.Token.d_ident: order
Token main.Token..
Token main.Token.d_ident: cmp
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: b
Token main.Token..
Token main.Token.d_ident: order
Token main.Token.)
Token main.Token.}
Token main.Token.}
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: hits
Token main.Token.=
Token main.Token.kw_if
Token main.Token.kw_let
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: pos
Token main.Token.)
Token main.Token.=
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: input
Token main.Token..
Token main.Token.d_ident: pointer
Token main.Token..
Token main.Token.d_ident: interact_pos
Token main.Token.(
Token main.Token.)
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: interact_radius
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: memory
Token main.Token..
Token main.Token.d_ident: options
Token main.Token..
Token main.Token.d_ident: style
Token main.Token..
Token main.Token.d_ident: interaction
Token main.Token..
Token main.Token.d_ident: interact_radius
Token main.Token.;
Token main.Token.d_ident: crate
Token main.Token.::
Token main.Token.d_ident: hit_test
Token main.Token.::
Token main.Token.d_ident: hit_test
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: widgets_prev_frame
Token main.Token.,
Token main.Token.&
Token main.Token.d_ident: layers
Token main.Token.,
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: memory
Token main.Token..
Token main.Token.d_ident: layer_transforms
Token main.Token.,
Token main.Token.d_ident: pos
Token main.Token.,
Token main.Token.d_ident: interact_radius
Token main.Token.,
Token main.Token.)
Token main.Token.}
Token main.Token.kw_else
Token main.Token.{
Token main.Token.d_ident: WidgetHits
Token main.Token.::
Token main.Token.d_ident: default
Token main.Token.(
Token main.Token.)
Token main.Token.}
Token main.Token.;
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: interact_widgets
Token main.Token.=
Token main.Token.d_ident: crate
Token main.Token.::
Token main.Token.d_ident: interaction
Token main.Token.::
Token main.Token.d_ident: interact
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: interact_widgets
Token main.Token.,
Token main.Token.&
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: widgets_prev_frame
Token main.Token.,
Token main.Token.&
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: hits
Token main.Token.,
Token main.Token.&
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: input
Token main.Token.,
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: memory
Token main.Token..
Token main.Token.d_ident: interaction_mut
Token main.Token.(
Token main.Token.)
Token main.Token.,
Token main.Token.)
Token main.Token.;
Token main.Token.}
    BEFORE: // Ensure we register the background area so panels and background ui can catch clicks:
Token main.Token.kw_let
Token main.Token.d_ident: screen_rect
Token main.Token.=
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: input
Token main.Token..
Token main.Token.d_ident: screen_rect
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: memory
Token main.Token..
Token main.Token.d_ident: areas_mut
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: set_state
Token main.Token.(
Token main.Token.d_ident: LayerId
Token main.Token.::
Token main.Token.d_ident: background
Token main.Token.(
Token main.Token.)
Token main.Token.,
Token main.Token.d_ident: containers
Token main.Token.::
Token main.Token.d_ident: area
Token main.Token.::
Token main.Token.d_ident: State
Token main.Token.{
Token main.Token.d_ident: pivot_pos
Token main.Token.:
Token main.Token.d_ident: screen_rect
Token main.Token..
Token main.Token.d_ident: left_top
Token main.Token.(
Token main.Token.)
Token main.Token.,
Token main.Token.d_ident: pivot
Token main.Token.:
Token main.Token.d_ident: Align2
Token main.Token.::
Token main.Token.d_ident: LEFT_TOP
Token main.Token.,
Token main.Token.d_ident: size
Token main.Token.:
Token main.Token.d_ident: screen_rect
Token main.Token..
Token main.Token.d_ident: size
Token main.Token.(
Token main.Token.)
Token main.Token.,
Token main.Token.d_ident: interactable
Token main.Token.:
Token main.Token.d_ident: true
Token main.Token.,
Token main.Token.d_ident: edges_padded_for_resize
Token main.Token.:
Token main.Token.d_ident: false
Token main.Token.,
Token main.Token.}
Token main.Token.,
Token main.Token.)
Token main.Token.;
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: cfg
Token main.Token.(
Token main.Token.d_ident: feature
Token main.Token.=
Token main.Token.d_string: "accesskit"
Token main.Token.)
Token main.Token.]
Token main.Token.kw_if
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: is_accesskit_enabled
Token main.Token.{
Token main.Token.d_ident: crate
Token main.Token.::
Token main.Token.d_ident: profile_scope
Token main.Token.!
Token main.Token.(
Token main.Token.d_string: "accesskit"
Token main.Token.)
Token main.Token.;
Token main.Token.kw_use
Token main.Token.d_ident: crate
Token main.Token.::
Token main.Token.d_ident: frame_state
Token main.Token.::
Token main.Token.d_ident: AccessKitFrameState
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: id
Token main.Token.=
Token main.Token.d_ident: crate
Token main.Token.::
Token main.Token.d_ident: accesskit_root_id
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.kw_mut
Token main.Token.d_ident: builder
Token main.Token.=
Token main.Token.d_ident: accesskit
Token main.Token.::
Token main.Token.d_ident: NodeBuilder
Token main.Token.::
Token main.Token.d_ident: new
Token main.Token.(
Token main.Token.d_ident: accesskit
Token main.Token.::
Token main.Token.d_ident: Role
Token main.Token.::
Token main.Token.d_ident: Window
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: pixels_per_point
Token main.Token.=
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: input
Token main.Token..
Token main.Token.d_ident: pixels_per_point
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: builder
Token main.Token..
Token main.Token.d_ident: set_transform
Token main.Token.(
Token main.Token.d_ident: accesskit
Token main.Token.::
Token main.Token.d_ident: Affine
Token main.Token.::
Token main.Token.d_ident: scale
Token main.Token.(
Token main.Token.d_ident: pixels_per_point
Token main.Token..
Token main.Token.d_ident: into
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.kw_mut
Token main.Token.d_ident: node_builders
Token main.Token.=
Token main.Token.d_ident: IdMap
Token main.Token.::
Token main.Token.d_ident: default
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: node_builders
Token main.Token..
Token main.Token.d_ident: insert
Token main.Token.(
Token main.Token.d_ident: id
Token main.Token.,
Token main.Token.d_ident: builder
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: frame_state
Token main.Token..
Token main.Token.d_ident: accesskit_state
Token main.Token.=
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: AccessKitFrameState
Token main.Token.{
Token main.Token.d_ident: node_builders
Token main.Token.,
Token main.Token.d_ident: parent_stack
Token main.Token.:
Token main.Token.d_ident: vec
Token main.Token.!
Token main.Token.[
Token main.Token.d_ident: id
Token main.Token.]
Token main.Token.,
Token main.Token.}
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: update_fonts_mut
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.}
    BEFORE: /// Load fonts unless already loaded.
Token main.Token.kw_fn
Token main.Token.d_ident: update_fonts_mut
Token main.Token.(
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: crate
Token main.Token.::
Token main.Token.d_ident: profile_function
Token main.Token.!
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: input
Token main.Token.=
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: viewport
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: input
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: pixels_per_point
Token main.Token.=
Token main.Token.d_ident: input
Token main.Token..
Token main.Token.d_ident: pixels_per_point
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: max_texture_side
Token main.Token.=
Token main.Token.d_ident: input
Token main.Token..
Token main.Token.d_ident: max_texture_side
Token main.Token.;
Token main.Token.kw_if
Token main.Token.kw_let
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: font_definitions
Token main.Token.)
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: memory
Token main.Token..
Token main.Token.d_ident: new_font_definitions
Token main.Token..
Token main.Token.d_ident: take
Token main.Token.(
Token main.Token.)
Token main.Token.{
    BEFORE: // New font definition loaded, so we need to reload all fonts.
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: fonts
Token main.Token..
Token main.Token.d_ident: clear
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: font_definitions
Token main.Token.=
Token main.Token.d_ident: font_definitions
Token main.Token.;
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: cfg
Token main.Token.(
Token main.Token.d_ident: feature
Token main.Token.=
Token main.Token.d_string: "log"
Token main.Token.)
Token main.Token.]
Token main.Token.d_ident: log
Token main.Token.::
Token main.Token.d_ident: debug
Token main.Token.!
Token main.Token.(
Token main.Token.d_string: "Loading new font definitions"
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.kw_let
Token main.Token.kw_mut
Token main.Token.d_ident: is_new
Token main.Token.=
Token main.Token.d_ident: false
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: fonts
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: fonts
Token main.Token..
Token main.Token.d_ident: entry
Token main.Token.(
Token main.Token.d_ident: pixels_per_point
Token main.Token..
Token main.Token.d_ident: into
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: or_insert_with
Token main.Token.(
Token main.Token.|
Token main.Token.|
Token main.Token.{
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: cfg
Token main.Token.(
Token main.Token.d_ident: feature
Token main.Token.=
Token main.Token.d_string: "log"
Token main.Token.)
Token main.Token.]
Token main.Token.d_ident: log
Token main.Token.::
Token main.Token.d_ident: trace
Token main.Token.!
Token main.Token.(
Token main.Token.d_string: "Creating new Fonts for pixels_per_point={pixels_per_point}"
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: is_new
Token main.Token.=
Token main.Token.d_ident: true
Token main.Token.;
Token main.Token.d_ident: crate
Token main.Token.::
Token main.Token.d_ident: profile_scope
Token main.Token.!
Token main.Token.(
Token main.Token.d_string: "Fonts::new"
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: Fonts
Token main.Token.::
Token main.Token.d_ident: new
Token main.Token.(
Token main.Token.d_ident: pixels_per_point
Token main.Token.,
Token main.Token.d_ident: max_texture_side
Token main.Token.,
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: font_definitions
Token main.Token..
Token main.Token.d_ident: clone
Token main.Token.(
Token main.Token.)
Token main.Token.,
Token main.Token.)
Token main.Token.}
Token main.Token.)
Token main.Token.;
Token main.Token.{
Token main.Token.d_ident: crate
Token main.Token.::
Token main.Token.d_ident: profile_scope
Token main.Token.!
Token main.Token.(
Token main.Token.d_string: "Fonts::begin_frame"
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: fonts
Token main.Token..
Token main.Token.d_ident: begin_frame
Token main.Token.(
Token main.Token.d_ident: pixels_per_point
Token main.Token.,
Token main.Token.d_ident: max_texture_side
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.kw_if
Token main.Token.d_ident: is_new
Token main.Token.&
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: memory
Token main.Token..
Token main.Token.d_ident: options
Token main.Token..
Token main.Token.d_ident: preload_font_glyphs
Token main.Token.{
Token main.Token.d_ident: crate
Token main.Token.::
Token main.Token.d_ident: profile_scope
Token main.Token.!
Token main.Token.(
Token main.Token.d_string: "preload_font_glyphs"
Token main.Token.)
Token main.Token.;
    BEFORE: // Preload the most common characters for the most common fonts.
    BEFORE: // This is not very important to do, but may save a few GPU operations.
Token main.Token.kw_for
Token main.Token.d_ident: font_id
Token main.Token.kw_in
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: memory
Token main.Token..
Token main.Token.d_ident: options
Token main.Token..
Token main.Token.d_ident: style
Token main.Token..
Token main.Token.d_ident: text_styles
Token main.Token..
Token main.Token.d_ident: values
Token main.Token.(
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: fonts
Token main.Token..
Token main.Token.d_ident: lock
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: fonts
Token main.Token..
Token main.Token.d_ident: font
Token main.Token.(
Token main.Token.d_ident: font_id
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: preload_common_characters
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.}
Token main.Token.}
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: cfg
Token main.Token.(
Token main.Token.d_ident: feature
Token main.Token.=
Token main.Token.d_string: "accesskit"
Token main.Token.)
Token main.Token.]
Token main.Token.kw_fn
Token main.Token.d_ident: accesskit_node_builder
Token main.Token.(
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: id
Token main.Token.:
Token main.Token.d_ident: Id
Token main.Token.)
Token main.Token.->
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: accesskit
Token main.Token.::
Token main.Token.d_ident: NodeBuilder
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: state
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: viewport
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: frame_state
Token main.Token..
Token main.Token.d_ident: accesskit_state
Token main.Token..
Token main.Token.d_ident: as_mut
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: unwrap
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: builders
Token main.Token.=
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: state
Token main.Token..
Token main.Token.d_ident: node_builders
Token main.Token.;
Token main.Token.kw_if
Token main.Token.kw_let
Token main.Token.d_ident: std
Token main.Token.::
Token main.Token.d_ident: collections
Token main.Token.::
Token main.Token.d_ident: hash_map
Token main.Token.::
Token main.Token.d_ident: Entry
Token main.Token.::
Token main.Token.d_ident: Vacant
Token main.Token.(
Token main.Token.d_ident: entry
Token main.Token.)
Token main.Token.=
Token main.Token.d_ident: builders
Token main.Token..
Token main.Token.d_ident: entry
Token main.Token.(
Token main.Token.d_ident: id
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: entry
Token main.Token..
Token main.Token.d_ident: insert
Token main.Token.(
Token main.Token.d_ident: Default
Token main.Token.::
Token main.Token.d_ident: default
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: parent_id
Token main.Token.=
Token main.Token.d_ident: state
Token main.Token..
Token main.Token.d_ident: parent_stack
Token main.Token..
Token main.Token.d_ident: last
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: unwrap
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: parent_builder
Token main.Token.=
Token main.Token.d_ident: builders
Token main.Token..
Token main.Token.d_ident: get_mut
Token main.Token.(
Token main.Token.d_ident: parent_id
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: unwrap
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: parent_builder
Token main.Token..
Token main.Token.d_ident: push_child
Token main.Token.(
Token main.Token.d_ident: id
Token main.Token..
Token main.Token.d_ident: accesskit_id
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.d_ident: builders
Token main.Token..
Token main.Token.d_ident: get_mut
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: id
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: unwrap
Token main.Token.(
Token main.Token.)
Token main.Token.}
Token main.Token.kw_fn
Token main.Token.d_ident: pixels_per_point
Token main.Token.(
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: f32
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: viewport
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: input
Token main.Token..
Token main.Token.d_ident: pixels_per_point
Token main.Token.}
    BEFORE: /// Return the `ViewportId` of the current viewport.
    BEFORE: ///
    BEFORE: /// For the root viewport this will return [`ViewportId::ROOT`].
Token main.Token.kw_pub
Token main.Token.(
Token main.Token.d_ident: crate
Token main.Token.)
Token main.Token.kw_fn
Token main.Token.d_ident: viewport_id
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: ViewportId
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: viewport_stack
Token main.Token..
Token main.Token.d_ident: last
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: copied
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: unwrap_or_default
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: this
Token main.Token.}
    BEFORE: /// Return the `ViewportId` of his parent.
    BEFORE: ///
    BEFORE: /// For the root viewport this will return [`ViewportId::ROOT`].
Token main.Token.kw_pub
Token main.Token.(
Token main.Token.d_ident: crate
Token main.Token.)
Token main.Token.kw_fn
Token main.Token.d_ident: parent_viewport_id
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: ViewportId
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: viewport_stack
Token main.Token..
Token main.Token.d_ident: last
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: copied
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: unwrap_or_default
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: parent
Token main.Token.}
Token main.Token.kw_fn
Token main.Token.d_ident: all_viewport_ids
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: ViewportIdSet
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: viewports
Token main.Token..
Token main.Token.d_ident: keys
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: copied
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: chain
Token main.Token.(
Token main.Token.[
Token main.Token.d_ident: ViewportId
Token main.Token.::
Token main.Token.d_ident: ROOT
Token main.Token.]
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: collect
Token main.Token.(
Token main.Token.)
Token main.Token.}
    BEFORE: /// The current active viewport
Token main.Token.kw_pub
Token main.Token.(
Token main.Token.d_ident: crate
Token main.Token.)
Token main.Token.kw_fn
Token main.Token.d_ident: viewport
Token main.Token.(
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.->
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: ViewportState
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: viewports
Token main.Token..
Token main.Token.d_ident: entry
Token main.Token.(
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: viewport_id
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: or_default
Token main.Token.(
Token main.Token.)
Token main.Token.}
Token main.Token.kw_fn
Token main.Token.d_ident: viewport_for
Token main.Token.(
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: viewport_id
Token main.Token.:
Token main.Token.d_ident: ViewportId
Token main.Token.)
Token main.Token.->
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: ViewportState
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: viewports
Token main.Token..
Token main.Token.d_ident: entry
Token main.Token.(
Token main.Token.d_ident: viewport_id
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: or_default
Token main.Token.(
Token main.Token.)
Token main.Token.}
Token main.Token.}
    BEFORE: // ----------------------------------------------------------------------------
    BEFORE: /// Your handle to egui.
    BEFORE: ///
    BEFORE: /// This is the first thing you need when working with egui.
    BEFORE: /// Contains the [`InputState`], [`Memory`], [`PlatformOutput`], and more.
    BEFORE: ///
    BEFORE: /// [`Context`] is cheap to clone, and any clones refers to the same mutable data
    BEFORE: /// ([`Context`] uses refcounting internally).
    BEFORE: ///
    BEFORE: /// ## Locking
    BEFORE: /// All methods are marked `&self`; [`Context`] has interior mutability protected by an [`RwLock`].
    BEFORE: ///
    BEFORE: /// To access parts of a `Context` you need to use some of the helper functions that take closures:
    BEFORE: ///
    BEFORE: /// ```
    BEFORE: /// # let ctx = egui::Context::default();
    BEFORE: /// if ctx.input(|i| i.key_pressed(egui::Key::A)) {
    BEFORE: ///     ctx.output_mut(|o| o.copied_text = "Hello!".to_string());
    BEFORE: /// }
    BEFORE: /// ```
    BEFORE: ///
    BEFORE: /// Within such a closure you may NOT recursively lock the same [`Context`], as that can lead to a deadlock.
    BEFORE: /// Therefore it is important that any lock of [`Context`] is short-lived.
    BEFORE: ///
    BEFORE: /// These are effectively transactional accesses.
    BEFORE: ///
    BEFORE: /// [`Ui`] has many of the same accessor functions, and the same applies there.
    BEFORE: ///
    BEFORE: /// ## Example:
    BEFORE: ///
    BEFORE: /// ``` no_run
    BEFORE: /// # fn handle_platform_output(_: egui::PlatformOutput) {}
    BEFORE: /// # fn paint(textures_delta: egui::TexturesDelta, _: Vec<egui::ClippedPrimitive>) {}
    BEFORE: /// let mut ctx = egui::Context::default();
    BEFORE: ///
    BEFORE: /// // Game loop:
    BEFORE: /// loop {
    BEFORE: ///     let raw_input = egui::RawInput::default();
    BEFORE: ///     let full_output = ctx.run(raw_input, |ctx| {
    BEFORE: ///         egui::CentralPanel::default().show(&ctx, |ui| {
    BEFORE: ///             ui.label("Hello world!");
    BEFORE: ///             if ui.button("Click me").clicked() {
    BEFORE: ///                 // take some action here
    BEFORE: ///             }
    BEFORE: ///         });
    BEFORE: ///     });
    BEFORE: ///     handle_platform_output(full_output.platform_output);
    BEFORE: ///     let clipped_primitives = ctx.tessellate(full_output.shapes, full_output.pixels_per_point);
    BEFORE: ///     paint(full_output.textures_delta, clipped_primitives);
    BEFORE: /// }
    BEFORE: /// ```
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: derive
Token main.Token.(
Token main.Token.d_ident: Clone
Token main.Token.)
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_struct
Token main.Token.d_ident: Context
Token main.Token.(
Token main.Token.d_ident: Arc
Token main.Token.<
Token main.Token.d_ident: RwLock
Token main.Token.<
Token main.Token.d_ident: ContextImpl
Token main.Token.>
Token main.Token.>
Token main.Token.)
Token main.Token.;
Token main.Token.kw_impl
Token main.Token.d_ident: std
Token main.Token.::
Token main.Token.d_ident: fmt
Token main.Token.::
Token main.Token.d_ident: Debug
Token main.Token.kw_for
Token main.Token.d_ident: Context
Token main.Token.{
Token main.Token.kw_fn
Token main.Token.d_ident: fmt
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: f
Token main.Token.:
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: std
Token main.Token.::
Token main.Token.d_ident: fmt
Token main.Token.::
Token main.Token.d_ident: Formatter
Token main.Token.<
Token main.Token.'
Token main.Token.d_ident: _
Token main.Token.>
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: std
Token main.Token.::
Token main.Token.d_ident: fmt
Token main.Token.::
Token main.Token.d_ident: Result
Token main.Token.{
Token main.Token.d_ident: f
Token main.Token..
Token main.Token.d_ident: debug_struct
Token main.Token.(
Token main.Token.d_string: "Context"
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: finish_non_exhaustive
Token main.Token.(
Token main.Token.)
Token main.Token.}
Token main.Token.}
Token main.Token.kw_impl
Token main.Token.d_ident: std
Token main.Token.::
Token main.Token.d_ident: cmp
Token main.Token.::
Token main.Token.d_ident: PartialEq
Token main.Token.kw_for
Token main.Token.d_ident: Context
Token main.Token.{
Token main.Token.kw_fn
Token main.Token.d_ident: eq
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: other
Token main.Token.:
Token main.Token.&
Token main.Token.d_ident: Self
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: bool
Token main.Token.{
Token main.Token.d_ident: Arc
Token main.Token.::
Token main.Token.d_ident: ptr_eq
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_number: 0
Token main.Token.,
Token main.Token.&
Token main.Token.d_ident: other
Token main.Token..
Token main.Token.d_number: 0
Token main.Token.)
Token main.Token.}
Token main.Token.}
Token main.Token.kw_impl
Token main.Token.d_ident: Default
Token main.Token.kw_for
Token main.Token.d_ident: Context
Token main.Token.{
Token main.Token.kw_fn
Token main.Token.d_ident: default
Token main.Token.(
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: Self
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: ctx_impl
Token main.Token.=
Token main.Token.d_ident: ContextImpl
Token main.Token.{
Token main.Token.d_ident: embed_viewports
Token main.Token.:
Token main.Token.d_ident: true
Token main.Token.,
Token main.Token...
Token main.Token.d_ident: Default
Token main.Token.::
Token main.Token.d_ident: default
Token main.Token.(
Token main.Token.)
Token main.Token.}
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: ctx
Token main.Token.=
Token main.Token.d_ident: Self
Token main.Token.(
Token main.Token.d_ident: Arc
Token main.Token.::
Token main.Token.d_ident: new
Token main.Token.(
Token main.Token.d_ident: RwLock
Token main.Token.::
Token main.Token.d_ident: new
Token main.Token.(
Token main.Token.d_ident: ctx_impl
Token main.Token.)
Token main.Token.)
Token main.Token.)
Token main.Token.;
    BEFORE: // Register built-in plugins:
Token main.Token.d_ident: crate
Token main.Token.::
Token main.Token.d_ident: debug_text
Token main.Token.::
Token main.Token.d_ident: register
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: ctx
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: crate
Token main.Token.::
Token main.Token.d_ident: text_selection
Token main.Token.::
Token main.Token.d_ident: LabelSelectionState
Token main.Token.::
Token main.Token.d_ident: register
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: ctx
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: crate
Token main.Token.::
Token main.Token.d_ident: DragAndDrop
Token main.Token.::
Token main.Token.d_ident: register
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: ctx
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: ctx
Token main.Token.}
Token main.Token.}
Token main.Token.kw_impl
Token main.Token.d_ident: Context
Token main.Token.{
    BEFORE: /// Do read-only (shared access) transaction on Context
Token main.Token.kw_fn
Token main.Token.d_ident: read
Token main.Token.<
Token main.Token.d_ident: R
Token main.Token.>
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: reader
Token main.Token.:
Token main.Token.kw_impl
Token main.Token.d_ident: FnOnce
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: ContextImpl
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: R
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: R
Token main.Token.{
Token main.Token.d_ident: reader
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_number: 0
Token main.Token..
Token main.Token.d_ident: read
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.}
    BEFORE: /// Do read-write (exclusive access) transaction on Context
Token main.Token.kw_fn
Token main.Token.d_ident: write
Token main.Token.<
Token main.Token.d_ident: R
Token main.Token.>
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: writer
Token main.Token.:
Token main.Token.kw_impl
Token main.Token.d_ident: FnOnce
Token main.Token.(
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: ContextImpl
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: R
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: R
Token main.Token.{
Token main.Token.d_ident: writer
Token main.Token.(
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_number: 0
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.}
    BEFORE: /// Run the ui code for one frame.
    BEFORE: ///
    BEFORE: /// Put your widgets into a [`SidePanel`], [`TopBottomPanel`], [`CentralPanel`], [`Window`] or [`Area`].
    BEFORE: ///
    BEFORE: /// This will modify the internal reference to point to a new generation of [`Context`].
    BEFORE: /// Any old clones of this [`Context`] will refer to the old [`Context`], which will not get new input.
    BEFORE: ///
    BEFORE: /// You can alternatively run [`Self::begin_frame`] and [`Context::end_frame`].
    BEFORE: ///
    BEFORE: /// ```
    BEFORE: /// // One egui context that you keep reusing:
    BEFORE: /// let mut ctx = egui::Context::default();
    BEFORE: ///
    BEFORE: /// // Each frame:
    BEFORE: /// let input = egui::RawInput::default();
    BEFORE: /// let full_output = ctx.run(input, |ctx| {
    BEFORE: ///     egui::CentralPanel::default().show(&ctx, |ui| {
    BEFORE: ///         ui.label("Hello egui!");
    BEFORE: ///     });
    BEFORE: /// });
    BEFORE: /// // handle full_output
    BEFORE: /// ```
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: must_use
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: run
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: new_input
Token main.Token.:
Token main.Token.d_ident: RawInput
Token main.Token.,
Token main.Token.d_ident: run_ui
Token main.Token.:
Token main.Token.kw_impl
Token main.Token.d_ident: FnOnce
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: Self
Token main.Token.)
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: FullOutput
Token main.Token.{
Token main.Token.d_ident: crate
Token main.Token.::
Token main.Token.d_ident: profile_function
Token main.Token.!
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: begin_frame
Token main.Token.(
Token main.Token.d_ident: new_input
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: run_ui
Token main.Token.(
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: end_frame
Token main.Token.(
Token main.Token.)
Token main.Token.}
    BEFORE: /// An alternative to calling [`Self::run`].
    BEFORE: ///
    BEFORE: /// ```
    BEFORE: /// // One egui context that you keep reusing:
    BEFORE: /// let mut ctx = egui::Context::default();
    BEFORE: ///
    BEFORE: /// // Each frame:
    BEFORE: /// let input = egui::RawInput::default();
    BEFORE: /// ctx.begin_frame(input);
    BEFORE: ///
    BEFORE: /// egui::CentralPanel::default().show(&ctx, |ui| {
    BEFORE: ///     ui.label("Hello egui!");
    BEFORE: /// });
    BEFORE: ///
    BEFORE: /// let full_output = ctx.end_frame();
    BEFORE: /// // handle full_output
    BEFORE: /// ```
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: begin_frame
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: new_input
Token main.Token.:
Token main.Token.d_ident: RawInput
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: crate
Token main.Token.::
Token main.Token.d_ident: profile_function
Token main.Token.!
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: read
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: plugins
Token main.Token..
Token main.Token.d_ident: clone
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: on_begin_frame
Token main.Token.(
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: begin_frame_mut
Token main.Token.(
Token main.Token.d_ident: new_input
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.}
    BEFORE: /// ## Borrows parts of [`Context`]
    BEFORE: /// These functions all lock the [`Context`].
    BEFORE: /// Please see the documentation of [`Context`] for how locking works!
Token main.Token.kw_impl
Token main.Token.d_ident: Context
Token main.Token.{
    BEFORE: /// Read-only access to [`InputState`].
    BEFORE: ///
    BEFORE: /// Note that this locks the [`Context`].
    BEFORE: ///
    BEFORE: /// ```
    BEFORE: /// # let mut ctx = egui::Context::default();
    BEFORE: /// ctx.input(|i| {
    BEFORE: ///     // ⚠️ Using `ctx` (even from other `Arc` reference) again here will lead to a deadlock!
    BEFORE: /// });
    BEFORE: ///
    BEFORE: /// if let Some(pos) = ctx.input(|i| i.pointer.hover_pos()) {
    BEFORE: ///     // This is fine!
    BEFORE: /// }
    BEFORE: /// ```
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: inline
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: input
Token main.Token.<
Token main.Token.d_ident: R
Token main.Token.>
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: reader
Token main.Token.:
Token main.Token.kw_impl
Token main.Token.d_ident: FnOnce
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: InputState
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: R
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: R
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.d_ident: move
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.d_ident: reader
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: viewport
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: input
Token main.Token.)
Token main.Token.)
Token main.Token.}
    BEFORE: /// This will create a `InputState::default()` if there is no input state for that viewport
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: inline
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: input_for
Token main.Token.<
Token main.Token.d_ident: R
Token main.Token.>
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: id
Token main.Token.:
Token main.Token.d_ident: ViewportId
Token main.Token.,
Token main.Token.d_ident: reader
Token main.Token.:
Token main.Token.kw_impl
Token main.Token.d_ident: FnOnce
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: InputState
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: R
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: R
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.d_ident: move
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.d_ident: reader
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: viewport_for
Token main.Token.(
Token main.Token.d_ident: id
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: input
Token main.Token.)
Token main.Token.)
Token main.Token.}
    BEFORE: /// Read-write access to [`InputState`].
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: inline
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: input_mut
Token main.Token.<
Token main.Token.d_ident: R
Token main.Token.>
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: writer
Token main.Token.:
Token main.Token.kw_impl
Token main.Token.d_ident: FnOnce
Token main.Token.(
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: InputState
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: R
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: R
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: input_mut_for
Token main.Token.(
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: viewport_id
Token main.Token.(
Token main.Token.)
Token main.Token.,
Token main.Token.d_ident: writer
Token main.Token.)
Token main.Token.}
    BEFORE: /// This will create a `InputState::default()` if there is no input state for that viewport
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: inline
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: input_mut_for
Token main.Token.<
Token main.Token.d_ident: R
Token main.Token.>
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: id
Token main.Token.:
Token main.Token.d_ident: ViewportId
Token main.Token.,
Token main.Token.d_ident: writer
Token main.Token.:
Token main.Token.kw_impl
Token main.Token.d_ident: FnOnce
Token main.Token.(
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: InputState
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: R
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: R
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.d_ident: move
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.d_ident: writer
Token main.Token.(
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: viewport_for
Token main.Token.(
Token main.Token.d_ident: id
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: input
Token main.Token.)
Token main.Token.)
Token main.Token.}
    BEFORE: /// Read-only access to [`Memory`].
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: inline
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: memory
Token main.Token.<
Token main.Token.d_ident: R
Token main.Token.>
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: reader
Token main.Token.:
Token main.Token.kw_impl
Token main.Token.d_ident: FnOnce
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: Memory
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: R
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: R
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: read
Token main.Token.(
Token main.Token.d_ident: move
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.d_ident: reader
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: memory
Token main.Token.)
Token main.Token.)
Token main.Token.}
    BEFORE: /// Read-write access to [`Memory`].
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: inline
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: memory_mut
Token main.Token.<
Token main.Token.d_ident: R
Token main.Token.>
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: writer
Token main.Token.:
Token main.Token.kw_impl
Token main.Token.d_ident: FnOnce
Token main.Token.(
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: Memory
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: R
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: R
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.d_ident: move
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.d_ident: writer
Token main.Token.(
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: memory
Token main.Token.)
Token main.Token.)
Token main.Token.}
    BEFORE: /// Read-only access to [`IdTypeMap`], which stores superficial widget state.
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: inline
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: data
Token main.Token.<
Token main.Token.d_ident: R
Token main.Token.>
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: reader
Token main.Token.:
Token main.Token.kw_impl
Token main.Token.d_ident: FnOnce
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: IdTypeMap
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: R
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: R
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: read
Token main.Token.(
Token main.Token.d_ident: move
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.d_ident: reader
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: memory
Token main.Token..
Token main.Token.d_ident: data
Token main.Token.)
Token main.Token.)
Token main.Token.}
    BEFORE: /// Read-write access to [`IdTypeMap`], which stores superficial widget state.
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: inline
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: data_mut
Token main.Token.<
Token main.Token.d_ident: R
Token main.Token.>
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: writer
Token main.Token.:
Token main.Token.kw_impl
Token main.Token.d_ident: FnOnce
Token main.Token.(
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: IdTypeMap
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: R
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: R
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.d_ident: move
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.d_ident: writer
Token main.Token.(
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: memory
Token main.Token..
Token main.Token.d_ident: data
Token main.Token.)
Token main.Token.)
Token main.Token.}
    BEFORE: /// Read-write access to [`GraphicLayers`], where painted [`crate::Shape`]s are written to.
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: inline
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: graphics_mut
Token main.Token.<
Token main.Token.d_ident: R
Token main.Token.>
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: writer
Token main.Token.:
Token main.Token.kw_impl
Token main.Token.d_ident: FnOnce
Token main.Token.(
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: GraphicLayers
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: R
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: R
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.d_ident: move
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.d_ident: writer
Token main.Token.(
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: viewport
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: graphics
Token main.Token.)
Token main.Token.)
Token main.Token.}
    BEFORE: /// Read-only access to [`GraphicLayers`], where painted [`crate::Shape`]s are written to.
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: inline
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: graphics
Token main.Token.<
Token main.Token.d_ident: R
Token main.Token.>
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: reader
Token main.Token.:
Token main.Token.kw_impl
Token main.Token.d_ident: FnOnce
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: GraphicLayers
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: R
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: R
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.d_ident: move
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.d_ident: reader
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: viewport
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: graphics
Token main.Token.)
Token main.Token.)
Token main.Token.}
    BEFORE: /// Read-only access to [`PlatformOutput`].
    BEFORE: ///
    BEFORE: /// This is what egui outputs each frame.
    BEFORE: ///
    BEFORE: /// ```
    BEFORE: /// # let mut ctx = egui::Context::default();
    BEFORE: /// ctx.output_mut(|o| o.cursor_icon = egui::CursorIcon::Progress);
    BEFORE: /// ```
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: inline
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: output
Token main.Token.<
Token main.Token.d_ident: R
Token main.Token.>
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: reader
Token main.Token.:
Token main.Token.kw_impl
Token main.Token.d_ident: FnOnce
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: PlatformOutput
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: R
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: R
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.d_ident: move
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.d_ident: reader
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: viewport
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: output
Token main.Token.)
Token main.Token.)
Token main.Token.}
    BEFORE: /// Read-write access to [`PlatformOutput`].
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: inline
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: output_mut
Token main.Token.<
Token main.Token.d_ident: R
Token main.Token.>
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: writer
Token main.Token.:
Token main.Token.kw_impl
Token main.Token.d_ident: FnOnce
Token main.Token.(
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: PlatformOutput
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: R
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: R
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.d_ident: move
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.d_ident: writer
Token main.Token.(
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: viewport
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: output
Token main.Token.)
Token main.Token.)
Token main.Token.}
    BEFORE: /// Read-only access to [`FrameState`].
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: inline
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.(
Token main.Token.d_ident: crate
Token main.Token.)
Token main.Token.kw_fn
Token main.Token.d_ident: frame_state
Token main.Token.<
Token main.Token.d_ident: R
Token main.Token.>
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: reader
Token main.Token.:
Token main.Token.kw_impl
Token main.Token.d_ident: FnOnce
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: FrameState
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: R
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: R
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.d_ident: move
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.d_ident: reader
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: viewport
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: frame_state
Token main.Token.)
Token main.Token.)
Token main.Token.}
    BEFORE: /// Read-write access to [`FrameState`].
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: inline
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.(
Token main.Token.d_ident: crate
Token main.Token.)
Token main.Token.kw_fn
Token main.Token.d_ident: frame_state_mut
Token main.Token.<
Token main.Token.d_ident: R
Token main.Token.>
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: writer
Token main.Token.:
Token main.Token.kw_impl
Token main.Token.d_ident: FnOnce
Token main.Token.(
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: FrameState
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: R
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: R
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.d_ident: move
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.d_ident: writer
Token main.Token.(
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: viewport
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: frame_state
Token main.Token.)
Token main.Token.)
Token main.Token.}
    BEFORE: /// Read-only access to [`Fonts`].
    BEFORE: ///
    BEFORE: /// Not valid until first call to [`Context::run()`].
    BEFORE: /// That's because since we don't know the proper `pixels_per_point` until then.
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: inline
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: fonts
Token main.Token.<
Token main.Token.d_ident: R
Token main.Token.>
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: reader
Token main.Token.:
Token main.Token.kw_impl
Token main.Token.d_ident: FnOnce
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: Fonts
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: R
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: R
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.d_ident: move
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: pixels_per_point
Token main.Token.=
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: pixels_per_point
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: reader
Token main.Token.(
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: fonts
Token main.Token..
Token main.Token.d_ident: get
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: pixels_per_point
Token main.Token..
Token main.Token.d_ident: into
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: expect
Token main.Token.(
Token main.Token.d_string: "No fonts available until first call to Context::run()"
Token main.Token.)
Token main.Token.,
Token main.Token.)
Token main.Token.}
Token main.Token.)
Token main.Token.}
    BEFORE: /// Read-only access to [`Options`].
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: inline
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: options
Token main.Token.<
Token main.Token.d_ident: R
Token main.Token.>
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: reader
Token main.Token.:
Token main.Token.kw_impl
Token main.Token.d_ident: FnOnce
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: Options
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: R
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: R
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: read
Token main.Token.(
Token main.Token.d_ident: move
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.d_ident: reader
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: memory
Token main.Token..
Token main.Token.d_ident: options
Token main.Token.)
Token main.Token.)
Token main.Token.}
    BEFORE: /// Read-write access to [`Options`].
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: inline
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: options_mut
Token main.Token.<
Token main.Token.d_ident: R
Token main.Token.>
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: writer
Token main.Token.:
Token main.Token.kw_impl
Token main.Token.d_ident: FnOnce
Token main.Token.(
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: Options
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: R
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: R
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.d_ident: move
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.d_ident: writer
Token main.Token.(
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: memory
Token main.Token..
Token main.Token.d_ident: options
Token main.Token.)
Token main.Token.)
Token main.Token.}
    BEFORE: /// Read-only access to [`TessellationOptions`].
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: inline
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: tessellation_options
Token main.Token.<
Token main.Token.d_ident: R
Token main.Token.>
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: reader
Token main.Token.:
Token main.Token.kw_impl
Token main.Token.d_ident: FnOnce
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: TessellationOptions
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: R
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: R
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: read
Token main.Token.(
Token main.Token.d_ident: move
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.d_ident: reader
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: memory
Token main.Token..
Token main.Token.d_ident: options
Token main.Token..
Token main.Token.d_ident: tessellation_options
Token main.Token.)
Token main.Token.)
Token main.Token.}
    BEFORE: /// Read-write access to [`TessellationOptions`].
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: inline
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: tessellation_options_mut
Token main.Token.<
Token main.Token.d_ident: R
Token main.Token.>
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: writer
Token main.Token.:
Token main.Token.kw_impl
Token main.Token.d_ident: FnOnce
Token main.Token.(
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: TessellationOptions
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: R
Token main.Token.,
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: R
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.d_ident: move
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.d_ident: writer
Token main.Token.(
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: memory
Token main.Token..
Token main.Token.d_ident: options
Token main.Token..
Token main.Token.d_ident: tessellation_options
Token main.Token.)
Token main.Token.)
Token main.Token.}
    BEFORE: /// If the given [`Id`] has been used previously the same frame at at different position,
    BEFORE: /// then an error will be printed on screen.
    BEFORE: ///
    BEFORE: /// This function is already called for all widgets that do any interaction,
    BEFORE: /// but you can call this from widgets that store state but that does not interact.
    BEFORE: ///
    BEFORE: /// The given [`Rect`] should be approximately where the widget will be.
    BEFORE: /// The most important thing is that [`Rect::min`] is approximately correct,
    BEFORE: /// because that's where the warning will be painted. If you don't know what size to pick, just pick [`Vec2::ZERO`].
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: check_for_id_clash
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: id
Token main.Token.:
Token main.Token.d_ident: Id
Token main.Token.,
Token main.Token.d_ident: new_rect
Token main.Token.:
Token main.Token.d_ident: Rect
Token main.Token.,
Token main.Token.d_ident: what
Token main.Token.:
Token main.Token.&
Token main.Token.d_ident: str
Token main.Token.)
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: prev_rect
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: frame_state_mut
Token main.Token.(
Token main.Token.d_ident: move
Token main.Token.|
Token main.Token.d_ident: state
Token main.Token.|
Token main.Token.d_ident: state
Token main.Token..
Token main.Token.d_ident: used_ids
Token main.Token..
Token main.Token.d_ident: insert
Token main.Token.(
Token main.Token.d_ident: id
Token main.Token.,
Token main.Token.d_ident: new_rect
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.kw_if
Token main.Token.!
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: options
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: opt
Token main.Token.|
Token main.Token.d_ident: opt
Token main.Token..
Token main.Token.d_ident: warn_on_id_clash
Token main.Token.)
Token main.Token.{
Token main.Token.kw_return
Token main.Token.;
Token main.Token.}
Token main.Token.kw_let
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: prev_rect
Token main.Token.)
Token main.Token.=
Token main.Token.d_ident: prev_rect
Token main.Token.kw_else
Token main.Token.{
Token main.Token.kw_return
Token main.Token.}
Token main.Token.;
    BEFORE: // it is ok to reuse the same ID for e.g. a frame around a widget,
    BEFORE: // or to check for interaction with the same widget twice:
Token main.Token.kw_let
Token main.Token.d_ident: is_same_rect
Token main.Token.=
Token main.Token.d_ident: prev_rect
Token main.Token..
Token main.Token.d_ident: expand
Token main.Token.(
Token main.Token.d_number: 0.1
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: contains_rect
Token main.Token.(
Token main.Token.d_ident: new_rect
Token main.Token.)
Token main.Token.|
Token main.Token.|
Token main.Token.d_ident: new_rect
Token main.Token..
Token main.Token.d_ident: expand
Token main.Token.(
Token main.Token.d_number: 0.1
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: contains_rect
Token main.Token.(
Token main.Token.d_ident: prev_rect
Token main.Token.)
Token main.Token.;
Token main.Token.kw_if
Token main.Token.d_ident: is_same_rect
Token main.Token.{
Token main.Token.kw_return
Token main.Token.;
Token main.Token.}
Token main.Token.kw_let
Token main.Token.d_ident: show_error
Token main.Token.=
Token main.Token.|
Token main.Token.d_ident: widget_rect
Token main.Token.:
Token main.Token.d_ident: Rect
Token main.Token.,
Token main.Token.d_ident: text
Token main.Token.:
Token main.Token.d_ident: String
Token main.Token.|
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: screen_rect
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: screen_rect
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: text
Token main.Token.=
Token main.Token.d_ident: format
Token main.Token.!
Token main.Token.(
Token main.Token.d_string: "🔥 {text}"
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: color
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: style
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: visuals
Token main.Token..
Token main.Token.d_ident: error_fg_color
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: painter
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: debug_painter
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: painter
Token main.Token..
Token main.Token.d_ident: rect_stroke
Token main.Token.(
Token main.Token.d_ident: widget_rect
Token main.Token.,
Token main.Token.d_number: 0.0
Token main.Token.,
Token main.Token.(
Token main.Token.d_number: 1.0
Token main.Token.,
Token main.Token.d_ident: color
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: below
Token main.Token.=
Token main.Token.d_ident: widget_rect
Token main.Token..
Token main.Token.d_ident: bottom
Token main.Token.(
Token main.Token.)
Token main.Token.+
Token main.Token.d_number: 32.0
Token main.Token.<
Token main.Token.d_ident: screen_rect
Token main.Token..
Token main.Token.d_ident: bottom
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: text_rect
Token main.Token.=
Token main.Token.kw_if
Token main.Token.d_ident: below
Token main.Token.{
Token main.Token.d_ident: painter
Token main.Token..
Token main.Token.d_ident: debug_text
Token main.Token.(
Token main.Token.d_ident: widget_rect
Token main.Token..
Token main.Token.d_ident: left_bottom
Token main.Token.(
Token main.Token.)
Token main.Token.+
Token main.Token.d_ident: vec2
Token main.Token.(
Token main.Token.d_number: 0.0
Token main.Token.,
Token main.Token.d_number: 2.0
Token main.Token.)
Token main.Token.,
Token main.Token.d_ident: Align2
Token main.Token.::
Token main.Token.d_ident: LEFT_TOP
Token main.Token.,
Token main.Token.d_ident: color
Token main.Token.,
Token main.Token.d_ident: text
Token main.Token.,
Token main.Token.)
Token main.Token.}
Token main.Token.kw_else
Token main.Token.{
Token main.Token.d_ident: painter
Token main.Token..
Token main.Token.d_ident: debug_text
Token main.Token.(
Token main.Token.d_ident: widget_rect
Token main.Token..
Token main.Token.d_ident: left_top
Token main.Token.(
Token main.Token.)
Token main.Token.-
Token main.Token.d_ident: vec2
Token main.Token.(
Token main.Token.d_number: 0.0
Token main.Token.,
Token main.Token.d_number: 2.0
Token main.Token.)
Token main.Token.,
Token main.Token.d_ident: Align2
Token main.Token.::
Token main.Token.d_ident: LEFT_BOTTOM
Token main.Token.,
Token main.Token.d_ident: color
Token main.Token.,
Token main.Token.d_ident: text
Token main.Token.,
Token main.Token.)
Token main.Token.}
Token main.Token.;
Token main.Token.kw_if
Token main.Token.kw_let
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: pointer_pos
Token main.Token.)
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: pointer_hover_pos
Token main.Token.(
Token main.Token.)
Token main.Token.{
Token main.Token.kw_if
Token main.Token.d_ident: text_rect
Token main.Token..
Token main.Token.d_ident: contains
Token main.Token.(
Token main.Token.d_ident: pointer_pos
Token main.Token.)
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: tooltip_pos
Token main.Token.=
Token main.Token.kw_if
Token main.Token.d_ident: below
Token main.Token.{
Token main.Token.d_ident: text_rect
Token main.Token..
Token main.Token.d_ident: left_bottom
Token main.Token.(
Token main.Token.)
Token main.Token.+
Token main.Token.d_ident: vec2
Token main.Token.(
Token main.Token.d_number: 2.0
Token main.Token.,
Token main.Token.d_number: 4.0
Token main.Token.)
Token main.Token.}
Token main.Token.kw_else
Token main.Token.{
Token main.Token.d_ident: text_rect
Token main.Token..
Token main.Token.d_ident: left_top
Token main.Token.(
Token main.Token.)
Token main.Token.+
Token main.Token.d_ident: vec2
Token main.Token.(
Token main.Token.d_number: 2.0
Token main.Token.,
Token main.Token.-
Token main.Token.d_number: 4.0
Token main.Token.)
Token main.Token.}
Token main.Token.;
Token main.Token.d_ident: painter
Token main.Token..
Token main.Token.d_ident: error
Token main.Token.(
Token main.Token.d_ident: tooltip_pos
Token main.Token.,
Token main.Token.d_ident: format
Token main.Token.!
Token main.Token.(
Token main.Token.d_string: "Widget is {} this text.\n\n\nID clashes happens when things like Windows or CollapsingHeaders share names,\n\nor when things like Plot and Grid:s aren't given unique id_source:s.\n\n\nSometimes the solution is to use ui.push_id."
Token main.Token.,
Token main.Token.kw_if
Token main.Token.d_ident: below
Token main.Token.{
Token main.Token.d_string: "above"
Token main.Token.}
Token main.Token.kw_else
Token main.Token.{
Token main.Token.d_string: "below"
Token main.Token.}
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.}
Token main.Token.}
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: id_str
Token main.Token.=
Token main.Token.d_ident: id
Token main.Token..
Token main.Token.d_ident: short_debug_format
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_if
Token main.Token.d_ident: prev_rect
Token main.Token..
Token main.Token.d_ident: min
Token main.Token..
Token main.Token.d_ident: distance
Token main.Token.(
Token main.Token.d_ident: new_rect
Token main.Token..
Token main.Token.d_ident: min
Token main.Token.)
Token main.Token.<
Token main.Token.d_number: 4.0
Token main.Token.{
Token main.Token.d_ident: show_error
Token main.Token.(
Token main.Token.d_ident: new_rect
Token main.Token.,
Token main.Token.d_ident: format
Token main.Token.!
Token main.Token.(
Token main.Token.d_string: "Double use of {what} ID {id_str}"
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.kw_else
Token main.Token.{
Token main.Token.d_ident: show_error
Token main.Token.(
Token main.Token.d_ident: prev_rect
Token main.Token.,
Token main.Token.d_ident: format
Token main.Token.!
Token main.Token.(
Token main.Token.d_string: "First use of {what} ID {id_str}"
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: show_error
Token main.Token.(
Token main.Token.d_ident: new_rect
Token main.Token.,
Token main.Token.d_ident: format
Token main.Token.!
Token main.Token.(
Token main.Token.d_string: "Second use of {what} ID {id_str}"
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.}
    BEFORE: // ---------------------------------------------------------------------
    BEFORE: /// Create a widget and check for interaction.
    BEFORE: ///
    BEFORE: /// If this is not called, the widget doesn't exist.
    BEFORE: ///
    BEFORE: /// You should use [`Ui::interact`] instead.
    BEFORE: ///
    BEFORE: /// If the widget already exists, its state (sense, Rect, etc) will be updated.
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: allow
Token main.Token.(
Token main.Token.d_ident: clippy
Token main.Token.::
Token main.Token.d_ident: too_many_arguments
Token main.Token.)
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.(
Token main.Token.d_ident: crate
Token main.Token.)
Token main.Token.kw_fn
Token main.Token.d_ident: create_widget
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.kw_mut
Token main.Token.d_ident: w
Token main.Token.:
Token main.Token.d_ident: WidgetRect
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: Response
Token main.Token.{
Token main.Token.kw_if
Token main.Token.!
Token main.Token.d_ident: w
Token main.Token..
Token main.Token.d_ident: enabled
Token main.Token.{
Token main.Token.d_ident: w
Token main.Token..
Token main.Token.d_ident: sense
Token main.Token..
Token main.Token.d_ident: click
Token main.Token.=
Token main.Token.d_ident: false
Token main.Token.;
Token main.Token.d_ident: w
Token main.Token..
Token main.Token.d_ident: sense
Token main.Token..
Token main.Token.d_ident: drag
Token main.Token.=
Token main.Token.d_ident: false
Token main.Token.;
Token main.Token.}
    BEFORE: // Remember this widget
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: viewport
Token main.Token.=
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: viewport
Token main.Token.(
Token main.Token.)
Token main.Token.;
    BEFORE: // We add all widgets here, even non-interactive ones,
    BEFORE: // because we need this list not only for checking for blocking widgets,
    BEFORE: // but also to know when we have reached the widget we are checking for cover.
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: widgets_this_frame
Token main.Token..
Token main.Token.d_ident: insert
Token main.Token.(
Token main.Token.d_ident: w
Token main.Token..
Token main.Token.d_ident: layer_id
Token main.Token.,
Token main.Token.d_ident: w
Token main.Token.)
Token main.Token.;
Token main.Token.kw_if
Token main.Token.d_ident: w
Token main.Token..
Token main.Token.d_ident: sense
Token main.Token..
Token main.Token.d_ident: focusable
Token main.Token.{
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: memory
Token main.Token..
Token main.Token.d_ident: interested_in_focus
Token main.Token.(
Token main.Token.d_ident: w
Token main.Token..
Token main.Token.d_ident: id
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.}
Token main.Token.)
Token main.Token.;
Token main.Token.kw_if
Token main.Token.!
Token main.Token.d_ident: w
Token main.Token..
Token main.Token.d_ident: enabled
Token main.Token.|
Token main.Token.|
Token main.Token.!
Token main.Token.d_ident: w
Token main.Token..
Token main.Token.d_ident: sense
Token main.Token..
Token main.Token.d_ident: focusable
Token main.Token.|
Token main.Token.|
Token main.Token.!
Token main.Token.d_ident: w
Token main.Token..
Token main.Token.d_ident: layer_id
Token main.Token..
Token main.Token.d_ident: allow_interaction
Token main.Token.(
Token main.Token.)
Token main.Token.{
    BEFORE: // Not interested or allowed input:
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: memory_mut
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: mem
Token main.Token.|
Token main.Token.d_ident: mem
Token main.Token..
Token main.Token.d_ident: surrender_focus
Token main.Token.(
Token main.Token.d_ident: w
Token main.Token..
Token main.Token.d_ident: id
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.kw_if
Token main.Token.d_ident: w
Token main.Token..
Token main.Token.d_ident: sense
Token main.Token..
Token main.Token.d_ident: interactive
Token main.Token.(
Token main.Token.)
Token main.Token.|
Token main.Token.|
Token main.Token.d_ident: w
Token main.Token..
Token main.Token.d_ident: sense
Token main.Token..
Token main.Token.d_ident: focusable
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: check_for_id_clash
Token main.Token.(
Token main.Token.d_ident: w
Token main.Token..
Token main.Token.d_ident: id
Token main.Token.,
Token main.Token.d_ident: w
Token main.Token..
Token main.Token.d_ident: rect
Token main.Token.,
Token main.Token.d_string: "widget"
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: allow
Token main.Token.(
Token main.Token.d_ident: clippy
Token main.Token.::
Token main.Token.d_ident: let_and_return
Token main.Token.)
Token main.Token.]
Token main.Token.kw_let
Token main.Token.d_ident: res
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: get_response
Token main.Token.(
Token main.Token.d_ident: w
Token main.Token.)
Token main.Token.;
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: cfg
Token main.Token.(
Token main.Token.d_ident: feature
Token main.Token.=
Token main.Token.d_string: "accesskit"
Token main.Token.)
Token main.Token.]
Token main.Token.kw_if
Token main.Token.d_ident: w
Token main.Token..
Token main.Token.d_ident: sense
Token main.Token..
Token main.Token.d_ident: focusable
Token main.Token.{
    BEFORE: // Make sure anything that can receive focus has an AccessKit node.
    BEFORE: // TODO(mwcampbell): For nodes that are filled from widget info,
    BEFORE: // some information is written to the node twice.
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: accesskit_node_builder
Token main.Token.(
Token main.Token.d_ident: w
Token main.Token..
Token main.Token.d_ident: id
Token main.Token.,
Token main.Token.|
Token main.Token.d_ident: builder
Token main.Token.|
Token main.Token.d_ident: res
Token main.Token..
Token main.Token.d_ident: fill_accesskit_node_common
Token main.Token.(
Token main.Token.d_ident: builder
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.d_ident: res
Token main.Token.}
    BEFORE: /// Read the response of some widget, which may be called _before_ creating the widget (!).
    BEFORE: ///
    BEFORE: /// This is because widget interaction happens at the start of the frame, using the previous frame's widgets.
    BEFORE: ///
    BEFORE: /// If the widget was not visible the previous frame (or this frame), this will return `None`.
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: read_response
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: id
Token main.Token.:
Token main.Token.d_ident: Id
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: Option
Token main.Token.<
Token main.Token.d_ident: Response
Token main.Token.>
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: viewport
Token main.Token.=
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: viewport
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: widgets_this_frame
Token main.Token..
Token main.Token.d_ident: get
Token main.Token.(
Token main.Token.d_ident: id
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: or_else
Token main.Token.(
Token main.Token.|
Token main.Token.|
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: widgets_prev_frame
Token main.Token..
Token main.Token.d_ident: get
Token main.Token.(
Token main.Token.d_ident: id
Token main.Token.)
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: copied
Token main.Token.(
Token main.Token.)
Token main.Token.}
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: map
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: widget_rect
Token main.Token.|
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: get_response
Token main.Token.(
Token main.Token.d_ident: widget_rect
Token main.Token.)
Token main.Token.)
Token main.Token.}
    BEFORE: /// Returns `true` if the widget with the given `Id` contains the pointer.
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: deprecated
Token main.Token.=
Token main.Token.d_string: "Use Response.contains_pointer or Context::read_response instead"
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: widget_contains_pointer
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: id
Token main.Token.:
Token main.Token.d_ident: Id
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: bool
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: read_response
Token main.Token.(
Token main.Token.d_ident: id
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: map_or
Token main.Token.(
Token main.Token.d_ident: false
Token main.Token.,
Token main.Token.|
Token main.Token.d_ident: response
Token main.Token.|
Token main.Token.d_ident: response
Token main.Token..
Token main.Token.d_ident: contains_pointer
Token main.Token.)
Token main.Token.}
    BEFORE: /// Do all interaction for an existing widget, without (re-)registering it.
Token main.Token.kw_fn
Token main.Token.d_ident: get_response
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: widget_rect
Token main.Token.:
Token main.Token.d_ident: WidgetRect
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: Response
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: WidgetRect
Token main.Token.{
Token main.Token.d_ident: id
Token main.Token.,
Token main.Token.d_ident: layer_id
Token main.Token.,
Token main.Token.d_ident: rect
Token main.Token.,
Token main.Token.d_ident: interact_rect
Token main.Token.,
Token main.Token.d_ident: sense
Token main.Token.,
Token main.Token.d_ident: enabled
Token main.Token.,
Token main.Token.}
Token main.Token.=
Token main.Token.d_ident: widget_rect
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: highlighted
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: frame_state
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: fs
Token main.Token.|
Token main.Token.d_ident: fs
Token main.Token..
Token main.Token.d_ident: highlight_this_frame
Token main.Token..
Token main.Token.d_ident: contains
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: id
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.kw_mut
Token main.Token.d_ident: res
Token main.Token.=
Token main.Token.d_ident: Response
Token main.Token.{
Token main.Token.d_ident: ctx
Token main.Token.:
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: clone
Token main.Token.(
Token main.Token.)
Token main.Token.,
Token main.Token.d_ident: layer_id
Token main.Token.,
Token main.Token.d_ident: id
Token main.Token.,
Token main.Token.d_ident: rect
Token main.Token.,
Token main.Token.d_ident: interact_rect
Token main.Token.,
Token main.Token.d_ident: sense
Token main.Token.,
Token main.Token.d_ident: enabled
Token main.Token.,
Token main.Token.d_ident: contains_pointer
Token main.Token.:
Token main.Token.d_ident: false
Token main.Token.,
Token main.Token.d_ident: hovered
Token main.Token.:
Token main.Token.d_ident: false
Token main.Token.,
Token main.Token.d_ident: highlighted
Token main.Token.,
Token main.Token.d_ident: clicked
Token main.Token.:
Token main.Token.d_ident: Default
Token main.Token.::
Token main.Token.d_ident: default
Token main.Token.(
Token main.Token.)
Token main.Token.,
Token main.Token.d_ident: double_clicked
Token main.Token.:
Token main.Token.d_ident: Default
Token main.Token.::
Token main.Token.d_ident: default
Token main.Token.(
Token main.Token.)
Token main.Token.,
Token main.Token.d_ident: triple_clicked
Token main.Token.:
Token main.Token.d_ident: Default
Token main.Token.::
Token main.Token.d_ident: default
Token main.Token.(
Token main.Token.)
Token main.Token.,
Token main.Token.d_ident: drag_started
Token main.Token.:
Token main.Token.d_ident: false
Token main.Token.,
Token main.Token.d_ident: dragged
Token main.Token.:
Token main.Token.d_ident: false
Token main.Token.,
Token main.Token.d_ident: drag_stopped
Token main.Token.:
Token main.Token.d_ident: false
Token main.Token.,
Token main.Token.d_ident: is_pointer_button_down_on
Token main.Token.:
Token main.Token.d_ident: false
Token main.Token.,
Token main.Token.d_ident: interact_pointer_pos
Token main.Token.:
Token main.Token.d_ident: None
Token main.Token.,
Token main.Token.d_ident: changed
Token main.Token.:
Token main.Token.d_ident: false
Token main.Token.,
Token main.Token.}
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: clicked_elsewhere
Token main.Token.=
Token main.Token.d_ident: res
Token main.Token..
Token main.Token.d_ident: clicked_elsewhere
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: viewport
Token main.Token.=
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: viewports
Token main.Token..
Token main.Token.d_ident: entry
Token main.Token.(
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: viewport_id
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: or_default
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: res
Token main.Token..
Token main.Token.d_ident: contains_pointer
Token main.Token.=
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: interact_widgets
Token main.Token..
Token main.Token.d_ident: contains_pointer
Token main.Token..
Token main.Token.d_ident: contains
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: id
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: input
Token main.Token.=
Token main.Token.&
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: input
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: memory
Token main.Token.=
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: memory
Token main.Token.;
Token main.Token.kw_if
Token main.Token.d_ident: sense
Token main.Token..
Token main.Token.d_ident: click
Token main.Token.&
Token main.Token.&
Token main.Token.d_ident: memory
Token main.Token..
Token main.Token.d_ident: has_focus
Token main.Token.(
Token main.Token.d_ident: id
Token main.Token.)
Token main.Token.&
Token main.Token.&
Token main.Token.(
Token main.Token.d_ident: input
Token main.Token..
Token main.Token.d_ident: key_pressed
Token main.Token.(
Token main.Token.d_ident: Key
Token main.Token.::
Token main.Token.d_ident: Space
Token main.Token.)
Token main.Token.|
Token main.Token.|
Token main.Token.d_ident: input
Token main.Token..
Token main.Token.d_ident: key_pressed
Token main.Token.(
Token main.Token.d_ident: Key
Token main.Token.::
Token main.Token.d_ident: Enter
Token main.Token.)
Token main.Token.)
Token main.Token.{
    BEFORE: // Space/enter works like a primary click for e.g. selected buttons
Token main.Token.d_ident: res
Token main.Token..
Token main.Token.d_ident: clicked
Token main.Token.[
Token main.Token.d_ident: PointerButton
Token main.Token.::
Token main.Token.d_ident: Primary
Token main.Token.d_ident: as
Token main.Token.d_ident: usize
Token main.Token.]
Token main.Token.=
Token main.Token.d_ident: true
Token main.Token.;
Token main.Token.}
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: cfg
Token main.Token.(
Token main.Token.d_ident: feature
Token main.Token.=
Token main.Token.d_string: "accesskit"
Token main.Token.)
Token main.Token.]
Token main.Token.kw_if
Token main.Token.d_ident: sense
Token main.Token..
Token main.Token.d_ident: click
Token main.Token.&
Token main.Token.&
Token main.Token.d_ident: input
Token main.Token..
Token main.Token.d_ident: has_accesskit_action_request
Token main.Token.(
Token main.Token.d_ident: id
Token main.Token.,
Token main.Token.d_ident: accesskit
Token main.Token.::
Token main.Token.d_ident: Action
Token main.Token.::
Token main.Token.d_ident: Default
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: res
Token main.Token..
Token main.Token.d_ident: clicked
Token main.Token.[
Token main.Token.d_ident: PointerButton
Token main.Token.::
Token main.Token.d_ident: Primary
Token main.Token.d_ident: as
Token main.Token.d_ident: usize
Token main.Token.]
Token main.Token.=
Token main.Token.d_ident: true
Token main.Token.;
Token main.Token.}
Token main.Token.kw_let
Token main.Token.d_ident: interaction
Token main.Token.=
Token main.Token.d_ident: memory
Token main.Token..
Token main.Token.d_ident: interaction
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: res
Token main.Token..
Token main.Token.d_ident: is_pointer_button_down_on
Token main.Token.=
Token main.Token.d_ident: interaction
Token main.Token..
Token main.Token.d_ident: potential_click_id
Token main.Token.==
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: id
Token main.Token.)
Token main.Token.|
Token main.Token.|
Token main.Token.d_ident: interaction
Token main.Token..
Token main.Token.d_ident: potential_drag_id
Token main.Token.==
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: id
Token main.Token.)
Token main.Token.;
Token main.Token.kw_if
Token main.Token.d_ident: res
Token main.Token..
Token main.Token.d_ident: enabled
Token main.Token.{
Token main.Token.d_ident: res
Token main.Token..
Token main.Token.d_ident: hovered
Token main.Token.=
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: interact_widgets
Token main.Token..
Token main.Token.d_ident: hovered
Token main.Token..
Token main.Token.d_ident: contains
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: id
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: res
Token main.Token..
Token main.Token.d_ident: dragged
Token main.Token.=
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: id
Token main.Token.)
Token main.Token.==
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: interact_widgets
Token main.Token..
Token main.Token.d_ident: dragged
Token main.Token.;
Token main.Token.d_ident: res
Token main.Token..
Token main.Token.d_ident: drag_started
Token main.Token.=
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: id
Token main.Token.)
Token main.Token.==
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: interact_widgets
Token main.Token..
Token main.Token.d_ident: drag_started
Token main.Token.;
Token main.Token.d_ident: res
Token main.Token..
Token main.Token.d_ident: drag_stopped
Token main.Token.=
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: id
Token main.Token.)
Token main.Token.==
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: interact_widgets
Token main.Token..
Token main.Token.d_ident: drag_stopped
Token main.Token.;
Token main.Token.}
Token main.Token.kw_let
Token main.Token.d_ident: clicked
Token main.Token.=
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: id
Token main.Token.)
Token main.Token.==
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: interact_widgets
Token main.Token..
Token main.Token.d_ident: clicked
Token main.Token.;
Token main.Token.kw_for
Token main.Token.d_ident: pointer_event
Token main.Token.kw_in
Token main.Token.&
Token main.Token.d_ident: input
Token main.Token..
Token main.Token.d_ident: pointer
Token main.Token..
Token main.Token.d_ident: pointer_events
Token main.Token.{
Token main.Token.kw_if
Token main.Token.kw_let
Token main.Token.d_ident: PointerEvent
Token main.Token.::
Token main.Token.d_ident: Released
Token main.Token.{
Token main.Token.d_ident: click
Token main.Token.,
Token main.Token.d_ident: button
Token main.Token.}
Token main.Token.=
Token main.Token.d_ident: pointer_event
Token main.Token.{
Token main.Token.kw_if
Token main.Token.d_ident: sense
Token main.Token..
Token main.Token.d_ident: click
Token main.Token.&
Token main.Token.&
Token main.Token.d_ident: clicked
Token main.Token.{
Token main.Token.kw_if
Token main.Token.kw_let
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: click
Token main.Token.)
Token main.Token.=
Token main.Token.d_ident: click
Token main.Token.{
Token main.Token.d_ident: res
Token main.Token..
Token main.Token.d_ident: clicked
Token main.Token.[
Token main.Token.*
Token main.Token.d_ident: button
Token main.Token.d_ident: as
Token main.Token.d_ident: usize
Token main.Token.]
Token main.Token.=
Token main.Token.d_ident: true
Token main.Token.;
Token main.Token.d_ident: res
Token main.Token..
Token main.Token.d_ident: double_clicked
Token main.Token.[
Token main.Token.*
Token main.Token.d_ident: button
Token main.Token.d_ident: as
Token main.Token.d_ident: usize
Token main.Token.]
Token main.Token.=
Token main.Token.d_ident: click
Token main.Token..
Token main.Token.d_ident: is_double
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: res
Token main.Token..
Token main.Token.d_ident: triple_clicked
Token main.Token.[
Token main.Token.*
Token main.Token.d_ident: button
Token main.Token.d_ident: as
Token main.Token.d_ident: usize
Token main.Token.]
Token main.Token.=
Token main.Token.d_ident: click
Token main.Token..
Token main.Token.d_ident: is_triple
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.}
Token main.Token.d_ident: res
Token main.Token..
Token main.Token.d_ident: is_pointer_button_down_on
Token main.Token.=
Token main.Token.d_ident: false
Token main.Token.;
Token main.Token.d_ident: res
Token main.Token..
Token main.Token.d_ident: dragged
Token main.Token.=
Token main.Token.d_ident: false
Token main.Token.;
Token main.Token.}
Token main.Token.}
    BEFORE: // is_pointer_button_down_on is false when released, but we want interact_pointer_pos
    BEFORE: // to still work.
Token main.Token.kw_let
Token main.Token.d_ident: is_interacted_with
Token main.Token.=
Token main.Token.d_ident: res
Token main.Token..
Token main.Token.d_ident: is_pointer_button_down_on
Token main.Token.|
Token main.Token.|
Token main.Token.d_ident: clicked
Token main.Token.|
Token main.Token.|
Token main.Token.d_ident: res
Token main.Token..
Token main.Token.d_ident: drag_stopped
Token main.Token.;
Token main.Token.kw_if
Token main.Token.d_ident: is_interacted_with
Token main.Token.{
Token main.Token.d_ident: res
Token main.Token..
Token main.Token.d_ident: interact_pointer_pos
Token main.Token.=
Token main.Token.d_ident: input
Token main.Token..
Token main.Token.d_ident: pointer
Token main.Token..
Token main.Token.d_ident: interact_pos
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_if
Token main.Token.kw_let
Token main.Token.(
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: transform
Token main.Token.)
Token main.Token.,
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: pos
Token main.Token.)
Token main.Token.)
Token main.Token.=
Token main.Token.(
Token main.Token.d_ident: memory
Token main.Token..
Token main.Token.d_ident: layer_transforms
Token main.Token..
Token main.Token.d_ident: get
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: res
Token main.Token..
Token main.Token.d_ident: layer_id
Token main.Token.)
Token main.Token.,
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: res
Token main.Token..
Token main.Token.d_ident: interact_pointer_pos
Token main.Token.,
Token main.Token.)
Token main.Token.{
Token main.Token.*
Token main.Token.d_ident: pos
Token main.Token.=
Token main.Token.d_ident: transform
Token main.Token..
Token main.Token.d_ident: inverse
Token main.Token.(
Token main.Token.)
Token main.Token.*
Token main.Token.*
Token main.Token.d_ident: pos
Token main.Token.;
Token main.Token.}
Token main.Token.}
Token main.Token.kw_if
Token main.Token.d_ident: input
Token main.Token..
Token main.Token.d_ident: pointer
Token main.Token..
Token main.Token.d_ident: any_down
Token main.Token.(
Token main.Token.)
Token main.Token.&
Token main.Token.&
Token main.Token.!
Token main.Token.d_ident: res
Token main.Token..
Token main.Token.d_ident: is_pointer_button_down_on
Token main.Token.{
    BEFORE: // We don't hover widgets while interacting with *other* widgets:
Token main.Token.d_ident: res
Token main.Token..
Token main.Token.d_ident: hovered
Token main.Token.=
Token main.Token.d_ident: false
Token main.Token.;
Token main.Token.}
Token main.Token.kw_if
Token main.Token.d_ident: clicked_elsewhere
Token main.Token.&
Token main.Token.&
Token main.Token.d_ident: memory
Token main.Token..
Token main.Token.d_ident: has_focus
Token main.Token.(
Token main.Token.d_ident: id
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: memory
Token main.Token..
Token main.Token.d_ident: surrender_focus
Token main.Token.(
Token main.Token.d_ident: id
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.kw_if
Token main.Token.d_ident: res
Token main.Token..
Token main.Token.d_ident: dragged
Token main.Token.(
Token main.Token.)
Token main.Token.&
Token main.Token.&
Token main.Token.!
Token main.Token.d_ident: memory
Token main.Token..
Token main.Token.d_ident: has_focus
Token main.Token.(
Token main.Token.d_ident: id
Token main.Token.)
Token main.Token.{
    BEFORE: // e.g.: remove focus from a widget when you drag something else
Token main.Token.d_ident: memory
Token main.Token..
Token main.Token.d_ident: stop_text_input
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.}
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: res
Token main.Token.}
    BEFORE: /// Get a full-screen painter for a new or existing layer
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: layer_painter
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: layer_id
Token main.Token.:
Token main.Token.d_ident: LayerId
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: Painter
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: screen_rect
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: screen_rect
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: Painter
Token main.Token.::
Token main.Token.d_ident: new
Token main.Token.(
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: clone
Token main.Token.(
Token main.Token.)
Token main.Token.,
Token main.Token.d_ident: layer_id
Token main.Token.,
Token main.Token.d_ident: screen_rect
Token main.Token.)
Token main.Token.}
    BEFORE: /// Paint on top of everything else
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: debug_painter
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: Painter
Token main.Token.{
Token main.Token.d_ident: Self
Token main.Token.::
Token main.Token.d_ident: layer_painter
Token main.Token.(
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: LayerId
Token main.Token.::
Token main.Token.d_ident: debug
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.}
    BEFORE: /// Print this text next to the cursor at the end of the frame.
    BEFORE: ///
    BEFORE: /// If you call this multiple times, the text will be appended.
    BEFORE: ///
    BEFORE: /// This only works if compiled with `debug_assertions`.
    BEFORE: ///
    BEFORE: /// ```
    BEFORE: /// # let ctx = egui::Context::default();
    BEFORE: /// # let state = true;
    BEFORE: /// ctx.debug_text(format!("State: {state:?}"));
    BEFORE: /// ```
    BEFORE: ///
    BEFORE: /// This is just a convenience for calling [`crate::debug_text::print`].
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: track_caller
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: debug_text
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: text
Token main.Token.:
Token main.Token.kw_impl
Token main.Token.d_ident: Into
Token main.Token.<
Token main.Token.d_ident: WidgetText
Token main.Token.>
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: crate
Token main.Token.::
Token main.Token.d_ident: debug_text
Token main.Token.::
Token main.Token.d_ident: print
Token main.Token.(
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: text
Token main.Token.)
Token main.Token.;
Token main.Token.}
    BEFORE: /// What operating system are we running on?
    BEFORE: ///
    BEFORE: /// When compiling natively, this is
    BEFORE: /// figured out from the `target_os`.
    BEFORE: ///
    BEFORE: /// For web, this can be figured out from the user-agent,
    BEFORE: /// and is done so by [`eframe`](https://github.com/emilk/egui/tree/master/crates/eframe).
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: os
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: OperatingSystem
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: read
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: os
Token main.Token.)
Token main.Token.}
    BEFORE: /// Set the operating system we are running on.
    BEFORE: ///
    BEFORE: /// If you are writing wasm-based integration for egui you
    BEFORE: /// may want to set this based on e.g. the user-agent.
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: set_os
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: os
Token main.Token.:
Token main.Token.d_ident: OperatingSystem
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: os
Token main.Token.=
Token main.Token.d_ident: os
Token main.Token.)
Token main.Token.;
Token main.Token.}
    BEFORE: /// Set the cursor icon.
    BEFORE: ///
    BEFORE: /// Equivalent to:
    BEFORE: /// ```
    BEFORE: /// # let ctx = egui::Context::default();
    BEFORE: /// ctx.output_mut(|o| o.cursor_icon = egui::CursorIcon::PointingHand);
    BEFORE: /// ```
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: set_cursor_icon
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: cursor_icon
Token main.Token.:
Token main.Token.d_ident: CursorIcon
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: output_mut
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: o
Token main.Token.|
Token main.Token.d_ident: o
Token main.Token..
Token main.Token.d_ident: cursor_icon
Token main.Token.=
Token main.Token.d_ident: cursor_icon
Token main.Token.)
Token main.Token.;
Token main.Token.}
    BEFORE: /// Open an URL in a browser.
    BEFORE: ///
    BEFORE: /// Equivalent to:
    BEFORE: /// ```
    BEFORE: /// # let ctx = egui::Context::default();
    BEFORE: /// # let open_url = egui::OpenUrl::same_tab("http://www.example.com");
    BEFORE: /// ctx.output_mut(|o| o.open_url = Some(open_url));
    BEFORE: /// ```
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: open_url
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: open_url
Token main.Token.:
Token main.Token.d_ident: crate
Token main.Token.::
Token main.Token.d_ident: OpenUrl
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: output_mut
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: o
Token main.Token.|
Token main.Token.d_ident: o
Token main.Token..
Token main.Token.d_ident: open_url
Token main.Token.=
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: open_url
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.}
    BEFORE: /// Copy the given text to the system clipboard.
    BEFORE: ///
    BEFORE: /// Empty strings are ignored.
    BEFORE: ///
    BEFORE: /// Equivalent to:
    BEFORE: /// ```
    BEFORE: /// # let ctx = egui::Context::default();
    BEFORE: /// ctx.output_mut(|o| o.copied_text = "Copy this".to_owned());
    BEFORE: /// ```
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: copy_text
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: text
Token main.Token.:
Token main.Token.d_ident: String
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: output_mut
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: o
Token main.Token.|
Token main.Token.d_ident: o
Token main.Token..
Token main.Token.d_ident: copied_text
Token main.Token.=
Token main.Token.d_ident: text
Token main.Token.)
Token main.Token.;
Token main.Token.}
    BEFORE: /// Format the given shortcut in a human-readable way (e.g. `Ctrl+Shift+X`).
    BEFORE: ///
    BEFORE: /// Can be used to get the text for [`Button::shortcut_text`].
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: format_shortcut
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: shortcut
Token main.Token.:
Token main.Token.&
Token main.Token.d_ident: KeyboardShortcut
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: String
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: os
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: os
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: is_mac
Token main.Token.=
Token main.Token.d_ident: matches
Token main.Token.!
Token main.Token.(
Token main.Token.d_ident: os
Token main.Token.,
Token main.Token.d_ident: OperatingSystem
Token main.Token.::
Token main.Token.d_ident: Mac
Token main.Token.|
Token main.Token.d_ident: OperatingSystem
Token main.Token.::
Token main.Token.d_ident: IOS
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: can_show_symbols
Token main.Token.=
Token main.Token.|
Token main.Token.|
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: ModifierNames
Token main.Token.{
Token main.Token.d_ident: alt
Token main.Token.,
Token main.Token.d_ident: ctrl
Token main.Token.,
Token main.Token.d_ident: shift
Token main.Token.,
Token main.Token.d_ident: mac_cmd
Token main.Token.,
Token main.Token...
Token main.Token.}
Token main.Token.=
Token main.Token.d_ident: ModifierNames
Token main.Token.::
Token main.Token.d_ident: SYMBOLS
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: font_id
Token main.Token.=
Token main.Token.d_ident: TextStyle
Token main.Token.::
Token main.Token.d_ident: Body
Token main.Token..
Token main.Token.d_ident: resolve
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: style
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: fonts
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: f
Token main.Token.|
Token main.Token.{
Token main.Token.kw_let
Token main.Token.kw_mut
Token main.Token.d_ident: lock
Token main.Token.=
Token main.Token.d_ident: f
Token main.Token..
Token main.Token.d_ident: lock
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: font
Token main.Token.=
Token main.Token.d_ident: lock
Token main.Token..
Token main.Token.d_ident: fonts
Token main.Token..
Token main.Token.d_ident: font
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: font_id
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: font
Token main.Token..
Token main.Token.d_ident: has_glyphs
Token main.Token.(
Token main.Token.d_ident: alt
Token main.Token.)
Token main.Token.&
Token main.Token.&
Token main.Token.d_ident: font
Token main.Token..
Token main.Token.d_ident: has_glyphs
Token main.Token.(
Token main.Token.d_ident: ctrl
Token main.Token.)
Token main.Token.&
Token main.Token.&
Token main.Token.d_ident: font
Token main.Token..
Token main.Token.d_ident: has_glyphs
Token main.Token.(
Token main.Token.d_ident: shift
Token main.Token.)
Token main.Token.&
Token main.Token.&
Token main.Token.d_ident: font
Token main.Token..
Token main.Token.d_ident: has_glyphs
Token main.Token.(
Token main.Token.d_ident: mac_cmd
Token main.Token.)
Token main.Token.}
Token main.Token.)
Token main.Token.}
Token main.Token.;
Token main.Token.kw_if
Token main.Token.d_ident: is_mac
Token main.Token.&
Token main.Token.&
Token main.Token.d_ident: can_show_symbols
Token main.Token.(
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: shortcut
Token main.Token..
Token main.Token.d_ident: format
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: ModifierNames
Token main.Token.::
Token main.Token.d_ident: SYMBOLS
Token main.Token.,
Token main.Token.d_ident: is_mac
Token main.Token.)
Token main.Token.}
Token main.Token.kw_else
Token main.Token.{
Token main.Token.d_ident: shortcut
Token main.Token..
Token main.Token.d_ident: format
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: ModifierNames
Token main.Token.::
Token main.Token.d_ident: NAMES
Token main.Token.,
Token main.Token.d_ident: is_mac
Token main.Token.)
Token main.Token.}
Token main.Token.}
    BEFORE: /// The current frame number for the current viewport.
    BEFORE: ///
    BEFORE: /// Starts at zero, and is incremented at the end of [`Self::run`] or by [`Self::end_frame`].
    BEFORE: ///
    BEFORE: /// Between calls to [`Self::run`], this is the frame number of the coming frame.
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: frame_nr
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: u64
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: frame_nr_for
Token main.Token.(
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: viewport_id
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.}
    BEFORE: /// The current frame number.
    BEFORE: ///
    BEFORE: /// Starts at zero, and is incremented at the end of [`Self::run`] or by [`Self::end_frame`].
    BEFORE: ///
    BEFORE: /// Between calls to [`Self::run`], this is the frame number of the coming frame.
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: frame_nr_for
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: id
Token main.Token.:
Token main.Token.d_ident: ViewportId
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: u64
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: read
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: viewports
Token main.Token..
Token main.Token.d_ident: get
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: id
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: map_or
Token main.Token.(
Token main.Token.d_number: 0
Token main.Token.,
Token main.Token.|
Token main.Token.d_ident: v
Token main.Token.|
Token main.Token.d_ident: v
Token main.Token..
Token main.Token.d_ident: repaint
Token main.Token..
Token main.Token.d_ident: frame_nr
Token main.Token.)
Token main.Token.)
Token main.Token.}
    BEFORE: /// Call this if there is need to repaint the UI, i.e. if you are showing an animation.
    BEFORE: ///
    BEFORE: /// If this is called at least once in a frame, then there will be another frame right after this.
    BEFORE: /// Call as many times as you wish, only one repaint will be issued.
    BEFORE: ///
    BEFORE: /// To request repaint with a delay, use [`Self::request_repaint_after`].
    BEFORE: ///
    BEFORE: /// If called from outside the UI thread, the UI thread will wake up and run,
    BEFORE: /// provided the egui integration has set that up via [`Self::set_request_repaint_callback`]
    BEFORE: /// (this will work on `eframe`).
    BEFORE: ///
    BEFORE: /// This will repaint the current viewport.
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: track_caller
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: request_repaint
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: request_repaint_of
Token main.Token.(
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: viewport_id
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.}
    BEFORE: /// Call this if there is need to repaint the UI, i.e. if you are showing an animation.
    BEFORE: ///
    BEFORE: /// If this is called at least once in a frame, then there will be another frame right after this.
    BEFORE: /// Call as many times as you wish, only one repaint will be issued.
    BEFORE: ///
    BEFORE: /// To request repaint with a delay, use [`Self::request_repaint_after_for`].
    BEFORE: ///
    BEFORE: /// If called from outside the UI thread, the UI thread will wake up and run,
    BEFORE: /// provided the egui integration has set that up via [`Self::set_request_repaint_callback`]
    BEFORE: /// (this will work on `eframe`).
    BEFORE: ///
    BEFORE: /// This will repaint the specified viewport.
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: track_caller
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: request_repaint_of
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: id
Token main.Token.:
Token main.Token.d_ident: ViewportId
Token main.Token.)
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: cause
Token main.Token.=
Token main.Token.d_ident: RepaintCause
Token main.Token.::
Token main.Token.d_ident: new
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: request_repaint
Token main.Token.(
Token main.Token.d_ident: id
Token main.Token.,
Token main.Token.d_ident: cause
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.}
    BEFORE: /// Request repaint after at most the specified duration elapses.
    BEFORE: ///
    BEFORE: /// The backend can chose to repaint sooner, for instance if some other code called
    BEFORE: /// this method with a lower duration, or if new events arrived.
    BEFORE: ///
    BEFORE: /// The function can be multiple times, but only the *smallest* duration will be considered.
    BEFORE: /// So, if the function is called two times with `1 second` and `2 seconds`, egui will repaint
    BEFORE: /// after `1 second`
    BEFORE: ///
    BEFORE: /// This is primarily useful for applications who would like to save battery by avoiding wasted
    BEFORE: /// redraws when the app is not in focus. But sometimes the GUI of the app might become stale
    BEFORE: /// and outdated if it is not updated for too long.
    BEFORE: ///
    BEFORE: /// Let's say, something like a stopwatch widget that displays the time in seconds. You would waste
    BEFORE: /// resources repainting multiple times within the same second (when you have no input),
    BEFORE: /// just calculate the difference of duration between current time and next second change,
    BEFORE: /// and call this function, to make sure that you are displaying the latest updated time, but
    BEFORE: /// not wasting resources on needless repaints within the same second.
    BEFORE: ///
    BEFORE: /// ### Quirk:
    BEFORE: /// Duration begins at the next frame. Let's say for example that it's a very inefficient app
    BEFORE: /// and takes 500 milliseconds per frame at 2 fps. The widget / user might want a repaint in
    BEFORE: /// next 500 milliseconds. Now, app takes 1000 ms per frame (1 fps) because the backend event
    BEFORE: /// timeout takes 500 milliseconds AFTER the vsync swap buffer.
    BEFORE: /// So, it's not that we are requesting repaint within X duration. We are rather timing out
    BEFORE: /// during app idle time where we are not receiving any new input events.
    BEFORE: ///
    BEFORE: /// This repaints the current viewport
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: track_caller
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: request_repaint_after
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: duration
Token main.Token.:
Token main.Token.d_ident: Duration
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: request_repaint_after_for
Token main.Token.(
Token main.Token.d_ident: duration
Token main.Token.,
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: viewport_id
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.}
    BEFORE: /// Request repaint after at most the specified duration elapses.
    BEFORE: ///
    BEFORE: /// The backend can chose to repaint sooner, for instance if some other code called
    BEFORE: /// this method with a lower duration, or if new events arrived.
    BEFORE: ///
    BEFORE: /// The function can be multiple times, but only the *smallest* duration will be considered.
    BEFORE: /// So, if the function is called two times with `1 second` and `2 seconds`, egui will repaint
    BEFORE: /// after `1 second`
    BEFORE: ///
    BEFORE: /// This is primarily useful for applications who would like to save battery by avoiding wasted
    BEFORE: /// redraws when the app is not in focus. But sometimes the GUI of the app might become stale
    BEFORE: /// and outdated if it is not updated for too long.
    BEFORE: ///
    BEFORE: /// Let's say, something like a stopwatch widget that displays the time in seconds. You would waste
    BEFORE: /// resources repainting multiple times within the same second (when you have no input),
    BEFORE: /// just calculate the difference of duration between current time and next second change,
    BEFORE: /// and call this function, to make sure that you are displaying the latest updated time, but
    BEFORE: /// not wasting resources on needless repaints within the same second.
    BEFORE: ///
    BEFORE: /// ### Quirk:
    BEFORE: /// Duration begins at the next frame. Let's say for example that it's a very inefficient app
    BEFORE: /// and takes 500 milliseconds per frame at 2 fps. The widget / user might want a repaint in
    BEFORE: /// next 500 milliseconds. Now, app takes 1000 ms per frame (1 fps) because the backend event
    BEFORE: /// timeout takes 500 milliseconds AFTER the vsync swap buffer.
    BEFORE: /// So, it's not that we are requesting repaint within X duration. We are rather timing out
    BEFORE: /// during app idle time where we are not receiving any new input events.
    BEFORE: ///
    BEFORE: /// This repaints the specified viewport
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: track_caller
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: request_repaint_after_for
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: duration
Token main.Token.:
Token main.Token.d_ident: Duration
Token main.Token.,
Token main.Token.d_ident: id
Token main.Token.:
Token main.Token.d_ident: ViewportId
Token main.Token.)
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: cause
Token main.Token.=
Token main.Token.d_ident: RepaintCause
Token main.Token.::
Token main.Token.d_ident: new
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: request_repaint_after
Token main.Token.(
Token main.Token.d_ident: duration
Token main.Token.,
Token main.Token.d_ident: id
Token main.Token.,
Token main.Token.d_ident: cause
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.}
    BEFORE: /// Was a repaint requested last frame for the current viewport?
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: must_use
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: requested_repaint_last_frame
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: bool
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: requested_repaint_last_frame_for
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: viewport_id
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.}
    BEFORE: /// Was a repaint requested last frame for the given viewport?
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: must_use
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: requested_repaint_last_frame_for
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: viewport_id
Token main.Token.:
Token main.Token.&
Token main.Token.d_ident: ViewportId
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: bool
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: read
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: requested_immediate_repaint_prev_frame
Token main.Token.(
Token main.Token.d_ident: viewport_id
Token main.Token.)
Token main.Token.)
Token main.Token.}
    BEFORE: /// Has a repaint been requested for the current viewport?
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: must_use
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: has_requested_repaint
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: bool
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: has_requested_repaint_for
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: viewport_id
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.}
    BEFORE: /// Has a repaint been requested for the given viewport?
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: must_use
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: has_requested_repaint_for
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: viewport_id
Token main.Token.:
Token main.Token.&
Token main.Token.d_ident: ViewportId
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: bool
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: read
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: has_requested_repaint
Token main.Token.(
Token main.Token.d_ident: viewport_id
Token main.Token.)
Token main.Token.)
Token main.Token.}
    BEFORE: /// Why are we repainting?
    BEFORE: ///
    BEFORE: /// This can be helpful in debugging why egui is constantly repainting.
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: repaint_causes
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: Vec
Token main.Token.<
Token main.Token.d_ident: RepaintCause
Token main.Token.>
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: read
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.{
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: viewports
Token main.Token..
Token main.Token.d_ident: get
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: viewport_id
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: map
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: v
Token main.Token.|
Token main.Token.d_ident: v
Token main.Token..
Token main.Token.d_ident: repaint
Token main.Token..
Token main.Token.d_ident: causes
Token main.Token..
Token main.Token.d_ident: clone
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.}
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: unwrap_or_default
Token main.Token.(
Token main.Token.)
Token main.Token.}
    BEFORE: /// For integrations: this callback will be called when an egui user calls [`Self::request_repaint`] or [`Self::request_repaint_after`].
    BEFORE: ///
    BEFORE: /// This lets you wake up a sleeping UI thread.
    BEFORE: ///
    BEFORE: /// Note that only one callback can be set. Any new call overrides the previous callback.
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: set_request_repaint_callback
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: callback
Token main.Token.:
Token main.Token.kw_impl
Token main.Token.d_ident: Fn
Token main.Token.(
Token main.Token.d_ident: RequestRepaintInfo
Token main.Token.)
Token main.Token.+
Token main.Token.d_ident: Send
Token main.Token.+
Token main.Token.d_ident: Sync
Token main.Token.+
Token main.Token.'
Token main.Token.kw_static
Token main.Token.,
Token main.Token.)
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: callback
Token main.Token.=
Token main.Token.d_ident: Box
Token main.Token.::
Token main.Token.d_ident: new
Token main.Token.(
Token main.Token.d_ident: callback
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: request_repaint_callback
Token main.Token.=
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: callback
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.}
    BEFORE: /// Callbacks
Token main.Token.kw_impl
Token main.Token.d_ident: Context
Token main.Token.{
    BEFORE: /// Call the given callback at the start of each frame
    BEFORE: /// of each viewport.
    BEFORE: ///
    BEFORE: /// This can be used for egui _plugins_.
    BEFORE: /// See [`crate::debug_text`] for an example.
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: on_begin_frame
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: debug_name
Token main.Token.:
Token main.Token.&
Token main.Token.'
Token main.Token.kw_static
Token main.Token.d_ident: str
Token main.Token.,
Token main.Token.d_ident: cb
Token main.Token.:
Token main.Token.d_ident: ContextCallback
Token main.Token.)
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: named_cb
Token main.Token.=
Token main.Token.d_ident: NamedContextCallback
Token main.Token.{
Token main.Token.d_ident: debug_name
Token main.Token.,
Token main.Token.d_ident: callback
Token main.Token.:
Token main.Token.d_ident: cb
Token main.Token.,
Token main.Token.}
Token main.Token.;
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: plugins
Token main.Token..
Token main.Token.d_ident: on_begin_frame
Token main.Token..
Token main.Token.d_ident: push
Token main.Token.(
Token main.Token.d_ident: named_cb
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.}
    BEFORE: /// Call the given callback at the end of each frame
    BEFORE: /// of each viewport.
    BEFORE: ///
    BEFORE: /// This can be used for egui _plugins_.
    BEFORE: /// See [`crate::debug_text`] for an example.
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: on_end_frame
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: debug_name
Token main.Token.:
Token main.Token.&
Token main.Token.'
Token main.Token.kw_static
Token main.Token.d_ident: str
Token main.Token.,
Token main.Token.d_ident: cb
Token main.Token.:
Token main.Token.d_ident: ContextCallback
Token main.Token.)
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: named_cb
Token main.Token.=
Token main.Token.d_ident: NamedContextCallback
Token main.Token.{
Token main.Token.d_ident: debug_name
Token main.Token.,
Token main.Token.d_ident: callback
Token main.Token.:
Token main.Token.d_ident: cb
Token main.Token.,
Token main.Token.}
Token main.Token.;
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: plugins
Token main.Token..
Token main.Token.d_ident: on_end_frame
Token main.Token..
Token main.Token.d_ident: push
Token main.Token.(
Token main.Token.d_ident: named_cb
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.}
Token main.Token.kw_impl
Token main.Token.d_ident: Context
Token main.Token.{
    BEFORE: /// Tell `egui` which fonts to use.
    BEFORE: ///
    BEFORE: /// The default `egui` fonts only support latin and cyrillic alphabets,
    BEFORE: /// but you can call this to install additional fonts that support e.g. korean characters.
    BEFORE: ///
    BEFORE: /// The new fonts will become active at the start of the next frame.
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: set_fonts
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: font_definitions
Token main.Token.:
Token main.Token.d_ident: FontDefinitions
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: crate
Token main.Token.::
Token main.Token.d_ident: profile_function
Token main.Token.!
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: pixels_per_point
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: pixels_per_point
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.kw_mut
Token main.Token.d_ident: update_fonts
Token main.Token.=
Token main.Token.d_ident: true
Token main.Token.;
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: read
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.{
Token main.Token.kw_if
Token main.Token.kw_let
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: current_fonts
Token main.Token.)
Token main.Token.=
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: fonts
Token main.Token..
Token main.Token.d_ident: get
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: pixels_per_point
Token main.Token..
Token main.Token.d_ident: into
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.{
    BEFORE: // NOTE: this comparison is expensive since it checks TTF data for equality
Token main.Token.kw_if
Token main.Token.d_ident: current_fonts
Token main.Token..
Token main.Token.d_ident: lock
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: fonts
Token main.Token..
Token main.Token.d_ident: definitions
Token main.Token.(
Token main.Token.)
Token main.Token.==
Token main.Token.&
Token main.Token.d_ident: font_definitions
Token main.Token.{
Token main.Token.d_ident: update_fonts
Token main.Token.=
Token main.Token.d_ident: false
Token main.Token.;
    AFTER: // no need to update
Token main.Token.}
Token main.Token.}
Token main.Token.}
Token main.Token.)
Token main.Token.;
Token main.Token.kw_if
Token main.Token.d_ident: update_fonts
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: memory_mut
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: mem
Token main.Token.|
Token main.Token.d_ident: mem
Token main.Token..
Token main.Token.d_ident: new_font_definitions
Token main.Token.=
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: font_definitions
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.}
    BEFORE: /// The [`Style`] used by all subsequent windows, panels etc.
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: style
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: Arc
Token main.Token.<
Token main.Token.d_ident: Style
Token main.Token.>
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: options
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: opt
Token main.Token.|
Token main.Token.d_ident: opt
Token main.Token..
Token main.Token.d_ident: style
Token main.Token..
Token main.Token.d_ident: clone
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.}
    BEFORE: /// Mutate the [`Style`] used by all subsequent windows, panels etc.
    BEFORE: ///
    BEFORE: /// Example:
    BEFORE: /// ```
    BEFORE: /// # let mut ctx = egui::Context::default();
    BEFORE: /// ctx.style_mut(|style| {
    BEFORE: ///     style.spacing.item_spacing = egui::vec2(10.0, 20.0);
    BEFORE: /// });
    BEFORE: /// ```
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: style_mut
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: mutate_style
Token main.Token.:
Token main.Token.kw_impl
Token main.Token.d_ident: FnOnce
Token main.Token.(
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: Style
Token main.Token.)
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: options_mut
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: opt
Token main.Token.|
Token main.Token.d_ident: mutate_style
Token main.Token.(
Token main.Token.d_ident: std
Token main.Token.::
Token main.Token.d_ident: sync
Token main.Token.::
Token main.Token.d_ident: Arc
Token main.Token.::
Token main.Token.d_ident: make_mut
Token main.Token.(
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: opt
Token main.Token..
Token main.Token.d_ident: style
Token main.Token.)
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.}
    BEFORE: /// The [`Style`] used by all new windows, panels etc.
    BEFORE: ///
    BEFORE: /// You can also change this using [`Self::style_mut]`
    BEFORE: ///
    BEFORE: /// You can use [`Ui::style_mut`] to change the style of a single [`Ui`].
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: set_style
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: style
Token main.Token.:
Token main.Token.kw_impl
Token main.Token.d_ident: Into
Token main.Token.<
Token main.Token.d_ident: Arc
Token main.Token.<
Token main.Token.d_ident: Style
Token main.Token.>
Token main.Token.>
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: options_mut
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: opt
Token main.Token.|
Token main.Token.d_ident: opt
Token main.Token..
Token main.Token.d_ident: style
Token main.Token.=
Token main.Token.d_ident: style
Token main.Token..
Token main.Token.d_ident: into
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.}
    BEFORE: /// The [`Visuals`] used by all subsequent windows, panels etc.
    BEFORE: ///
    BEFORE: /// You can also use [`Ui::visuals_mut`] to change the visuals of a single [`Ui`].
    BEFORE: ///
    BEFORE: /// Example:
    BEFORE: /// ```
    BEFORE: /// # let mut ctx = egui::Context::default();
    BEFORE: /// ctx.set_visuals(egui::Visuals::light()); // Switch to light mode
    BEFORE: /// ```
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: set_visuals
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: visuals
Token main.Token.:
Token main.Token.d_ident: crate
Token main.Token.::
Token main.Token.d_ident: Visuals
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: options_mut
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: opt
Token main.Token.|
Token main.Token.d_ident: std
Token main.Token.::
Token main.Token.d_ident: sync
Token main.Token.::
Token main.Token.d_ident: Arc
Token main.Token.::
Token main.Token.d_ident: make_mut
Token main.Token.(
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: opt
Token main.Token..
Token main.Token.d_ident: style
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: visuals
Token main.Token.=
Token main.Token.d_ident: visuals
Token main.Token.)
Token main.Token.;
Token main.Token.}
    BEFORE: /// The number of physical pixels for each logical point.
    BEFORE: ///
    BEFORE: /// This is calculated as [`Self::zoom_factor`] * [`Self::native_pixels_per_point`]
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: inline
Token main.Token.(
Token main.Token.d_ident: always
Token main.Token.)
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: pixels_per_point
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: f32
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: input
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: i
Token main.Token.|
Token main.Token.d_ident: i
Token main.Token..
Token main.Token.d_ident: pixels_per_point
Token main.Token.)
Token main.Token.}
    BEFORE: /// Set the number of physical pixels for each logical point.
    BEFORE: /// Will become active at the start of the next frame.
    BEFORE: ///
    BEFORE: /// This will actually translate to a call to [`Self::set_zoom_factor`].
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: set_pixels_per_point
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: pixels_per_point
Token main.Token.:
Token main.Token.d_ident: f32
Token main.Token.)
Token main.Token.{
Token main.Token.kw_if
Token main.Token.d_ident: pixels_per_point
Token main.Token.!
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: pixels_per_point
Token main.Token.(
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: set_zoom_factor
Token main.Token.(
Token main.Token.d_ident: pixels_per_point
Token main.Token./
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: native_pixels_per_point
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: unwrap_or
Token main.Token.(
Token main.Token.d_number: 1.0
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.}
    BEFORE: /// The number of physical pixels for each logical point on this monitor.
    BEFORE: ///
    BEFORE: /// This is given as input to egui via [`ViewportInfo::native_pixels_per_point`]
    BEFORE: /// and cannot be changed.
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: inline
Token main.Token.(
Token main.Token.d_ident: always
Token main.Token.)
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: native_pixels_per_point
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: Option
Token main.Token.<
Token main.Token.d_ident: f32
Token main.Token.>
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: input
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: i
Token main.Token.|
Token main.Token.d_ident: i
Token main.Token..
Token main.Token.d_ident: viewport
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: native_pixels_per_point
Token main.Token.)
Token main.Token.}
    BEFORE: /// Global zoom factor of the UI.
    BEFORE: ///
    BEFORE: /// This is used to calculate the `pixels_per_point`
    BEFORE: /// for the UI as `pixels_per_point = zoom_fator * native_pixels_per_point`.
    BEFORE: ///
    BEFORE: /// The default is 1.0.
    BEFORE: /// Make larger to make everything larger.
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: inline
Token main.Token.(
Token main.Token.d_ident: always
Token main.Token.)
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: zoom_factor
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: f32
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: options
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: o
Token main.Token.|
Token main.Token.d_ident: o
Token main.Token..
Token main.Token.d_ident: zoom_factor
Token main.Token.)
Token main.Token.}
    BEFORE: /// Sets zoom factor of the UI.
    BEFORE: /// Will become active at the start of the next frame.
    BEFORE: ///
    BEFORE: /// Note that calling this will not update [`Self::zoom_factor`] until the end of the frame.
    BEFORE: ///
    BEFORE: /// This is used to calculate the `pixels_per_point`
    BEFORE: /// for the UI as `pixels_per_point = zoom_fator * native_pixels_per_point`.
    BEFORE: ///
    BEFORE: /// The default is 1.0.
    BEFORE: /// Make larger to make everything larger.
    BEFORE: ///
    BEFORE: /// It is better to call this than modifying
    BEFORE: /// [`Options::zoom_factor`].
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: inline
Token main.Token.(
Token main.Token.d_ident: always
Token main.Token.)
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: set_zoom_factor
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: zoom_factor
Token main.Token.:
Token main.Token.d_ident: f32
Token main.Token.)
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: cause
Token main.Token.=
Token main.Token.d_ident: RepaintCause
Token main.Token.::
Token main.Token.d_ident: new
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.{
Token main.Token.kw_if
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: memory
Token main.Token..
Token main.Token.d_ident: options
Token main.Token..
Token main.Token.d_ident: zoom_factor
Token main.Token.!
Token main.Token.=
Token main.Token.d_ident: zoom_factor
Token main.Token.{
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: new_zoom_factor
Token main.Token.=
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: zoom_factor
Token main.Token.)
Token main.Token.;
Token main.Token.kw_for
Token main.Token.d_ident: viewport_id
Token main.Token.kw_in
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: all_viewport_ids
Token main.Token.(
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: request_repaint
Token main.Token.(
Token main.Token.d_ident: viewport_id
Token main.Token.,
Token main.Token.d_ident: cause
Token main.Token..
Token main.Token.d_ident: clone
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.}
Token main.Token.}
Token main.Token.)
Token main.Token.;
Token main.Token.}
    BEFORE: /// Useful for pixel-perfect rendering
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: inline
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.(
Token main.Token.d_ident: crate
Token main.Token.)
Token main.Token.kw_fn
Token main.Token.d_ident: round_to_pixel
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: point
Token main.Token.:
Token main.Token.d_ident: f32
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: f32
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: pixels_per_point
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: pixels_per_point
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.(
Token main.Token.d_ident: point
Token main.Token.*
Token main.Token.d_ident: pixels_per_point
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: round
Token main.Token.(
Token main.Token.)
Token main.Token./
Token main.Token.d_ident: pixels_per_point
Token main.Token.}
    BEFORE: /// Useful for pixel-perfect rendering
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: inline
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.(
Token main.Token.d_ident: crate
Token main.Token.)
Token main.Token.kw_fn
Token main.Token.d_ident: round_pos_to_pixels
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: pos
Token main.Token.:
Token main.Token.d_ident: Pos2
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: Pos2
Token main.Token.{
Token main.Token.d_ident: pos2
Token main.Token.(
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: round_to_pixel
Token main.Token.(
Token main.Token.d_ident: pos
Token main.Token..
Token main.Token.d_ident: x
Token main.Token.)
Token main.Token.,
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: round_to_pixel
Token main.Token.(
Token main.Token.d_ident: pos
Token main.Token..
Token main.Token.d_ident: y
Token main.Token.)
Token main.Token.)
Token main.Token.}
    BEFORE: /// Useful for pixel-perfect rendering
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: inline
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.(
Token main.Token.d_ident: crate
Token main.Token.)
Token main.Token.kw_fn
Token main.Token.d_ident: round_vec_to_pixels
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: vec
Token main.Token.:
Token main.Token.d_ident: Vec2
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: Vec2
Token main.Token.{
Token main.Token.d_ident: vec2
Token main.Token.(
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: round_to_pixel
Token main.Token.(
Token main.Token.d_ident: vec
Token main.Token..
Token main.Token.d_ident: x
Token main.Token.)
Token main.Token.,
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: round_to_pixel
Token main.Token.(
Token main.Token.d_ident: vec
Token main.Token..
Token main.Token.d_ident: y
Token main.Token.)
Token main.Token.)
Token main.Token.}
    BEFORE: /// Useful for pixel-perfect rendering
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: inline
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.(
Token main.Token.d_ident: crate
Token main.Token.)
Token main.Token.kw_fn
Token main.Token.d_ident: round_rect_to_pixels
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: rect
Token main.Token.:
Token main.Token.d_ident: Rect
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: Rect
Token main.Token.{
Token main.Token.d_ident: Rect
Token main.Token.{
Token main.Token.d_ident: min
Token main.Token.:
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: round_pos_to_pixels
Token main.Token.(
Token main.Token.d_ident: rect
Token main.Token..
Token main.Token.d_ident: min
Token main.Token.)
Token main.Token.,
Token main.Token.d_ident: max
Token main.Token.:
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: round_pos_to_pixels
Token main.Token.(
Token main.Token.d_ident: rect
Token main.Token..
Token main.Token.d_ident: max
Token main.Token.)
Token main.Token.,
Token main.Token.}
Token main.Token.}
    BEFORE: /// Allocate a texture.
    BEFORE: ///
    BEFORE: /// This is for advanced users.
    BEFORE: /// Most users should use [`crate::Ui::image`] or [`Self::try_load_texture`]
    BEFORE: /// instead.
    BEFORE: ///
    BEFORE: /// In order to display an image you must convert it to a texture using this function.
    BEFORE: /// The function will hand over the image data to the egui backend, which will
    BEFORE: /// upload it to the GPU.
    BEFORE: ///
    BEFORE: /// ⚠️ Make sure to only call this ONCE for each image, i.e. NOT in your main GUI code.
    BEFORE: /// The call is NOT immediate safe.
    BEFORE: ///
    BEFORE: /// The given name can be useful for later debugging, and will be visible if you call [`Self::texture_ui`].
    BEFORE: ///
    BEFORE: /// For how to load an image, see [`ImageData`] and [`ColorImage::from_rgba_unmultiplied`].
    BEFORE: ///
    BEFORE: /// ```
    BEFORE: /// struct MyImage {
    BEFORE: ///     texture: Option<egui::TextureHandle>,
    BEFORE: /// }
    BEFORE: ///
    BEFORE: /// impl MyImage {
    BEFORE: ///     fn ui(&mut self, ui: &mut egui::Ui) {
    BEFORE: ///         let texture: &egui::TextureHandle = self.texture.get_or_insert_with(|| {
    BEFORE: ///             // Load the texture only once.
    BEFORE: ///             ui.ctx().load_texture(
    BEFORE: ///                 "my-image",
    BEFORE: ///                 egui::ColorImage::example(),
    BEFORE: ///                 Default::default()
    BEFORE: ///             )
    BEFORE: ///         });
    BEFORE: ///
    BEFORE: ///         // Show the image:
    BEFORE: ///         ui.image((texture.id(), texture.size_vec2()));
    BEFORE: ///     }
    BEFORE: /// }
    BEFORE: /// ```
    BEFORE: ///
    BEFORE: /// See also [`crate::ImageData`], [`crate::Ui::image`] and [`crate::Image`].
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: load_texture
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: name
Token main.Token.:
Token main.Token.kw_impl
Token main.Token.d_ident: Into
Token main.Token.<
Token main.Token.d_ident: String
Token main.Token.>
Token main.Token.,
Token main.Token.d_ident: image
Token main.Token.:
Token main.Token.kw_impl
Token main.Token.d_ident: Into
Token main.Token.<
Token main.Token.d_ident: ImageData
Token main.Token.>
Token main.Token.,
Token main.Token.d_ident: options
Token main.Token.:
Token main.Token.d_ident: TextureOptions
Token main.Token.,
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: TextureHandle
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: name
Token main.Token.=
Token main.Token.d_ident: name
Token main.Token..
Token main.Token.d_ident: into
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: image
Token main.Token.=
Token main.Token.d_ident: image
Token main.Token..
Token main.Token.d_ident: into
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: max_texture_side
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: input
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: i
Token main.Token.|
Token main.Token.d_ident: i
Token main.Token..
Token main.Token.d_ident: max_texture_side
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: crate
Token main.Token.::
Token main.Token.d_ident: egui_assert
Token main.Token.!
Token main.Token.(
Token main.Token.d_ident: image
Token main.Token..
Token main.Token.d_ident: width
Token main.Token.(
Token main.Token.)
Token main.Token.<=
Token main.Token.d_ident: max_texture_side
Token main.Token.&
Token main.Token.&
Token main.Token.d_ident: image
Token main.Token..
Token main.Token.d_ident: height
Token main.Token.(
Token main.Token.)
Token main.Token.<=
Token main.Token.d_ident: max_texture_side
Token main.Token.,
Token main.Token.d_string: "Texture {:?} has size {}x{}, but the maximum texture side is {}"
Token main.Token.,
Token main.Token.d_ident: name
Token main.Token.,
Token main.Token.d_ident: image
Token main.Token..
Token main.Token.d_ident: width
Token main.Token.(
Token main.Token.)
Token main.Token.,
Token main.Token.d_ident: image
Token main.Token..
Token main.Token.d_ident: height
Token main.Token.(
Token main.Token.)
Token main.Token.,
Token main.Token.d_ident: max_texture_side
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: tex_mngr
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: tex_manager
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: tex_id
Token main.Token.=
Token main.Token.d_ident: tex_mngr
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: alloc
Token main.Token.(
Token main.Token.d_ident: name
Token main.Token.,
Token main.Token.d_ident: image
Token main.Token.,
Token main.Token.d_ident: options
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: TextureHandle
Token main.Token.::
Token main.Token.d_ident: new
Token main.Token.(
Token main.Token.d_ident: tex_mngr
Token main.Token.,
Token main.Token.d_ident: tex_id
Token main.Token.)
Token main.Token.}
    BEFORE: /// Low-level texture manager.
    BEFORE: ///
    BEFORE: /// In general it is easier to use [`Self::load_texture`] and [`TextureHandle`].
    BEFORE: ///
    BEFORE: /// You can show stats about the allocated textures using [`Self::texture_ui`].
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: tex_manager
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: Arc
Token main.Token.<
Token main.Token.d_ident: RwLock
Token main.Token.<
Token main.Token.d_ident: epaint
Token main.Token.::
Token main.Token.d_ident: textures
Token main.Token.::
Token main.Token.d_ident: TextureManager
Token main.Token.>
Token main.Token.>
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: read
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: tex_manager
Token main.Token..
Token main.Token.d_number: 0
Token main.Token..
Token main.Token.d_ident: clone
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.}
    BEFORE: // ---------------------------------------------------------------------
    BEFORE: /// Constrain the position of a window/area so it fits within the provided boundary.
    BEFORE: ///
    BEFORE: /// If area is `None`, will constrain to [`Self::available_rect`].
Token main.Token.kw_pub
Token main.Token.(
Token main.Token.d_ident: crate
Token main.Token.)
Token main.Token.kw_fn
Token main.Token.d_ident: constrain_window_rect_to_area
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: window
Token main.Token.:
Token main.Token.d_ident: Rect
Token main.Token.,
Token main.Token.d_ident: area
Token main.Token.:
Token main.Token.d_ident: Option
Token main.Token.<
Token main.Token.d_ident: Rect
Token main.Token.>
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: Rect
Token main.Token.{
Token main.Token.kw_let
Token main.Token.kw_mut
Token main.Token.d_ident: area
Token main.Token.=
Token main.Token.d_ident: area
Token main.Token..
Token main.Token.d_ident: unwrap_or_else
Token main.Token.(
Token main.Token.|
Token main.Token.|
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: available_rect
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.kw_if
Token main.Token.d_ident: window
Token main.Token..
Token main.Token.d_ident: width
Token main.Token.(
Token main.Token.)
Token main.Token.>
Token main.Token.d_ident: area
Token main.Token..
Token main.Token.d_ident: width
Token main.Token.(
Token main.Token.)
Token main.Token.{
    BEFORE: // Allow overlapping side bars.
    BEFORE: // This is important for small screens, e.g. mobiles running the web demo.
Token main.Token.kw_let
Token main.Token.d_ident: screen_rect
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: screen_rect
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.(
Token main.Token.d_ident: area
Token main.Token..
Token main.Token.d_ident: min
Token main.Token..
Token main.Token.d_ident: x
Token main.Token.,
Token main.Token.d_ident: area
Token main.Token..
Token main.Token.d_ident: max
Token main.Token..
Token main.Token.d_ident: x
Token main.Token.)
Token main.Token.=
Token main.Token.(
Token main.Token.d_ident: screen_rect
Token main.Token..
Token main.Token.d_ident: min
Token main.Token..
Token main.Token.d_ident: x
Token main.Token.,
Token main.Token.d_ident: screen_rect
Token main.Token..
Token main.Token.d_ident: max
Token main.Token..
Token main.Token.d_ident: x
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.kw_if
Token main.Token.d_ident: window
Token main.Token..
Token main.Token.d_ident: height
Token main.Token.(
Token main.Token.)
Token main.Token.>
Token main.Token.d_ident: area
Token main.Token..
Token main.Token.d_ident: height
Token main.Token.(
Token main.Token.)
Token main.Token.{
    BEFORE: // Allow overlapping top/bottom bars:
Token main.Token.kw_let
Token main.Token.d_ident: screen_rect
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: screen_rect
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.(
Token main.Token.d_ident: area
Token main.Token..
Token main.Token.d_ident: min
Token main.Token..
Token main.Token.d_ident: y
Token main.Token.,
Token main.Token.d_ident: area
Token main.Token..
Token main.Token.d_ident: max
Token main.Token..
Token main.Token.d_ident: y
Token main.Token.)
Token main.Token.=
Token main.Token.(
Token main.Token.d_ident: screen_rect
Token main.Token..
Token main.Token.d_ident: min
Token main.Token..
Token main.Token.d_ident: y
Token main.Token.,
Token main.Token.d_ident: screen_rect
Token main.Token..
Token main.Token.d_ident: max
Token main.Token..
Token main.Token.d_ident: y
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.kw_let
Token main.Token.kw_mut
Token main.Token.d_ident: pos
Token main.Token.=
Token main.Token.d_ident: window
Token main.Token..
Token main.Token.d_ident: min
Token main.Token.;
    BEFORE: // Constrain to screen, unless window is too large to fit:
Token main.Token.kw_let
Token main.Token.d_ident: margin_x
Token main.Token.=
Token main.Token.(
Token main.Token.d_ident: window
Token main.Token..
Token main.Token.d_ident: width
Token main.Token.(
Token main.Token.)
Token main.Token.-
Token main.Token.d_ident: area
Token main.Token..
Token main.Token.d_ident: width
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: at_least
Token main.Token.(
Token main.Token.d_number: 0.0
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: margin_y
Token main.Token.=
Token main.Token.(
Token main.Token.d_ident: window
Token main.Token..
Token main.Token.d_ident: height
Token main.Token.(
Token main.Token.)
Token main.Token.-
Token main.Token.d_ident: area
Token main.Token..
Token main.Token.d_ident: height
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: at_least
Token main.Token.(
Token main.Token.d_number: 0.0
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: pos
Token main.Token..
Token main.Token.d_ident: x
Token main.Token.=
Token main.Token.d_ident: pos
Token main.Token..
Token main.Token.d_ident: x
Token main.Token..
Token main.Token.d_ident: at_most
Token main.Token.(
Token main.Token.d_ident: area
Token main.Token..
Token main.Token.d_ident: right
Token main.Token.(
Token main.Token.)
Token main.Token.+
Token main.Token.d_ident: margin_x
Token main.Token.-
Token main.Token.d_ident: window
Token main.Token..
Token main.Token.d_ident: width
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.;
    AFTER: // move left if needed
Token main.Token.d_ident: pos
Token main.Token..
Token main.Token.d_ident: x
Token main.Token.=
Token main.Token.d_ident: pos
Token main.Token..
Token main.Token.d_ident: x
Token main.Token..
Token main.Token.d_ident: at_least
Token main.Token.(
Token main.Token.d_ident: area
Token main.Token..
Token main.Token.d_ident: left
Token main.Token.(
Token main.Token.)
Token main.Token.-
Token main.Token.d_ident: margin_x
Token main.Token.)
Token main.Token.;
    AFTER: // move right if needed
Token main.Token.d_ident: pos
Token main.Token..
Token main.Token.d_ident: y
Token main.Token.=
Token main.Token.d_ident: pos
Token main.Token..
Token main.Token.d_ident: y
Token main.Token..
Token main.Token.d_ident: at_most
Token main.Token.(
Token main.Token.d_ident: area
Token main.Token..
Token main.Token.d_ident: bottom
Token main.Token.(
Token main.Token.)
Token main.Token.+
Token main.Token.d_ident: margin_y
Token main.Token.-
Token main.Token.d_ident: window
Token main.Token..
Token main.Token.d_ident: height
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.;
    AFTER: // move right if needed
Token main.Token.d_ident: pos
Token main.Token..
Token main.Token.d_ident: y
Token main.Token.=
Token main.Token.d_ident: pos
Token main.Token..
Token main.Token.d_ident: y
Token main.Token..
Token main.Token.d_ident: at_least
Token main.Token.(
Token main.Token.d_ident: area
Token main.Token..
Token main.Token.d_ident: top
Token main.Token.(
Token main.Token.)
Token main.Token.-
Token main.Token.d_ident: margin_y
Token main.Token.)
Token main.Token.;
    AFTER: // move down if needed
Token main.Token.d_ident: pos
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: round_pos_to_pixels
Token main.Token.(
Token main.Token.d_ident: pos
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: Rect
Token main.Token.::
Token main.Token.d_ident: from_min_size
Token main.Token.(
Token main.Token.d_ident: pos
Token main.Token.,
Token main.Token.d_ident: window
Token main.Token..
Token main.Token.d_ident: size
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.}
Token main.Token.}
Token main.Token.kw_impl
Token main.Token.d_ident: Context
Token main.Token.{
    BEFORE: /// Call at the end of each frame.
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: must_use
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: end_frame
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: FullOutput
Token main.Token.{
Token main.Token.d_ident: crate
Token main.Token.::
Token main.Token.d_ident: profile_function
Token main.Token.!
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_if
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: options
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: o
Token main.Token.|
Token main.Token.d_ident: o
Token main.Token..
Token main.Token.d_ident: zoom_with_keyboard
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: crate
Token main.Token.::
Token main.Token.d_ident: gui_zoom
Token main.Token.::
Token main.Token.d_ident: zoom_with_keyboard
Token main.Token.(
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: read
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: plugins
Token main.Token..
Token main.Token.d_ident: clone
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: on_end_frame
Token main.Token.(
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.;
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: cfg
Token main.Token.(
Token main.Token.d_ident: debug_assertions
Token main.Token.)
Token main.Token.]
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: debug_painting
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: end_frame
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.}
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: cfg
Token main.Token.(
Token main.Token.d_ident: debug_assertions
Token main.Token.)
Token main.Token.]
Token main.Token.kw_fn
Token main.Token.d_ident: debug_painting
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: paint_widget
Token main.Token.=
Token main.Token.|
Token main.Token.d_ident: widget
Token main.Token.:
Token main.Token.&
Token main.Token.d_ident: WidgetRect
Token main.Token.,
Token main.Token.d_ident: text
Token main.Token.:
Token main.Token.&
Token main.Token.d_ident: str
Token main.Token.,
Token main.Token.d_ident: color
Token main.Token.:
Token main.Token.d_ident: Color32
Token main.Token.|
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: rect
Token main.Token.=
Token main.Token.d_ident: widget
Token main.Token..
Token main.Token.d_ident: interact_rect
Token main.Token.;
Token main.Token.kw_if
Token main.Token.d_ident: rect
Token main.Token..
Token main.Token.d_ident: is_positive
Token main.Token.(
Token main.Token.)
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: painter
Token main.Token.=
Token main.Token.d_ident: Painter
Token main.Token.::
Token main.Token.d_ident: new
Token main.Token.(
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: clone
Token main.Token.(
Token main.Token.)
Token main.Token.,
Token main.Token.d_ident: widget
Token main.Token..
Token main.Token.d_ident: layer_id
Token main.Token.,
Token main.Token.d_ident: Rect
Token main.Token.::
Token main.Token.d_ident: EVERYTHING
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: painter
Token main.Token..
Token main.Token.d_ident: debug_rect
Token main.Token.(
Token main.Token.d_ident: rect
Token main.Token.,
Token main.Token.d_ident: color
Token main.Token.,
Token main.Token.d_ident: text
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.}
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: paint_widget_id
Token main.Token.=
Token main.Token.|
Token main.Token.d_ident: id
Token main.Token.:
Token main.Token.d_ident: Id
Token main.Token.,
Token main.Token.d_ident: text
Token main.Token.:
Token main.Token.&
Token main.Token.d_ident: str
Token main.Token.,
Token main.Token.d_ident: color
Token main.Token.:
Token main.Token.d_ident: Color32
Token main.Token.|
Token main.Token.{
Token main.Token.kw_if
Token main.Token.kw_let
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: widget
Token main.Token.)
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: viewport
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: widgets_this_frame
Token main.Token..
Token main.Token.d_ident: get
Token main.Token.(
Token main.Token.d_ident: id
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: cloned
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: paint_widget
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: widget
Token main.Token.,
Token main.Token.d_ident: text
Token main.Token.,
Token main.Token.d_ident: color
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.}
Token main.Token.;
Token main.Token.kw_if
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: style
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: debug
Token main.Token..
Token main.Token.d_ident: show_interactive_widgets
Token main.Token.{
    BEFORE: // Show all interactive widgets:
Token main.Token.kw_let
Token main.Token.d_ident: rects
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: viewport
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: widgets_this_frame
Token main.Token..
Token main.Token.d_ident: clone
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.kw_for
Token main.Token.(
Token main.Token.d_ident: layer_id
Token main.Token.,
Token main.Token.d_ident: rects
Token main.Token.)
Token main.Token.kw_in
Token main.Token.d_ident: rects
Token main.Token..
Token main.Token.d_ident: layers
Token main.Token.(
Token main.Token.)
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: painter
Token main.Token.=
Token main.Token.d_ident: Painter
Token main.Token.::
Token main.Token.d_ident: new
Token main.Token.(
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: clone
Token main.Token.(
Token main.Token.)
Token main.Token.,
Token main.Token.*
Token main.Token.d_ident: layer_id
Token main.Token.,
Token main.Token.d_ident: Rect
Token main.Token.::
Token main.Token.d_ident: EVERYTHING
Token main.Token.)
Token main.Token.;
Token main.Token.kw_for
Token main.Token.d_ident: rect
Token main.Token.kw_in
Token main.Token.d_ident: rects
Token main.Token.{
Token main.Token.kw_if
Token main.Token.d_ident: rect
Token main.Token..
Token main.Token.d_ident: sense
Token main.Token..
Token main.Token.d_ident: interactive
Token main.Token.(
Token main.Token.)
Token main.Token.{
Token main.Token.kw_let
Token main.Token.(
Token main.Token.d_ident: color
Token main.Token.,
Token main.Token.d_ident: text
Token main.Token.)
Token main.Token.=
Token main.Token.kw_if
Token main.Token.d_ident: rect
Token main.Token..
Token main.Token.d_ident: sense
Token main.Token..
Token main.Token.d_ident: click
Token main.Token.&
Token main.Token.&
Token main.Token.d_ident: rect
Token main.Token..
Token main.Token.d_ident: sense
Token main.Token..
Token main.Token.d_ident: drag
Token main.Token.{
Token main.Token.(
Token main.Token.d_ident: Color32
Token main.Token.::
Token main.Token.d_ident: from_rgb
Token main.Token.(
Token main.Token.d_number: 0
Token main.Token.d_ident: x88
Token main.Token.,
Token main.Token.d_number: 0
Token main.Token.,
Token main.Token.d_number: 0
Token main.Token.d_ident: x88
Token main.Token.)
Token main.Token.,
Token main.Token.d_string: "click+drag"
Token main.Token.)
Token main.Token.}
Token main.Token.kw_else
Token main.Token.kw_if
Token main.Token.d_ident: rect
Token main.Token..
Token main.Token.d_ident: sense
Token main.Token..
Token main.Token.d_ident: click
Token main.Token.{
Token main.Token.(
Token main.Token.d_ident: Color32
Token main.Token.::
Token main.Token.d_ident: from_rgb
Token main.Token.(
Token main.Token.d_number: 0
Token main.Token.d_ident: x88
Token main.Token.,
Token main.Token.d_number: 0
Token main.Token.,
Token main.Token.d_number: 0
Token main.Token.)
Token main.Token.,
Token main.Token.d_string: "click"
Token main.Token.)
Token main.Token.}
Token main.Token.kw_else
Token main.Token.kw_if
Token main.Token.d_ident: rect
Token main.Token..
Token main.Token.d_ident: sense
Token main.Token..
Token main.Token.d_ident: drag
Token main.Token.{
Token main.Token.(
Token main.Token.d_ident: Color32
Token main.Token.::
Token main.Token.d_ident: from_rgb
Token main.Token.(
Token main.Token.d_number: 0
Token main.Token.,
Token main.Token.d_number: 0
Token main.Token.,
Token main.Token.d_number: 0
Token main.Token.d_ident: x88
Token main.Token.)
Token main.Token.,
Token main.Token.d_string: "drag"
Token main.Token.)
Token main.Token.}
Token main.Token.kw_else
Token main.Token.{
Token main.Token.d_ident: continue
Token main.Token.;
    BEFORE: // (Color32::from_rgb(0, 0, 0x88), "hover")
Token main.Token.}
Token main.Token.;
Token main.Token.d_ident: painter
Token main.Token..
Token main.Token.d_ident: debug_rect
Token main.Token.(
Token main.Token.d_ident: rect
Token main.Token..
Token main.Token.d_ident: interact_rect
Token main.Token.,
Token main.Token.d_ident: color
Token main.Token.,
Token main.Token.d_ident: text
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.}
Token main.Token.}
    BEFORE: // Show the ones actually interacted with:
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: interact_widgets
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: viewport
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: interact_widgets
Token main.Token..
Token main.Token.d_ident: clone
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: InteractionSnapshot
Token main.Token.{
Token main.Token.d_ident: clicked
Token main.Token.,
Token main.Token.d_ident: drag_started
Token main.Token.:
Token main.Token.d_ident: _
Token main.Token.,
Token main.Token.d_ident: dragged
Token main.Token.,
Token main.Token.d_ident: drag_stopped
Token main.Token.:
Token main.Token.d_ident: _
Token main.Token.,
Token main.Token.d_ident: contains_pointer
Token main.Token.,
Token main.Token.d_ident: hovered
Token main.Token.,
Token main.Token.}
Token main.Token.=
Token main.Token.d_ident: interact_widgets
Token main.Token.;
Token main.Token.kw_if
Token main.Token.d_ident: false
Token main.Token.{
Token main.Token.kw_for
Token main.Token.d_ident: widget
Token main.Token.kw_in
Token main.Token.d_ident: contains_pointer
Token main.Token.{
Token main.Token.d_ident: paint_widget_id
Token main.Token.(
Token main.Token.d_ident: widget
Token main.Token.,
Token main.Token.d_string: "contains_pointer"
Token main.Token.,
Token main.Token.d_ident: Color32
Token main.Token.::
Token main.Token.d_ident: BLUE
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.}
Token main.Token.kw_if
Token main.Token.d_ident: true
Token main.Token.{
Token main.Token.kw_for
Token main.Token.d_ident: widget
Token main.Token.kw_in
Token main.Token.d_ident: hovered
Token main.Token.{
Token main.Token.d_ident: paint_widget_id
Token main.Token.(
Token main.Token.d_ident: widget
Token main.Token.,
Token main.Token.d_string: "hovered"
Token main.Token.,
Token main.Token.d_ident: Color32
Token main.Token.::
Token main.Token.d_ident: WHITE
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.}
Token main.Token.kw_for
Token main.Token.&
Token main.Token.d_ident: widget
Token main.Token.kw_in
Token main.Token.&
Token main.Token.d_ident: clicked
Token main.Token.{
Token main.Token.d_ident: paint_widget_id
Token main.Token.(
Token main.Token.d_ident: widget
Token main.Token.,
Token main.Token.d_string: "clicked"
Token main.Token.,
Token main.Token.d_ident: Color32
Token main.Token.::
Token main.Token.d_ident: RED
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.kw_for
Token main.Token.&
Token main.Token.d_ident: widget
Token main.Token.kw_in
Token main.Token.&
Token main.Token.d_ident: dragged
Token main.Token.{
Token main.Token.d_ident: paint_widget_id
Token main.Token.(
Token main.Token.d_ident: widget
Token main.Token.,
Token main.Token.d_string: "dragged"
Token main.Token.,
Token main.Token.d_ident: Color32
Token main.Token.::
Token main.Token.d_ident: GREEN
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.}
Token main.Token.}
Token main.Token.kw_if
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: style
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: debug
Token main.Token..
Token main.Token.d_ident: show_widget_hits
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: hits
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: viewport
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: hits
Token main.Token..
Token main.Token.d_ident: clone
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: WidgetHits
Token main.Token.{
Token main.Token.d_ident: contains_pointer
Token main.Token.,
Token main.Token.d_ident: click
Token main.Token.,
Token main.Token.d_ident: drag
Token main.Token.,
Token main.Token.}
Token main.Token.=
Token main.Token.d_ident: hits
Token main.Token.;
Token main.Token.kw_if
Token main.Token.d_ident: false
Token main.Token.{
Token main.Token.kw_for
Token main.Token.d_ident: widget
Token main.Token.kw_in
Token main.Token.&
Token main.Token.d_ident: contains_pointer
Token main.Token.{
Token main.Token.d_ident: paint_widget
Token main.Token.(
Token main.Token.d_ident: widget
Token main.Token.,
Token main.Token.d_string: "contains_pointer"
Token main.Token.,
Token main.Token.d_ident: Color32
Token main.Token.::
Token main.Token.d_ident: BLUE
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.}
Token main.Token.kw_for
Token main.Token.d_ident: widget
Token main.Token.kw_in
Token main.Token.&
Token main.Token.d_ident: click
Token main.Token.{
Token main.Token.d_ident: paint_widget
Token main.Token.(
Token main.Token.d_ident: widget
Token main.Token.,
Token main.Token.d_string: "click"
Token main.Token.,
Token main.Token.d_ident: Color32
Token main.Token.::
Token main.Token.d_ident: RED
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.kw_for
Token main.Token.d_ident: widget
Token main.Token.kw_in
Token main.Token.&
Token main.Token.d_ident: drag
Token main.Token.{
Token main.Token.d_ident: paint_widget
Token main.Token.(
Token main.Token.d_ident: widget
Token main.Token.,
Token main.Token.d_string: "drag"
Token main.Token.,
Token main.Token.d_ident: Color32
Token main.Token.::
Token main.Token.d_ident: GREEN
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.}
Token main.Token.}
Token main.Token.}
Token main.Token.kw_impl
Token main.Token.d_ident: ContextImpl
Token main.Token.{
Token main.Token.kw_fn
Token main.Token.d_ident: end_frame
Token main.Token.(
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: FullOutput
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: ended_viewport_id
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: viewport_id
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: viewport
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: viewports
Token main.Token..
Token main.Token.d_ident: entry
Token main.Token.(
Token main.Token.d_ident: ended_viewport_id
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: or_default
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: pixels_per_point
Token main.Token.=
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: input
Token main.Token..
Token main.Token.d_ident: pixels_per_point
Token main.Token.;
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: repaint
Token main.Token..
Token main.Token.d_ident: frame_nr
Token main.Token.+
Token main.Token.=
Token main.Token.d_number: 1
Token main.Token.;
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: memory
Token main.Token..
Token main.Token.d_ident: end_frame
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: frame_state
Token main.Token..
Token main.Token.d_ident: used_ids
Token main.Token.)
Token main.Token.;
Token main.Token.kw_if
Token main.Token.kw_let
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: fonts
Token main.Token.)
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: fonts
Token main.Token..
Token main.Token.d_ident: get
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: pixels_per_point
Token main.Token..
Token main.Token.d_ident: into
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: tex_mngr
Token main.Token.=
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: tex_manager
Token main.Token..
Token main.Token.d_number: 0
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_if
Token main.Token.kw_let
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: font_image_delta
Token main.Token.)
Token main.Token.=
Token main.Token.d_ident: fonts
Token main.Token..
Token main.Token.d_ident: font_image_delta
Token main.Token.(
Token main.Token.)
Token main.Token.{
    BEFORE: // A partial font atlas update, e.g. a new glyph has been entered.
Token main.Token.d_ident: tex_mngr
Token main.Token..
Token main.Token.d_ident: set
Token main.Token.(
Token main.Token.d_ident: TextureId
Token main.Token.::
Token main.Token.d_ident: default
Token main.Token.(
Token main.Token.)
Token main.Token.,
Token main.Token.d_ident: font_image_delta
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.kw_if
Token main.Token.d_number: 1
Token main.Token.<
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: fonts
Token main.Token..
Token main.Token.d_ident: len
Token main.Token.(
Token main.Token.)
Token main.Token.{
    BEFORE: // We have multiple different `pixels_per_point`,
    BEFORE: // e.g. because we have many viewports spread across
    BEFORE: // monitors with different DPI scaling.
    BEFORE: // All viewports share the same texture namespace and renderer,
    BEFORE: // so the all use `TextureId::default()` for the font texture.
    BEFORE: // This is a problem.
    BEFORE: // We solve this with a hack: we always upload the full font atlas
    BEFORE: // every frame, for all viewports.
    BEFORE: // This ensures it is up-to-date, solving
    BEFORE: // https://github.com/emilk/egui/issues/3664
    BEFORE: // at the cost of a lot of performance.
    BEFORE: // (This will override any smaller delta that was uploaded above.)
Token main.Token.d_ident: crate
Token main.Token.::
Token main.Token.d_ident: profile_scope
Token main.Token.!
Token main.Token.(
Token main.Token.d_string: "full_font_atlas_update"
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: full_delta
Token main.Token.=
Token main.Token.d_ident: ImageDelta
Token main.Token.::
Token main.Token.d_ident: full
Token main.Token.(
Token main.Token.d_ident: fonts
Token main.Token..
Token main.Token.d_ident: image
Token main.Token.(
Token main.Token.)
Token main.Token.,
Token main.Token.d_ident: TextureAtlas
Token main.Token.::
Token main.Token.d_ident: texture_options
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: tex_mngr
Token main.Token..
Token main.Token.d_ident: set
Token main.Token.(
Token main.Token.d_ident: TextureId
Token main.Token.::
Token main.Token.d_ident: default
Token main.Token.(
Token main.Token.)
Token main.Token.,
Token main.Token.d_ident: full_delta
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.}
    BEFORE: // Inform the backend of all textures that have been updated (including font atlas).
Token main.Token.kw_let
Token main.Token.d_ident: textures_delta
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: tex_manager
Token main.Token..
Token main.Token.d_number: 0
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: take_delta
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: cfg_attr
Token main.Token.(
Token main.Token.d_ident: not
Token main.Token.(
Token main.Token.d_ident: feature
Token main.Token.=
Token main.Token.d_string: "accesskit"
Token main.Token.)
Token main.Token.,
Token main.Token.d_ident: allow
Token main.Token.(
Token main.Token.d_ident: unused_mut
Token main.Token.)
Token main.Token.)
Token main.Token.]
Token main.Token.kw_let
Token main.Token.kw_mut
Token main.Token.d_ident: platform_output
Token main.Token.:
Token main.Token.d_ident: PlatformOutput
Token main.Token.=
Token main.Token.d_ident: std
Token main.Token.::
Token main.Token.d_ident: mem
Token main.Token.::
Token main.Token.d_ident: take
Token main.Token.(
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: output
Token main.Token.)
Token main.Token.;
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: cfg
Token main.Token.(
Token main.Token.d_ident: feature
Token main.Token.=
Token main.Token.d_string: "accesskit"
Token main.Token.)
Token main.Token.]
Token main.Token.{
Token main.Token.d_ident: crate
Token main.Token.::
Token main.Token.d_ident: profile_scope
Token main.Token.!
Token main.Token.(
Token main.Token.d_string: "accesskit"
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: state
Token main.Token.=
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: frame_state
Token main.Token..
Token main.Token.d_ident: accesskit_state
Token main.Token..
Token main.Token.d_ident: take
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_if
Token main.Token.kw_let
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: state
Token main.Token.)
Token main.Token.=
Token main.Token.d_ident: state
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: root_id
Token main.Token.=
Token main.Token.d_ident: crate
Token main.Token.::
Token main.Token.d_ident: accesskit_root_id
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: accesskit_id
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: nodes
Token main.Token.=
Token main.Token.{
Token main.Token.d_ident: state
Token main.Token..
Token main.Token.d_ident: node_builders
Token main.Token..
Token main.Token.d_ident: into_iter
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: map
Token main.Token.(
Token main.Token.|
Token main.Token.(
Token main.Token.d_ident: id
Token main.Token.,
Token main.Token.d_ident: builder
Token main.Token.)
Token main.Token.|
Token main.Token.{
Token main.Token.(
Token main.Token.d_ident: id
Token main.Token..
Token main.Token.d_ident: accesskit_id
Token main.Token.(
Token main.Token.)
Token main.Token.,
Token main.Token.d_ident: builder
Token main.Token..
Token main.Token.d_ident: build
Token main.Token.(
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: accesskit_node_classes
Token main.Token.)
Token main.Token.,
Token main.Token.)
Token main.Token.}
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: collect
Token main.Token.(
Token main.Token.)
Token main.Token.}
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: focus_id
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: memory
Token main.Token..
Token main.Token.d_ident: focus
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: map_or
Token main.Token.(
Token main.Token.d_ident: root_id
Token main.Token.,
Token main.Token.|
Token main.Token.d_ident: id
Token main.Token.|
Token main.Token.d_ident: id
Token main.Token..
Token main.Token.d_ident: accesskit_id
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: platform_output
Token main.Token..
Token main.Token.d_ident: accesskit_update
Token main.Token.=
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: accesskit
Token main.Token.::
Token main.Token.d_ident: TreeUpdate
Token main.Token.{
Token main.Token.d_ident: nodes
Token main.Token.,
Token main.Token.d_ident: tree
Token main.Token.:
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: accesskit
Token main.Token.::
Token main.Token.d_ident: Tree
Token main.Token.::
Token main.Token.d_ident: new
Token main.Token.(
Token main.Token.d_ident: root_id
Token main.Token.)
Token main.Token.)
Token main.Token.,
Token main.Token.d_ident: focus
Token main.Token.:
Token main.Token.d_ident: focus_id
Token main.Token.,
Token main.Token.}
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.}
Token main.Token.kw_let
Token main.Token.d_ident: shapes
Token main.Token.=
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: graphics
Token main.Token..
Token main.Token.d_ident: drain
Token main.Token.(
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: memory
Token main.Token..
Token main.Token.d_ident: areas
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: order
Token main.Token.(
Token main.Token.)
Token main.Token.,
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: memory
Token main.Token..
Token main.Token.d_ident: layer_transforms
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.kw_mut
Token main.Token.d_ident: repaint_needed
Token main.Token.=
Token main.Token.d_ident: false
Token main.Token.;
Token main.Token.{
Token main.Token.kw_if
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: memory
Token main.Token..
Token main.Token.d_ident: options
Token main.Token..
Token main.Token.d_ident: repaint_on_widget_change
Token main.Token.{
Token main.Token.d_ident: crate
Token main.Token.::
Token main.Token.d_ident: profile_function
Token main.Token.!
Token main.Token.(
Token main.Token.d_string: "compare-widget-rects"
Token main.Token.)
Token main.Token.;
Token main.Token.kw_if
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: widgets_prev_frame
Token main.Token.!
Token main.Token.=
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: widgets_this_frame
Token main.Token.{
Token main.Token.d_ident: repaint_needed
Token main.Token.=
Token main.Token.d_ident: true
Token main.Token.;
    AFTER: // Some widget has moved
Token main.Token.}
Token main.Token.}
Token main.Token.d_ident: std
Token main.Token.::
Token main.Token.d_ident: mem
Token main.Token.::
Token main.Token.d_ident: swap
Token main.Token.(
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: widgets_prev_frame
Token main.Token.,
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: widgets_this_frame
Token main.Token.,
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: widgets_this_frame
Token main.Token..
Token main.Token.d_ident: clear
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.kw_if
Token main.Token.d_ident: repaint_needed
Token main.Token.|
Token main.Token.|
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: input
Token main.Token..
Token main.Token.d_ident: wants_repaint
Token main.Token.(
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: request_repaint
Token main.Token.(
Token main.Token.d_ident: ended_viewport_id
Token main.Token.,
Token main.Token.d_ident: RepaintCause
Token main.Token.::
Token main.Token.d_ident: new
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.}
    BEFORE: //  -------------------
Token main.Token.kw_let
Token main.Token.d_ident: all_viewport_ids
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: all_viewport_ids
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: last_viewport
Token main.Token.=
Token main.Token.d_ident: ended_viewport_id
Token main.Token.;
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: viewports
Token main.Token..
Token main.Token.d_ident: retain
Token main.Token.(
Token main.Token.|
Token main.Token.&
Token main.Token.d_ident: id
Token main.Token.,
Token main.Token.d_ident: viewport
Token main.Token.|
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: parent
Token main.Token.=
Token main.Token.*
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: viewport_parents
Token main.Token..
Token main.Token.d_ident: entry
Token main.Token.(
Token main.Token.d_ident: id
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: or_default
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_if
Token main.Token.!
Token main.Token.d_ident: all_viewport_ids
Token main.Token..
Token main.Token.d_ident: contains
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: parent
Token main.Token.)
Token main.Token.{
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: cfg
Token main.Token.(
Token main.Token.d_ident: feature
Token main.Token.=
Token main.Token.d_string: "log"
Token main.Token.)
Token main.Token.]
Token main.Token.d_ident: log
Token main.Token.::
Token main.Token.d_ident: debug
Token main.Token.!
Token main.Token.(
Token main.Token.d_string: "Removing viewport {:?} ({:?}): the parent is gone"
Token main.Token.,
Token main.Token.d_ident: id
Token main.Token.,
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: builder
Token main.Token..
Token main.Token.d_ident: title
Token main.Token.)
Token main.Token.;
Token main.Token.kw_return
Token main.Token.d_ident: false
Token main.Token.;
Token main.Token.}
Token main.Token.kw_let
Token main.Token.d_ident: is_our_child
Token main.Token.=
Token main.Token.d_ident: parent
Token main.Token.==
Token main.Token.d_ident: ended_viewport_id
Token main.Token.&
Token main.Token.&
Token main.Token.d_ident: id
Token main.Token.!
Token main.Token.=
Token main.Token.d_ident: ViewportId
Token main.Token.::
Token main.Token.d_ident: ROOT
Token main.Token.;
Token main.Token.kw_if
Token main.Token.d_ident: is_our_child
Token main.Token.{
Token main.Token.kw_if
Token main.Token.!
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: used
Token main.Token.{
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: cfg
Token main.Token.(
Token main.Token.d_ident: feature
Token main.Token.=
Token main.Token.d_string: "log"
Token main.Token.)
Token main.Token.]
Token main.Token.d_ident: log
Token main.Token.::
Token main.Token.d_ident: debug
Token main.Token.!
Token main.Token.(
Token main.Token.d_string: "Removing viewport {:?} ({:?}): it was never used this frame"
Token main.Token.,
Token main.Token.d_ident: id
Token main.Token.,
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: builder
Token main.Token..
Token main.Token.d_ident: title
Token main.Token.)
Token main.Token.;
Token main.Token.kw_return
Token main.Token.d_ident: false
Token main.Token.;
    AFTER: // Only keep children that have been updated this frame
Token main.Token.}
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: used
Token main.Token.=
Token main.Token.d_ident: false
Token main.Token.;
    AFTER: // reset so we can check again next frame
Token main.Token.}
Token main.Token.d_ident: true
Token main.Token.}
Token main.Token.)
Token main.Token.;
    BEFORE: // If we are an immediate viewport, this will resume the previous viewport.
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: viewport_stack
Token main.Token..
Token main.Token.d_ident: pop
Token main.Token.(
Token main.Token.)
Token main.Token.;
    BEFORE: // The last viewport is not necessarily the root viewport,
    BEFORE: // just the top _immediate_ viewport.
Token main.Token.kw_let
Token main.Token.d_ident: is_last
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: viewport_stack
Token main.Token..
Token main.Token.d_ident: is_empty
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: viewport_output
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: viewports
Token main.Token..
Token main.Token.d_ident: iter_mut
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: map
Token main.Token.(
Token main.Token.|
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: id
Token main.Token.,
Token main.Token.d_ident: viewport
Token main.Token.)
Token main.Token.|
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: parent
Token main.Token.=
Token main.Token.*
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: viewport_parents
Token main.Token..
Token main.Token.d_ident: entry
Token main.Token.(
Token main.Token.d_ident: id
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: or_default
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: commands
Token main.Token.=
Token main.Token.kw_if
Token main.Token.d_ident: is_last
Token main.Token.{
    BEFORE: // Let the primary immediate viewport handle the commands of its children too.
    BEFORE: // This can make things easier for the backend, as otherwise we may get commands
    BEFORE: // that affect a viewport while its egui logic is running.
Token main.Token.d_ident: std
Token main.Token.::
Token main.Token.d_ident: mem
Token main.Token.::
Token main.Token.d_ident: take
Token main.Token.(
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: commands
Token main.Token.)
Token main.Token.}
Token main.Token.kw_else
Token main.Token.{
Token main.Token.d_ident: vec
Token main.Token.!
Token main.Token.[
Token main.Token.]
Token main.Token.}
Token main.Token.;
Token main.Token.(
Token main.Token.d_ident: id
Token main.Token.,
Token main.Token.d_ident: ViewportOutput
Token main.Token.{
Token main.Token.d_ident: parent
Token main.Token.,
Token main.Token.d_ident: class
Token main.Token.:
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: class
Token main.Token.,
Token main.Token.d_ident: builder
Token main.Token.:
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: builder
Token main.Token..
Token main.Token.d_ident: clone
Token main.Token.(
Token main.Token.)
Token main.Token.,
Token main.Token.d_ident: viewport_ui_cb
Token main.Token.:
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: viewport_ui_cb
Token main.Token..
Token main.Token.d_ident: clone
Token main.Token.(
Token main.Token.)
Token main.Token.,
Token main.Token.d_ident: commands
Token main.Token.,
Token main.Token.d_ident: repaint_delay
Token main.Token.:
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: repaint
Token main.Token..
Token main.Token.d_ident: repaint_delay
Token main.Token.,
Token main.Token.}
Token main.Token.,
Token main.Token.)
Token main.Token.}
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: collect
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_if
Token main.Token.d_ident: is_last
Token main.Token.{
    BEFORE: // Remove dead viewports:
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: viewports
Token main.Token..
Token main.Token.d_ident: retain
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: id
Token main.Token.,
Token main.Token.d_ident: _
Token main.Token.|
Token main.Token.d_ident: all_viewport_ids
Token main.Token..
Token main.Token.d_ident: contains
Token main.Token.(
Token main.Token.d_ident: id
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: viewport_parents
Token main.Token..
Token main.Token.d_ident: retain
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: id
Token main.Token.,
Token main.Token.d_ident: _
Token main.Token.|
Token main.Token.d_ident: all_viewport_ids
Token main.Token..
Token main.Token.d_ident: contains
Token main.Token.(
Token main.Token.d_ident: id
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.kw_else
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: viewport_id
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: viewport_id
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: memory
Token main.Token..
Token main.Token.d_ident: set_viewport_id
Token main.Token.(
Token main.Token.d_ident: viewport_id
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.kw_let
Token main.Token.d_ident: active_pixels_per_point
Token main.Token.:
Token main.Token.d_ident: std
Token main.Token.::
Token main.Token.d_ident: collections
Token main.Token.::
Token main.Token.d_ident: BTreeSet
Token main.Token.<
Token main.Token.d_ident: OrderedFloat
Token main.Token.<
Token main.Token.d_ident: f32
Token main.Token.>
Token main.Token.>
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: viewports
Token main.Token..
Token main.Token.d_ident: values
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: map
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: v
Token main.Token.|
Token main.Token.d_ident: v
Token main.Token..
Token main.Token.d_ident: input
Token main.Token..
Token main.Token.d_ident: pixels_per_point
Token main.Token..
Token main.Token.d_ident: into
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: collect
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: fonts
Token main.Token..
Token main.Token.d_ident: retain
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: pixels_per_point
Token main.Token.,
Token main.Token.d_ident: _
Token main.Token.|
Token main.Token.{
Token main.Token.kw_if
Token main.Token.d_ident: active_pixels_per_point
Token main.Token..
Token main.Token.d_ident: contains
Token main.Token.(
Token main.Token.d_ident: pixels_per_point
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: true
Token main.Token.}
Token main.Token.kw_else
Token main.Token.{
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: cfg
Token main.Token.(
Token main.Token.d_ident: feature
Token main.Token.=
Token main.Token.d_string: "log"
Token main.Token.)
Token main.Token.]
Token main.Token.d_ident: log
Token main.Token.::
Token main.Token.d_ident: trace
Token main.Token.!
Token main.Token.(
Token main.Token.d_string: "Freeing Fonts with pixels_per_point={} because it is no longer needed"
Token main.Token.,
Token main.Token.d_ident: pixels_per_point
Token main.Token..
Token main.Token.d_ident: into_inner
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: false
Token main.Token.}
Token main.Token.}
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: FullOutput
Token main.Token.{
Token main.Token.d_ident: platform_output
Token main.Token.,
Token main.Token.d_ident: textures_delta
Token main.Token.,
Token main.Token.d_ident: shapes
Token main.Token.,
Token main.Token.d_ident: pixels_per_point
Token main.Token.,
Token main.Token.d_ident: viewport_output
Token main.Token.,
Token main.Token.}
Token main.Token.}
Token main.Token.}
Token main.Token.kw_impl
Token main.Token.d_ident: Context
Token main.Token.{
    BEFORE: /// Tessellate the given shapes into triangle meshes.
    BEFORE: ///
    BEFORE: /// `pixels_per_point` is used for feathering (anti-aliasing).
    BEFORE: /// For this you can use [`FullOutput::pixels_per_point`], [`Self::pixels_per_point`],
    BEFORE: /// or whatever is appropriate for your viewport.
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: tessellate
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: shapes
Token main.Token.:
Token main.Token.d_ident: Vec
Token main.Token.<
Token main.Token.d_ident: ClippedShape
Token main.Token.>
Token main.Token.,
Token main.Token.d_ident: pixels_per_point
Token main.Token.:
Token main.Token.d_ident: f32
Token main.Token.,
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: Vec
Token main.Token.<
Token main.Token.d_ident: ClippedPrimitive
Token main.Token.>
Token main.Token.{
Token main.Token.d_ident: crate
Token main.Token.::
Token main.Token.d_ident: profile_function
Token main.Token.!
Token main.Token.(
Token main.Token.)
Token main.Token.;
    BEFORE: // A tempting optimization is to reuse the tessellation from last frame if the
    BEFORE: // shapes are the same, but just comparing the shapes takes about 50% of the time
    BEFORE: // it takes to tessellate them, so it is not a worth optimization.
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: tessellation_options
Token main.Token.=
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: memory
Token main.Token..
Token main.Token.d_ident: options
Token main.Token..
Token main.Token.d_ident: tessellation_options
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: texture_atlas
Token main.Token.=
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: fonts
Token main.Token..
Token main.Token.d_ident: get
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: pixels_per_point
Token main.Token..
Token main.Token.d_ident: into
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: expect
Token main.Token.(
Token main.Token.d_string: "tessellate called with a different pixels_per_point than the font atlas was created with. \nYou should use egui::FullOutput::pixels_per_point when tessellating."
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: texture_atlas
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.(
Token main.Token.d_ident: font_tex_size
Token main.Token.,
Token main.Token.d_ident: prepared_discs
Token main.Token.)
Token main.Token.=
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: atlas
Token main.Token.=
Token main.Token.d_ident: texture_atlas
Token main.Token..
Token main.Token.d_ident: lock
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.(
Token main.Token.d_ident: atlas
Token main.Token..
Token main.Token.d_ident: size
Token main.Token.(
Token main.Token.)
Token main.Token.,
Token main.Token.d_ident: atlas
Token main.Token..
Token main.Token.d_ident: prepared_discs
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.}
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: paint_stats
Token main.Token.=
Token main.Token.d_ident: PaintStats
Token main.Token.::
Token main.Token.d_ident: from_shapes
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: shapes
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: clipped_primitives
Token main.Token.=
Token main.Token.{
Token main.Token.d_ident: crate
Token main.Token.::
Token main.Token.d_ident: profile_scope
Token main.Token.!
Token main.Token.(
Token main.Token.d_string: "tessellator::tessellate_shapes"
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: tessellator
Token main.Token.::
Token main.Token.d_ident: Tessellator
Token main.Token.::
Token main.Token.d_ident: new
Token main.Token.(
Token main.Token.d_ident: pixels_per_point
Token main.Token.,
Token main.Token.d_ident: tessellation_options
Token main.Token.,
Token main.Token.d_ident: font_tex_size
Token main.Token.,
Token main.Token.d_ident: prepared_discs
Token main.Token.,
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: tessellate_shapes
Token main.Token.(
Token main.Token.d_ident: shapes
Token main.Token.)
Token main.Token.}
Token main.Token.;
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: paint_stats
Token main.Token.=
Token main.Token.d_ident: paint_stats
Token main.Token..
Token main.Token.d_ident: with_clipped_primitives
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: clipped_primitives
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: clipped_primitives
Token main.Token.}
Token main.Token.)
Token main.Token.}
    BEFORE: // ---------------------------------------------------------------------
    BEFORE: /// Position and size of the egui area.
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: screen_rect
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: Rect
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: input
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: i
Token main.Token.|
Token main.Token.d_ident: i
Token main.Token..
Token main.Token.d_ident: screen_rect
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.}
    BEFORE: /// How much space is still available after panels has been added.
    BEFORE: ///
    BEFORE: /// This is the "background" area, what egui doesn't cover with panels (but may cover with windows).
    BEFORE: /// This is also the area to which windows are constrained.
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: available_rect
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: Rect
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: frame_state
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: s
Token main.Token.|
Token main.Token.d_ident: s
Token main.Token..
Token main.Token.d_ident: available_rect
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.}
    BEFORE: /// How much space is used by panels and windows.
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: used_rect
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: Rect
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.{
Token main.Token.kw_let
Token main.Token.kw_mut
Token main.Token.d_ident: used
Token main.Token.=
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: viewport
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: frame_state
Token main.Token..
Token main.Token.d_ident: used_by_panels
Token main.Token.;
Token main.Token.kw_for
Token main.Token.d_ident: window
Token main.Token.kw_in
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: memory
Token main.Token..
Token main.Token.d_ident: areas
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: visible_windows
Token main.Token.(
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: used
Token main.Token.=
Token main.Token.d_ident: used
Token main.Token..
Token main.Token.d_ident: union
Token main.Token.(
Token main.Token.d_ident: window
Token main.Token..
Token main.Token.d_ident: rect
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.d_ident: used
Token main.Token.}
Token main.Token.)
Token main.Token.}
    BEFORE: /// How much space is used by panels and windows.
    BEFORE: ///
    BEFORE: /// You can shrink your egui area to this size and still fit all egui components.
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: used_size
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: Vec2
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: used_rect
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: max
Token main.Token.-
Token main.Token.d_ident: Pos2
Token main.Token.::
Token main.Token.d_ident: ZERO
Token main.Token.}
    BEFORE: // ---------------------------------------------------------------------
    BEFORE: /// Is the pointer (mouse/touch) over any egui area?
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: is_pointer_over_area
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: bool
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: pointer_pos
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: input
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: i
Token main.Token.|
Token main.Token.d_ident: i
Token main.Token..
Token main.Token.d_ident: pointer
Token main.Token..
Token main.Token.d_ident: interact_pos
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.kw_if
Token main.Token.kw_let
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: pointer_pos
Token main.Token.)
Token main.Token.=
Token main.Token.d_ident: pointer_pos
Token main.Token.{
Token main.Token.kw_if
Token main.Token.kw_let
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: layer
Token main.Token.)
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: layer_id_at
Token main.Token.(
Token main.Token.d_ident: pointer_pos
Token main.Token.)
Token main.Token.{
Token main.Token.kw_if
Token main.Token.d_ident: layer
Token main.Token..
Token main.Token.d_ident: order
Token main.Token.==
Token main.Token.d_ident: Order
Token main.Token.::
Token main.Token.d_ident: Background
Token main.Token.{
Token main.Token.!
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: frame_state
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: state
Token main.Token.|
Token main.Token.d_ident: state
Token main.Token..
Token main.Token.d_ident: unused_rect
Token main.Token..
Token main.Token.d_ident: contains
Token main.Token.(
Token main.Token.d_ident: pointer_pos
Token main.Token.)
Token main.Token.)
Token main.Token.}
Token main.Token.kw_else
Token main.Token.{
Token main.Token.d_ident: true
Token main.Token.}
Token main.Token.}
Token main.Token.kw_else
Token main.Token.{
Token main.Token.d_ident: false
Token main.Token.}
Token main.Token.}
Token main.Token.kw_else
Token main.Token.{
Token main.Token.d_ident: false
Token main.Token.}
Token main.Token.}
    BEFORE: /// True if egui is currently interested in the pointer (mouse or touch).
    BEFORE: ///
    BEFORE: /// Could be the pointer is hovering over a [`Window`] or the user is dragging a widget.
    BEFORE: /// If `false`, the pointer is outside of any egui area and so
    BEFORE: /// you may be interested in what it is doing (e.g. controlling your game).
    BEFORE: /// Returns `false` if a drag started outside of egui and then moved over an egui area.
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: wants_pointer_input
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: bool
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: is_using_pointer
Token main.Token.(
Token main.Token.)
Token main.Token.|
Token main.Token.|
Token main.Token.(
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: is_pointer_over_area
Token main.Token.(
Token main.Token.)
Token main.Token.&
Token main.Token.&
Token main.Token.!
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: input
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: i
Token main.Token.|
Token main.Token.d_ident: i
Token main.Token..
Token main.Token.d_ident: pointer
Token main.Token..
Token main.Token.d_ident: any_down
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.)
Token main.Token.}
    BEFORE: /// Is egui currently using the pointer position (e.g. dragging a slider)?
    BEFORE: ///
    BEFORE: /// NOTE: this will return `false` if the pointer is just hovering over an egui area.
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: is_using_pointer
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: bool
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: memory
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: m
Token main.Token.|
Token main.Token.d_ident: m
Token main.Token..
Token main.Token.d_ident: interaction
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: is_using_pointer
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.}
    BEFORE: /// If `true`, egui is currently listening on text input (e.g. typing text in a [`TextEdit`]).
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: wants_keyboard_input
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: bool
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: memory
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: m
Token main.Token.|
Token main.Token.d_ident: m
Token main.Token..
Token main.Token.d_ident: interaction
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: focus
Token main.Token..
Token main.Token.d_ident: focused
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: is_some
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.}
    BEFORE: /// Highlight this widget, to make it look like it is hovered, even if it isn't.
    BEFORE: ///
    BEFORE: /// The highlight takes on frame to take effect if you call this after the widget has been fully rendered.
    BEFORE: ///
    BEFORE: /// See also [`Response::highlight`].
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: highlight_widget
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: id
Token main.Token.:
Token main.Token.d_ident: Id
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: frame_state_mut
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: fs
Token main.Token.|
Token main.Token.d_ident: fs
Token main.Token..
Token main.Token.d_ident: highlight_next_frame
Token main.Token..
Token main.Token.d_ident: insert
Token main.Token.(
Token main.Token.d_ident: id
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.}
    BEFORE: /// Is an egui context menu open?
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: is_context_menu_open
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: bool
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: data
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: d
Token main.Token.|
Token main.Token.{
Token main.Token.d_ident: d
Token main.Token..
Token main.Token.d_ident: get_temp
Token main.Token.::
Token main.Token.<
Token main.Token.d_ident: crate
Token main.Token.::
Token main.Token.d_ident: menu
Token main.Token.::
Token main.Token.d_ident: BarState
Token main.Token.>
Token main.Token.(
Token main.Token.d_ident: menu
Token main.Token.::
Token main.Token.d_ident: CONTEXT_MENU_ID_STR
Token main.Token..
Token main.Token.d_ident: into
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: map_or
Token main.Token.(
Token main.Token.d_ident: false
Token main.Token.,
Token main.Token.|
Token main.Token.d_ident: state
Token main.Token.|
Token main.Token.d_ident: state
Token main.Token..
Token main.Token.d_ident: has_root
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.}
Token main.Token.)
Token main.Token.}
Token main.Token.}
    BEFORE: // Ergonomic methods to forward some calls often used in 'if let' without holding the borrow
Token main.Token.kw_impl
Token main.Token.d_ident: Context
Token main.Token.{
    BEFORE: /// Latest reported pointer position.
    BEFORE: ///
    BEFORE: /// When tapping a touch screen, this will be `None`.
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: inline
Token main.Token.(
Token main.Token.d_ident: always
Token main.Token.)
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: pointer_latest_pos
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: Option
Token main.Token.<
Token main.Token.d_ident: Pos2
Token main.Token.>
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: input
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: i
Token main.Token.|
Token main.Token.d_ident: i
Token main.Token..
Token main.Token.d_ident: pointer
Token main.Token..
Token main.Token.d_ident: latest_pos
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.}
    BEFORE: /// If it is a good idea to show a tooltip, where is pointer?
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: inline
Token main.Token.(
Token main.Token.d_ident: always
Token main.Token.)
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: pointer_hover_pos
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: Option
Token main.Token.<
Token main.Token.d_ident: Pos2
Token main.Token.>
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: input
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: i
Token main.Token.|
Token main.Token.d_ident: i
Token main.Token..
Token main.Token.d_ident: pointer
Token main.Token..
Token main.Token.d_ident: hover_pos
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.}
    BEFORE: /// If you detect a click or drag and wants to know where it happened, use this.
    BEFORE: ///
    BEFORE: /// Latest position of the mouse, but ignoring any [`Event::PointerGone`]
    BEFORE: /// if there were interactions this frame.
    BEFORE: /// When tapping a touch screen, this will be the location of the touch.
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: inline
Token main.Token.(
Token main.Token.d_ident: always
Token main.Token.)
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: pointer_interact_pos
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: Option
Token main.Token.<
Token main.Token.d_ident: Pos2
Token main.Token.>
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: input
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: i
Token main.Token.|
Token main.Token.d_ident: i
Token main.Token..
Token main.Token.d_ident: pointer
Token main.Token..
Token main.Token.d_ident: interact_pos
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.}
    BEFORE: /// Calls [`InputState::multi_touch`].
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: multi_touch
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: Option
Token main.Token.<
Token main.Token.d_ident: MultiTouchInfo
Token main.Token.>
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: input
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: i
Token main.Token.|
Token main.Token.d_ident: i
Token main.Token..
Token main.Token.d_ident: multi_touch
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.}
Token main.Token.}
Token main.Token.kw_impl
Token main.Token.d_ident: Context
Token main.Token.{
    BEFORE: /// Transform the graphics of the given layer.
    BEFORE: ///
    BEFORE: /// This will also affect input.
    BEFORE: ///
    BEFORE: /// This is a sticky setting, remembered from one frame to the next.
    BEFORE: ///
    BEFORE: /// Can be used to implement pan and zoom (see relevant demo).
    BEFORE: ///
    BEFORE: /// For a temporary transform, use [`Self::transform_layer_shapes`] instead.
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: set_transform_layer
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: layer_id
Token main.Token.:
Token main.Token.d_ident: LayerId
Token main.Token.,
Token main.Token.d_ident: transform
Token main.Token.:
Token main.Token.d_ident: TSTransform
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: memory_mut
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: m
Token main.Token.|
Token main.Token.{
Token main.Token.kw_if
Token main.Token.d_ident: transform
Token main.Token.==
Token main.Token.d_ident: TSTransform
Token main.Token.::
Token main.Token.d_ident: IDENTITY
Token main.Token.{
Token main.Token.d_ident: m
Token main.Token..
Token main.Token.d_ident: layer_transforms
Token main.Token..
Token main.Token.d_ident: remove
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: layer_id
Token main.Token.)
Token main.Token.}
Token main.Token.kw_else
Token main.Token.{
Token main.Token.d_ident: m
Token main.Token..
Token main.Token.d_ident: layer_transforms
Token main.Token..
Token main.Token.d_ident: insert
Token main.Token.(
Token main.Token.d_ident: layer_id
Token main.Token.,
Token main.Token.d_ident: transform
Token main.Token.)
Token main.Token.}
Token main.Token.}
Token main.Token.)
Token main.Token.;
Token main.Token.}
    BEFORE: /// Move all the graphics at the given layer.
    BEFORE: ///
    BEFORE: /// Is used to implement drag-and-drop preview.
    BEFORE: ///
    BEFORE: /// This only applied to the existing graphics at the layer, not to new graphics added later.
    BEFORE: ///
    BEFORE: /// For a persistent transform, use [`Self::set_transform_layer`] instead.
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: deprecated
Token main.Token.=
Token main.Token.d_string: "Use `transform_layer_shapes` instead"
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: translate_layer
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: layer_id
Token main.Token.:
Token main.Token.d_ident: LayerId
Token main.Token.,
Token main.Token.d_ident: delta
Token main.Token.:
Token main.Token.d_ident: Vec2
Token main.Token.)
Token main.Token.{
Token main.Token.kw_if
Token main.Token.d_ident: delta
Token main.Token.!
Token main.Token.=
Token main.Token.d_ident: Vec2
Token main.Token.::
Token main.Token.d_ident: ZERO
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: transform
Token main.Token.=
Token main.Token.d_ident: emath
Token main.Token.::
Token main.Token.d_ident: TSTransform
Token main.Token.::
Token main.Token.d_ident: from_translation
Token main.Token.(
Token main.Token.d_ident: delta
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: transform_layer_shapes
Token main.Token.(
Token main.Token.d_ident: layer_id
Token main.Token.,
Token main.Token.d_ident: transform
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.}
    BEFORE: /// Transform all the graphics at the given layer.
    BEFORE: ///
    BEFORE: /// Is used to implement drag-and-drop preview.
    BEFORE: ///
    BEFORE: /// This only applied to the existing graphics at the layer, not to new graphics added later.
    BEFORE: ///
    BEFORE: /// For a persistent transform, use [`Self::set_transform_layer`] instead.
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: transform_layer_shapes
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: layer_id
Token main.Token.:
Token main.Token.d_ident: LayerId
Token main.Token.,
Token main.Token.d_ident: transform
Token main.Token.:
Token main.Token.d_ident: TSTransform
Token main.Token.)
Token main.Token.{
Token main.Token.kw_if
Token main.Token.d_ident: transform
Token main.Token.!
Token main.Token.=
Token main.Token.d_ident: TSTransform
Token main.Token.::
Token main.Token.d_ident: IDENTITY
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: graphics_mut
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: g
Token main.Token.|
Token main.Token.d_ident: g
Token main.Token..
Token main.Token.d_ident: entry
Token main.Token.(
Token main.Token.d_ident: layer_id
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: transform
Token main.Token.(
Token main.Token.d_ident: transform
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.}
    BEFORE: /// Top-most layer at the given position.
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: layer_id_at
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: pos
Token main.Token.:
Token main.Token.d_ident: Pos2
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: Option
Token main.Token.<
Token main.Token.d_ident: LayerId
Token main.Token.>
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: memory
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: mem
Token main.Token.|
Token main.Token.{
Token main.Token.d_ident: mem
Token main.Token..
Token main.Token.d_ident: layer_id_at
Token main.Token.(
Token main.Token.d_ident: pos
Token main.Token.,
Token main.Token.d_ident: mem
Token main.Token..
Token main.Token.d_ident: options
Token main.Token..
Token main.Token.d_ident: style
Token main.Token..
Token main.Token.d_ident: interaction
Token main.Token..
Token main.Token.d_ident: resize_grab_radius_side
Token main.Token.)
Token main.Token.}
Token main.Token.)
Token main.Token.}
    BEFORE: /// Moves the given area to the top in its [`Order`].
    BEFORE: ///
    BEFORE: /// [`Area`]:s and [`Window`]:s also do this automatically when being clicked on or interacted with.
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: move_to_top
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: layer_id
Token main.Token.:
Token main.Token.d_ident: LayerId
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: memory_mut
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: mem
Token main.Token.|
Token main.Token.d_ident: mem
Token main.Token..
Token main.Token.d_ident: areas_mut
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: move_to_top
Token main.Token.(
Token main.Token.d_ident: layer_id
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.}
    BEFORE: /// Retrieve the [`LayerId`] of the top level windows.
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: top_layer_id
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: Option
Token main.Token.<
Token main.Token.d_ident: LayerId
Token main.Token.>
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: memory
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: mem
Token main.Token.|
Token main.Token.d_ident: mem
Token main.Token..
Token main.Token.d_ident: areas
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: top_layer_id
Token main.Token.(
Token main.Token.d_ident: Order
Token main.Token.::
Token main.Token.d_ident: Middle
Token main.Token.)
Token main.Token.)
Token main.Token.}
    BEFORE: /// Does the given rectangle contain the mouse pointer?
    BEFORE: ///
    BEFORE: /// Will return false if some other area is covering the given layer.
    BEFORE: ///
    BEFORE: /// The given rectangle is assumed to have been clipped by its parent clip rect.
    BEFORE: ///
    BEFORE: /// See also [`Response::contains_pointer`].
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: rect_contains_pointer
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: layer_id
Token main.Token.:
Token main.Token.d_ident: LayerId
Token main.Token.,
Token main.Token.d_ident: rect
Token main.Token.:
Token main.Token.d_ident: Rect
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: bool
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: rect
Token main.Token.=
Token main.Token.kw_if
Token main.Token.kw_let
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: transform
Token main.Token.)
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: memory
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: m
Token main.Token.|
Token main.Token.d_ident: m
Token main.Token..
Token main.Token.d_ident: layer_transforms
Token main.Token..
Token main.Token.d_ident: get
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: layer_id
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: cloned
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: transform
Token main.Token.*
Token main.Token.d_ident: rect
Token main.Token.}
Token main.Token.kw_else
Token main.Token.{
Token main.Token.d_ident: rect
Token main.Token.}
Token main.Token.;
Token main.Token.kw_if
Token main.Token.!
Token main.Token.d_ident: rect
Token main.Token..
Token main.Token.d_ident: is_positive
Token main.Token.(
Token main.Token.)
Token main.Token.{
Token main.Token.kw_return
Token main.Token.d_ident: false
Token main.Token.;
Token main.Token.}
Token main.Token.kw_let
Token main.Token.d_ident: pointer_pos
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: input
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: i
Token main.Token.|
Token main.Token.d_ident: i
Token main.Token..
Token main.Token.d_ident: pointer
Token main.Token..
Token main.Token.d_ident: interact_pos
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: pointer_pos
Token main.Token.)
Token main.Token.=
Token main.Token.d_ident: pointer_pos
Token main.Token.kw_else
Token main.Token.{
Token main.Token.kw_return
Token main.Token.d_ident: false
Token main.Token.;
Token main.Token.}
Token main.Token.;
Token main.Token.kw_if
Token main.Token.!
Token main.Token.d_ident: rect
Token main.Token..
Token main.Token.d_ident: contains
Token main.Token.(
Token main.Token.d_ident: pointer_pos
Token main.Token.)
Token main.Token.{
Token main.Token.kw_return
Token main.Token.d_ident: false
Token main.Token.;
Token main.Token.}
Token main.Token.kw_if
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: layer_id_at
Token main.Token.(
Token main.Token.d_ident: pointer_pos
Token main.Token.)
Token main.Token.!
Token main.Token.=
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: layer_id
Token main.Token.)
Token main.Token.{
Token main.Token.kw_return
Token main.Token.d_ident: false
Token main.Token.;
Token main.Token.}
Token main.Token.d_ident: true
Token main.Token.}
    BEFORE: // ---------------------------------------------------------------------
    BEFORE: /// Whether or not to debug widget layout on hover.
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: cfg
Token main.Token.(
Token main.Token.d_ident: debug_assertions
Token main.Token.)
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: debug_on_hover
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: bool
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: options
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: opt
Token main.Token.|
Token main.Token.d_ident: opt
Token main.Token..
Token main.Token.d_ident: style
Token main.Token..
Token main.Token.d_ident: debug
Token main.Token..
Token main.Token.d_ident: debug_on_hover
Token main.Token.)
Token main.Token.}
    BEFORE: /// Turn on/off whether or not to debug widget layout on hover.
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: cfg
Token main.Token.(
Token main.Token.d_ident: debug_assertions
Token main.Token.)
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: set_debug_on_hover
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: debug_on_hover
Token main.Token.:
Token main.Token.d_ident: bool
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: style_mut
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: style
Token main.Token.|
Token main.Token.d_ident: style
Token main.Token..
Token main.Token.d_ident: debug
Token main.Token..
Token main.Token.d_ident: debug_on_hover
Token main.Token.=
Token main.Token.d_ident: debug_on_hover
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.}
    BEFORE: /// ## Animation
Token main.Token.kw_impl
Token main.Token.d_ident: Context
Token main.Token.{
    BEFORE: /// Returns a value in the range [0, 1], to indicate "how on" this thing is.
    BEFORE: ///
    BEFORE: /// The first time called it will return `if value { 1.0 } else { 0.0 }`
    BEFORE: /// Calling this with `value = true` will always yield a number larger than zero, quickly going towards one.
    BEFORE: /// Calling this with `value = false` will always yield a number less than one, quickly going towards zero.
    BEFORE: ///
    BEFORE: /// The function will call [`Self::request_repaint()`] when appropriate.
    BEFORE: ///
    BEFORE: /// The animation time is taken from [`Style::animation_time`].
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: track_caller
Token main.Token.]
    AFTER: // To track repaint cause
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: animate_bool
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: id
Token main.Token.:
Token main.Token.d_ident: Id
Token main.Token.,
Token main.Token.d_ident: value
Token main.Token.:
Token main.Token.d_ident: bool
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: f32
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: animation_time
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: style
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: animation_time
Token main.Token.;
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: animate_bool_with_time
Token main.Token.(
Token main.Token.d_ident: id
Token main.Token.,
Token main.Token.d_ident: value
Token main.Token.,
Token main.Token.d_ident: animation_time
Token main.Token.)
Token main.Token.}
    BEFORE: /// Like [`Self::animate_bool`] but allows you to control the animation time.
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: track_caller
Token main.Token.]
    AFTER: // To track repaint cause
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: animate_bool_with_time
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: id
Token main.Token.:
Token main.Token.d_ident: Id
Token main.Token.,
Token main.Token.d_ident: target_value
Token main.Token.:
Token main.Token.d_ident: bool
Token main.Token.,
Token main.Token.d_ident: animation_time
Token main.Token.:
Token main.Token.d_ident: f32
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: f32
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: animated_value
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.{
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: animation_manager
Token main.Token..
Token main.Token.d_ident: animate_bool
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: viewports
Token main.Token..
Token main.Token.d_ident: entry
Token main.Token.(
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: viewport_id
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: or_default
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: input
Token main.Token.,
Token main.Token.d_ident: animation_time
Token main.Token.,
Token main.Token.d_ident: id
Token main.Token.,
Token main.Token.d_ident: target_value
Token main.Token.,
Token main.Token.)
Token main.Token.}
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: animation_in_progress
Token main.Token.=
Token main.Token.d_number: 0.0
Token main.Token.<
Token main.Token.d_ident: animated_value
Token main.Token.&
Token main.Token.&
Token main.Token.d_ident: animated_value
Token main.Token.<
Token main.Token.d_number: 1.0
Token main.Token.;
Token main.Token.kw_if
Token main.Token.d_ident: animation_in_progress
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: request_repaint
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.d_ident: animated_value
Token main.Token.}
    BEFORE: /// Smoothly animate an `f32` value.
    BEFORE: ///
    BEFORE: /// At the first call the value is written to memory.
    BEFORE: /// When it is called with a new value, it linearly interpolates to it in the given time.
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: track_caller
Token main.Token.]
    AFTER: // To track repaint cause
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: animate_value_with_time
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: id
Token main.Token.:
Token main.Token.d_ident: Id
Token main.Token.,
Token main.Token.d_ident: target_value
Token main.Token.:
Token main.Token.d_ident: f32
Token main.Token.,
Token main.Token.d_ident: animation_time
Token main.Token.:
Token main.Token.d_ident: f32
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: f32
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: animated_value
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.{
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: animation_manager
Token main.Token..
Token main.Token.d_ident: animate_value
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: viewports
Token main.Token..
Token main.Token.d_ident: entry
Token main.Token.(
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: viewport_id
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: or_default
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: input
Token main.Token.,
Token main.Token.d_ident: animation_time
Token main.Token.,
Token main.Token.d_ident: id
Token main.Token.,
Token main.Token.d_ident: target_value
Token main.Token.,
Token main.Token.)
Token main.Token.}
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: animation_in_progress
Token main.Token.=
Token main.Token.d_ident: animated_value
Token main.Token.!
Token main.Token.=
Token main.Token.d_ident: target_value
Token main.Token.;
Token main.Token.kw_if
Token main.Token.d_ident: animation_in_progress
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: request_repaint
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.d_ident: animated_value
Token main.Token.}
    BEFORE: /// Clear memory of any animations.
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: clear_animations
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: animation_manager
Token main.Token.=
Token main.Token.d_ident: Default
Token main.Token.::
Token main.Token.d_ident: default
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.}
Token main.Token.kw_impl
Token main.Token.d_ident: Context
Token main.Token.{
    BEFORE: /// Show a ui for settings (style and tessellation options).
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: settings_ui
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: ui
Token main.Token.:
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: Ui
Token main.Token.)
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: prev_options
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: options
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: o
Token main.Token.|
Token main.Token.d_ident: o
Token main.Token..
Token main.Token.d_ident: clone
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.kw_mut
Token main.Token.d_ident: options
Token main.Token.=
Token main.Token.d_ident: prev_options
Token main.Token..
Token main.Token.d_ident: clone
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: options
Token main.Token..
Token main.Token.d_ident: ui
Token main.Token.(
Token main.Token.d_ident: ui
Token main.Token.)
Token main.Token.;
Token main.Token.kw_if
Token main.Token.d_ident: options
Token main.Token.!
Token main.Token.=
Token main.Token.d_ident: prev_options
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: options_mut
Token main.Token.(
Token main.Token.d_ident: move
Token main.Token.|
Token main.Token.d_ident: o
Token main.Token.|
Token main.Token.*
Token main.Token.d_ident: o
Token main.Token.=
Token main.Token.d_ident: options
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.}
    BEFORE: /// Show the state of egui, including its input and output.
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: inspection_ui
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: ui
Token main.Token.:
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: Ui
Token main.Token.)
Token main.Token.{
Token main.Token.kw_use
Token main.Token.d_ident: crate
Token main.Token.::
Token main.Token.d_ident: containers
Token main.Token.::
Token main.Token.*
Token main.Token.;
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: label
Token main.Token.(
Token main.Token.d_ident: format
Token main.Token.!
Token main.Token.(
Token main.Token.d_string: "Is using pointer: {}"
Token main.Token.,
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: is_using_pointer
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: on_hover_text
Token main.Token.(
Token main.Token.d_string: "Is egui currently using the pointer actively (e.g. dragging a slider)?"
Token main.Token.,
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: label
Token main.Token.(
Token main.Token.d_ident: format
Token main.Token.!
Token main.Token.(
Token main.Token.d_string: "Wants pointer input: {}"
Token main.Token.,
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: wants_pointer_input
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: on_hover_text
Token main.Token.(
Token main.Token.d_string: "Is egui currently interested in the location of the pointer (either because it is in use, or because it is hovering over a window)."
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: label
Token main.Token.(
Token main.Token.d_ident: format
Token main.Token.!
Token main.Token.(
Token main.Token.d_string: "Wants keyboard input: {}"
Token main.Token.,
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: wants_keyboard_input
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: on_hover_text
Token main.Token.(
Token main.Token.d_string: "Is egui currently listening for text input?"
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: label
Token main.Token.(
Token main.Token.d_ident: format
Token main.Token.!
Token main.Token.(
Token main.Token.d_string: "Keyboard focus widget: {}"
Token main.Token.,
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: memory
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: m
Token main.Token.|
Token main.Token.d_ident: m
Token main.Token..
Token main.Token.d_ident: interaction
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: focus
Token main.Token..
Token main.Token.d_ident: focused
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: as_ref
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: map
Token main.Token.(
Token main.Token.d_ident: Id
Token main.Token.::
Token main.Token.d_ident: short_debug_format
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: unwrap_or_default
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: on_hover_text
Token main.Token.(
Token main.Token.d_string: "Is egui currently listening for text input?"
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: pointer_pos
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: pointer_hover_pos
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: map_or_else
Token main.Token.(
Token main.Token.d_ident: String
Token main.Token.::
Token main.Token.d_ident: new
Token main.Token.,
Token main.Token.|
Token main.Token.d_ident: pos
Token main.Token.|
Token main.Token.d_ident: format
Token main.Token.!
Token main.Token.(
Token main.Token.d_string: "{pos:?}"
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: label
Token main.Token.(
Token main.Token.d_ident: format
Token main.Token.!
Token main.Token.(
Token main.Token.d_string: "Pointer pos: {pointer_pos}"
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: top_layer
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: pointer_hover_pos
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: and_then
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: pos
Token main.Token.|
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: layer_id_at
Token main.Token.(
Token main.Token.d_ident: pos
Token main.Token.)
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: map_or_else
Token main.Token.(
Token main.Token.d_ident: String
Token main.Token.::
Token main.Token.d_ident: new
Token main.Token.,
Token main.Token.|
Token main.Token.d_ident: layer
Token main.Token.|
Token main.Token.d_ident: layer
Token main.Token..
Token main.Token.d_ident: short_debug_format
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: label
Token main.Token.(
Token main.Token.d_ident: format
Token main.Token.!
Token main.Token.(
Token main.Token.d_string: "Top layer under mouse: {top_layer}"
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: add_space
Token main.Token.(
Token main.Token.d_number: 16.0
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: label
Token main.Token.(
Token main.Token.d_ident: format
Token main.Token.!
Token main.Token.(
Token main.Token.d_string: "There are {} text galleys in the layout cache"
Token main.Token.,
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: fonts
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: f
Token main.Token.|
Token main.Token.d_ident: f
Token main.Token..
Token main.Token.d_ident: num_galleys_in_cache
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.)
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: on_hover_text
Token main.Token.(
Token main.Token.d_string: "This is approximately the number of text strings on screen"
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: add_space
Token main.Token.(
Token main.Token.d_number: 16.0
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: CollapsingHeader
Token main.Token.::
Token main.Token.d_ident: new
Token main.Token.(
Token main.Token.d_string: "🔃 Repaint Causes"
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: default_open
Token main.Token.(
Token main.Token.d_ident: false
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: show
Token main.Token.(
Token main.Token.d_ident: ui
Token main.Token.,
Token main.Token.|
Token main.Token.d_ident: ui
Token main.Token.|
Token main.Token.{
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: set_min_height
Token main.Token.(
Token main.Token.d_number: 120.0
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: label
Token main.Token.(
Token main.Token.d_string: "What caused egui to repaint:"
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: add_space
Token main.Token.(
Token main.Token.d_number: 8.0
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: causes
Token main.Token.=
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: ctx
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: repaint_causes
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_for
Token main.Token.d_ident: cause
Token main.Token.kw_in
Token main.Token.d_ident: causes
Token main.Token.{
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: label
Token main.Token.(
Token main.Token.d_ident: cause
Token main.Token..
Token main.Token.d_ident: to_string
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.}
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: CollapsingHeader
Token main.Token.::
Token main.Token.d_ident: new
Token main.Token.(
Token main.Token.d_string: "📥 Input"
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: default_open
Token main.Token.(
Token main.Token.d_ident: false
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: show
Token main.Token.(
Token main.Token.d_ident: ui
Token main.Token.,
Token main.Token.|
Token main.Token.d_ident: ui
Token main.Token.|
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: input
Token main.Token.=
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: input
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: i
Token main.Token.|
Token main.Token.d_ident: i
Token main.Token..
Token main.Token.d_ident: clone
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: input
Token main.Token..
Token main.Token.d_ident: ui
Token main.Token.(
Token main.Token.d_ident: ui
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: CollapsingHeader
Token main.Token.::
Token main.Token.d_ident: new
Token main.Token.(
Token main.Token.d_string: "📊 Paint stats"
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: default_open
Token main.Token.(
Token main.Token.d_ident: false
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: show
Token main.Token.(
Token main.Token.d_ident: ui
Token main.Token.,
Token main.Token.|
Token main.Token.d_ident: ui
Token main.Token.|
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: paint_stats
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: read
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: paint_stats
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: paint_stats
Token main.Token..
Token main.Token.d_ident: ui
Token main.Token.(
Token main.Token.d_ident: ui
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: CollapsingHeader
Token main.Token.::
Token main.Token.d_ident: new
Token main.Token.(
Token main.Token.d_string: "🖼 Textures"
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: default_open
Token main.Token.(
Token main.Token.d_ident: false
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: show
Token main.Token.(
Token main.Token.d_ident: ui
Token main.Token.,
Token main.Token.|
Token main.Token.d_ident: ui
Token main.Token.|
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: texture_ui
Token main.Token.(
Token main.Token.d_ident: ui
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: CollapsingHeader
Token main.Token.::
Token main.Token.d_ident: new
Token main.Token.(
Token main.Token.d_string: "🔠 Font texture"
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: default_open
Token main.Token.(
Token main.Token.d_ident: false
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: show
Token main.Token.(
Token main.Token.d_ident: ui
Token main.Token.,
Token main.Token.|
Token main.Token.d_ident: ui
Token main.Token.|
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: font_image_size
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: fonts
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: f
Token main.Token.|
Token main.Token.d_ident: f
Token main.Token..
Token main.Token.d_ident: font_image_size
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: crate
Token main.Token.::
Token main.Token.d_ident: introspection
Token main.Token.::
Token main.Token.d_ident: font_texture_ui
Token main.Token.(
Token main.Token.d_ident: ui
Token main.Token.,
Token main.Token.d_ident: font_image_size
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: CollapsingHeader
Token main.Token.::
Token main.Token.d_ident: new
Token main.Token.(
Token main.Token.d_string: "Label text selection state"
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: default_open
Token main.Token.(
Token main.Token.d_ident: false
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: show
Token main.Token.(
Token main.Token.d_ident: ui
Token main.Token.,
Token main.Token.|
Token main.Token.d_ident: ui
Token main.Token.|
Token main.Token.{
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: label
Token main.Token.(
Token main.Token.d_ident: format
Token main.Token.!
Token main.Token.(
Token main.Token.d_string: "{:#?}"
Token main.Token.,
Token main.Token.d_ident: crate
Token main.Token.::
Token main.Token.d_ident: text_selection
Token main.Token.::
Token main.Token.d_ident: LabelSelectionState
Token main.Token.::
Token main.Token.d_ident: load
Token main.Token.(
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: ctx
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: CollapsingHeader
Token main.Token.::
Token main.Token.d_ident: new
Token main.Token.(
Token main.Token.d_string: "Interaction"
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: default_open
Token main.Token.(
Token main.Token.d_ident: false
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: show
Token main.Token.(
Token main.Token.d_ident: ui
Token main.Token.,
Token main.Token.|
Token main.Token.d_ident: ui
Token main.Token.|
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: interact_widgets
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: viewport
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: interact_widgets
Token main.Token..
Token main.Token.d_ident: clone
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: interact_widgets
Token main.Token..
Token main.Token.d_ident: ui
Token main.Token.(
Token main.Token.d_ident: ui
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.)
Token main.Token.;
Token main.Token.}
    BEFORE: /// Show stats about the allocated textures.
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: texture_ui
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: ui
Token main.Token.:
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: crate
Token main.Token.::
Token main.Token.d_ident: Ui
Token main.Token.)
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: tex_mngr
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: tex_manager
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: tex_mngr
Token main.Token.=
Token main.Token.d_ident: tex_mngr
Token main.Token..
Token main.Token.d_ident: read
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.kw_mut
Token main.Token.d_ident: textures
Token main.Token.:
Token main.Token.d_ident: Vec
Token main.Token.<
Token main.Token.d_ident: _
Token main.Token.>
Token main.Token.=
Token main.Token.d_ident: tex_mngr
Token main.Token..
Token main.Token.d_ident: allocated
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: collect
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: textures
Token main.Token..
Token main.Token.d_ident: sort_by_key
Token main.Token.(
Token main.Token.|
Token main.Token.(
Token main.Token.d_ident: id
Token main.Token.,
Token main.Token.d_ident: _
Token main.Token.)
Token main.Token.|
Token main.Token.*
Token main.Token.d_ident: id
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.kw_mut
Token main.Token.d_ident: bytes
Token main.Token.=
Token main.Token.d_number: 0
Token main.Token.;
Token main.Token.kw_for
Token main.Token.(
Token main.Token.d_ident: _
Token main.Token.,
Token main.Token.d_ident: tex
Token main.Token.)
Token main.Token.kw_in
Token main.Token.&
Token main.Token.d_ident: textures
Token main.Token.{
Token main.Token.d_ident: bytes
Token main.Token.+
Token main.Token.=
Token main.Token.d_ident: tex
Token main.Token..
Token main.Token.d_ident: bytes_used
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: label
Token main.Token.(
Token main.Token.d_ident: format
Token main.Token.!
Token main.Token.(
Token main.Token.d_string: "{} allocated texture(s), using {:.1} MB"
Token main.Token.,
Token main.Token.d_ident: textures
Token main.Token..
Token main.Token.d_ident: len
Token main.Token.(
Token main.Token.)
Token main.Token.,
Token main.Token.d_ident: bytes
Token main.Token.d_ident: as
Token main.Token.d_ident: f64
Token main.Token.*
Token main.Token.d_number: 1e-6
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: max_preview_size
Token main.Token.=
Token main.Token.d_ident: vec2
Token main.Token.(
Token main.Token.d_number: 48.0
Token main.Token.,
Token main.Token.d_number: 32.0
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: group
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ui
Token main.Token.|
Token main.Token.{
Token main.Token.d_ident: ScrollArea
Token main.Token.::
Token main.Token.d_ident: vertical
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: max_height
Token main.Token.(
Token main.Token.d_number: 300.0
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: auto_shrink
Token main.Token.(
Token main.Token.[
Token main.Token.d_ident: false
Token main.Token.,
Token main.Token.d_ident: true
Token main.Token.]
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: show
Token main.Token.(
Token main.Token.d_ident: ui
Token main.Token.,
Token main.Token.|
Token main.Token.d_ident: ui
Token main.Token.|
Token main.Token.{
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: style_mut
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: override_text_style
Token main.Token.=
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: TextStyle
Token main.Token.::
Token main.Token.d_ident: Monospace
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: Grid
Token main.Token.::
Token main.Token.d_ident: new
Token main.Token.(
Token main.Token.d_string: "textures"
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: striped
Token main.Token.(
Token main.Token.d_ident: true
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: num_columns
Token main.Token.(
Token main.Token.d_number: 4
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: spacing
Token main.Token.(
Token main.Token.d_ident: vec2
Token main.Token.(
Token main.Token.d_number: 16.0
Token main.Token.,
Token main.Token.d_number: 2.0
Token main.Token.)
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: min_row_height
Token main.Token.(
Token main.Token.d_ident: max_preview_size
Token main.Token..
Token main.Token.d_ident: y
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: show
Token main.Token.(
Token main.Token.d_ident: ui
Token main.Token.,
Token main.Token.|
Token main.Token.d_ident: ui
Token main.Token.|
Token main.Token.{
Token main.Token.kw_for
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: texture_id
Token main.Token.,
Token main.Token.d_ident: meta
Token main.Token.)
Token main.Token.kw_in
Token main.Token.d_ident: textures
Token main.Token.{
Token main.Token.kw_let
Token main.Token.[
Token main.Token.d_ident: w
Token main.Token.,
Token main.Token.d_ident: h
Token main.Token.]
Token main.Token.=
Token main.Token.d_ident: meta
Token main.Token..
Token main.Token.d_ident: size
Token main.Token.;
Token main.Token.kw_let
Token main.Token.kw_mut
Token main.Token.d_ident: size
Token main.Token.=
Token main.Token.d_ident: vec2
Token main.Token.(
Token main.Token.d_ident: w
Token main.Token.d_ident: as
Token main.Token.d_ident: f32
Token main.Token.,
Token main.Token.d_ident: h
Token main.Token.d_ident: as
Token main.Token.d_ident: f32
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: size
Token main.Token.*
Token main.Token.=
Token main.Token.(
Token main.Token.d_ident: max_preview_size
Token main.Token..
Token main.Token.d_ident: x
Token main.Token./
Token main.Token.d_ident: size
Token main.Token..
Token main.Token.d_ident: x
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: min
Token main.Token.(
Token main.Token.d_number: 1.0
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: size
Token main.Token.*
Token main.Token.=
Token main.Token.(
Token main.Token.d_ident: max_preview_size
Token main.Token..
Token main.Token.d_ident: y
Token main.Token./
Token main.Token.d_ident: size
Token main.Token..
Token main.Token.d_ident: y
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: min
Token main.Token.(
Token main.Token.d_number: 1.0
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: image
Token main.Token.(
Token main.Token.d_ident: SizedTexture
Token main.Token.::
Token main.Token.d_ident: new
Token main.Token.(
Token main.Token.d_ident: texture_id
Token main.Token.,
Token main.Token.d_ident: size
Token main.Token.)
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: on_hover_ui
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ui
Token main.Token.|
Token main.Token.{
    BEFORE: // show larger on hover
Token main.Token.kw_let
Token main.Token.d_ident: max_size
Token main.Token.=
Token main.Token.d_number: 0.5
Token main.Token.*
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: ctx
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: screen_rect
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: size
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.kw_mut
Token main.Token.d_ident: size
Token main.Token.=
Token main.Token.d_ident: vec2
Token main.Token.(
Token main.Token.d_ident: w
Token main.Token.d_ident: as
Token main.Token.d_ident: f32
Token main.Token.,
Token main.Token.d_ident: h
Token main.Token.d_ident: as
Token main.Token.d_ident: f32
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: size
Token main.Token.*
Token main.Token.=
Token main.Token.d_ident: max_size
Token main.Token..
Token main.Token.d_ident: x
Token main.Token./
Token main.Token.d_ident: size
Token main.Token..
Token main.Token.d_ident: x
Token main.Token..
Token main.Token.d_ident: max
Token main.Token.(
Token main.Token.d_ident: max_size
Token main.Token..
Token main.Token.d_ident: x
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: size
Token main.Token.*
Token main.Token.=
Token main.Token.d_ident: max_size
Token main.Token..
Token main.Token.d_ident: y
Token main.Token./
Token main.Token.d_ident: size
Token main.Token..
Token main.Token.d_ident: y
Token main.Token..
Token main.Token.d_ident: max
Token main.Token.(
Token main.Token.d_ident: max_size
Token main.Token..
Token main.Token.d_ident: y
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: image
Token main.Token.(
Token main.Token.d_ident: SizedTexture
Token main.Token.::
Token main.Token.d_ident: new
Token main.Token.(
Token main.Token.d_ident: texture_id
Token main.Token.,
Token main.Token.d_ident: size
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: label
Token main.Token.(
Token main.Token.d_ident: format
Token main.Token.!
Token main.Token.(
Token main.Token.d_string: "{w} x {h}"
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: label
Token main.Token.(
Token main.Token.d_ident: format
Token main.Token.!
Token main.Token.(
Token main.Token.d_string: "{:.3} MB"
Token main.Token.,
Token main.Token.d_ident: meta
Token main.Token..
Token main.Token.d_ident: bytes_used
Token main.Token.(
Token main.Token.)
Token main.Token.d_ident: as
Token main.Token.d_ident: f64
Token main.Token.*
Token main.Token.d_number: 1e-6
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: label
Token main.Token.(
Token main.Token.d_ident: format
Token main.Token.!
Token main.Token.(
Token main.Token.d_string: "{:?}"
Token main.Token.,
Token main.Token.d_ident: meta
Token main.Token..
Token main.Token.d_ident: name
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: end_row
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.}
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.)
Token main.Token.;
Token main.Token.}
    BEFORE: /// Shows the contents of [`Self::memory`].
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: memory_ui
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: ui
Token main.Token.:
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: crate
Token main.Token.::
Token main.Token.d_ident: Ui
Token main.Token.)
Token main.Token.{
Token main.Token.kw_if
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: button
Token main.Token.(
Token main.Token.d_string: "Reset all"
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: on_hover_text
Token main.Token.(
Token main.Token.d_string: "Reset all egui state"
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: clicked
Token main.Token.(
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: memory_mut
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: mem
Token main.Token.|
Token main.Token.*
Token main.Token.d_ident: mem
Token main.Token.=
Token main.Token.d_ident: Default
Token main.Token.::
Token main.Token.d_ident: default
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.kw_let
Token main.Token.(
Token main.Token.d_ident: num_state
Token main.Token.,
Token main.Token.d_ident: num_serialized
Token main.Token.)
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: data
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: d
Token main.Token.|
Token main.Token.(
Token main.Token.d_ident: d
Token main.Token..
Token main.Token.d_ident: len
Token main.Token.(
Token main.Token.)
Token main.Token.,
Token main.Token.d_ident: d
Token main.Token..
Token main.Token.d_ident: count_serialized
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: label
Token main.Token.(
Token main.Token.d_ident: format
Token main.Token.!
Token main.Token.(
Token main.Token.d_string: "{num_state} widget states stored (of which {num_serialized} are serialized)."
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: horizontal
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ui
Token main.Token.|
Token main.Token.{
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: label
Token main.Token.(
Token main.Token.d_ident: format
Token main.Token.!
Token main.Token.(
Token main.Token.d_string: "{} areas (panels, windows, popups, …)"
Token main.Token.,
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: memory
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: mem
Token main.Token.|
Token main.Token.d_ident: mem
Token main.Token..
Token main.Token.d_ident: areas
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: count
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.kw_if
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: button
Token main.Token.(
Token main.Token.d_string: "Reset"
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: clicked
Token main.Token.(
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: memory_mut
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: mem
Token main.Token.|
Token main.Token.*
Token main.Token.d_ident: mem
Token main.Token..
Token main.Token.d_ident: areas_mut
Token main.Token.(
Token main.Token.)
Token main.Token.=
Token main.Token.d_ident: Default
Token main.Token.::
Token main.Token.d_ident: default
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.}
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: indent
Token main.Token.(
Token main.Token.d_string: "areas"
Token main.Token.,
Token main.Token.|
Token main.Token.d_ident: ui
Token main.Token.|
Token main.Token.{
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: label
Token main.Token.(
Token main.Token.d_string: "Visible areas, ordered back to front."
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: label
Token main.Token.(
Token main.Token.d_string: "Hover to highlight"
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: layers_ids
Token main.Token.:
Token main.Token.d_ident: Vec
Token main.Token.<
Token main.Token.d_ident: LayerId
Token main.Token.>
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: memory
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: mem
Token main.Token.|
Token main.Token.d_ident: mem
Token main.Token..
Token main.Token.d_ident: areas
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: order
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: to_vec
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.kw_for
Token main.Token.d_ident: layer_id
Token main.Token.kw_in
Token main.Token.d_ident: layers_ids
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: area
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: memory
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: mem
Token main.Token.|
Token main.Token.d_ident: mem
Token main.Token..
Token main.Token.d_ident: areas
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: get
Token main.Token.(
Token main.Token.d_ident: layer_id
Token main.Token..
Token main.Token.d_ident: id
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: copied
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.kw_if
Token main.Token.kw_let
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: area
Token main.Token.)
Token main.Token.=
Token main.Token.d_ident: area
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: is_visible
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: memory
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: mem
Token main.Token.|
Token main.Token.d_ident: mem
Token main.Token..
Token main.Token.d_ident: areas
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: is_visible
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: layer_id
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.kw_if
Token main.Token.!
Token main.Token.d_ident: is_visible
Token main.Token.{
Token main.Token.d_ident: continue
Token main.Token.;
Token main.Token.}
Token main.Token.kw_let
Token main.Token.d_ident: text
Token main.Token.=
Token main.Token.d_ident: format
Token main.Token.!
Token main.Token.(
Token main.Token.d_string: "{} - {:?}"
Token main.Token.,
Token main.Token.d_ident: layer_id
Token main.Token..
Token main.Token.d_ident: short_debug_format
Token main.Token.(
Token main.Token.)
Token main.Token.,
Token main.Token.d_ident: area
Token main.Token..
Token main.Token.d_ident: rect
Token main.Token.(
Token main.Token.)
Token main.Token.,
Token main.Token.)
Token main.Token.;
    BEFORE: // TODO(emilk): `Sense::hover_highlight()`
Token main.Token.kw_if
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: add
Token main.Token.(
Token main.Token.d_ident: Label
Token main.Token.::
Token main.Token.d_ident: new
Token main.Token.(
Token main.Token.d_ident: RichText
Token main.Token.::
Token main.Token.d_ident: new
Token main.Token.(
Token main.Token.d_ident: text
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: monospace
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: sense
Token main.Token.(
Token main.Token.d_ident: Sense
Token main.Token.::
Token main.Token.d_ident: click
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: hovered
Token main.Token.&
Token main.Token.&
Token main.Token.d_ident: is_visible
Token main.Token.{
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: ctx
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: debug_painter
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: debug_rect
Token main.Token.(
Token main.Token.d_ident: area
Token main.Token..
Token main.Token.d_ident: rect
Token main.Token.(
Token main.Token.)
Token main.Token.,
Token main.Token.d_ident: Color32
Token main.Token.::
Token main.Token.d_ident: RED
Token main.Token.,
Token main.Token.d_string: ""
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.}
Token main.Token.}
Token main.Token.}
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: horizontal
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ui
Token main.Token.|
Token main.Token.{
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: label
Token main.Token.(
Token main.Token.d_ident: format
Token main.Token.!
Token main.Token.(
Token main.Token.d_string: "{} collapsing headers"
Token main.Token.,
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: data
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: d
Token main.Token.|
Token main.Token.d_ident: d
Token main.Token..
Token main.Token.d_ident: count
Token main.Token.::
Token main.Token.<
Token main.Token.d_ident: containers
Token main.Token.::
Token main.Token.d_ident: collapsing_header
Token main.Token.::
Token main.Token.d_ident: InnerState
Token main.Token.>
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.kw_if
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: button
Token main.Token.(
Token main.Token.d_string: "Reset"
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: clicked
Token main.Token.(
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: data_mut
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: d
Token main.Token.|
Token main.Token.d_ident: d
Token main.Token..
Token main.Token.d_ident: remove_by_type
Token main.Token.::
Token main.Token.<
Token main.Token.d_ident: containers
Token main.Token.::
Token main.Token.d_ident: collapsing_header
Token main.Token.::
Token main.Token.d_ident: InnerState
Token main.Token.>
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.}
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: horizontal
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ui
Token main.Token.|
Token main.Token.{
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: label
Token main.Token.(
Token main.Token.d_ident: format
Token main.Token.!
Token main.Token.(
Token main.Token.d_string: "{} menu bars"
Token main.Token.,
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: data
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: d
Token main.Token.|
Token main.Token.d_ident: d
Token main.Token..
Token main.Token.d_ident: count
Token main.Token.::
Token main.Token.<
Token main.Token.d_ident: menu
Token main.Token.::
Token main.Token.d_ident: BarState
Token main.Token.>
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.kw_if
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: button
Token main.Token.(
Token main.Token.d_string: "Reset"
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: clicked
Token main.Token.(
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: data_mut
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: d
Token main.Token.|
Token main.Token.d_ident: d
Token main.Token..
Token main.Token.d_ident: remove_by_type
Token main.Token.::
Token main.Token.<
Token main.Token.d_ident: menu
Token main.Token.::
Token main.Token.d_ident: BarState
Token main.Token.>
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.}
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: horizontal
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ui
Token main.Token.|
Token main.Token.{
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: label
Token main.Token.(
Token main.Token.d_ident: format
Token main.Token.!
Token main.Token.(
Token main.Token.d_string: "{} scroll areas"
Token main.Token.,
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: data
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: d
Token main.Token.|
Token main.Token.d_ident: d
Token main.Token..
Token main.Token.d_ident: count
Token main.Token.::
Token main.Token.<
Token main.Token.d_ident: scroll_area
Token main.Token.::
Token main.Token.d_ident: State
Token main.Token.>
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.kw_if
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: button
Token main.Token.(
Token main.Token.d_string: "Reset"
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: clicked
Token main.Token.(
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: data_mut
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: d
Token main.Token.|
Token main.Token.d_ident: d
Token main.Token..
Token main.Token.d_ident: remove_by_type
Token main.Token.::
Token main.Token.<
Token main.Token.d_ident: scroll_area
Token main.Token.::
Token main.Token.d_ident: State
Token main.Token.>
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.}
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: horizontal
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ui
Token main.Token.|
Token main.Token.{
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: label
Token main.Token.(
Token main.Token.d_ident: format
Token main.Token.!
Token main.Token.(
Token main.Token.d_string: "{} resize areas"
Token main.Token.,
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: data
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: d
Token main.Token.|
Token main.Token.d_ident: d
Token main.Token..
Token main.Token.d_ident: count
Token main.Token.::
Token main.Token.<
Token main.Token.d_ident: resize
Token main.Token.::
Token main.Token.d_ident: State
Token main.Token.>
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.kw_if
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: button
Token main.Token.(
Token main.Token.d_string: "Reset"
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: clicked
Token main.Token.(
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: data_mut
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: d
Token main.Token.|
Token main.Token.d_ident: d
Token main.Token..
Token main.Token.d_ident: remove_by_type
Token main.Token.::
Token main.Token.<
Token main.Token.d_ident: resize
Token main.Token.::
Token main.Token.d_ident: State
Token main.Token.>
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.}
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: shrink_width_to_current
Token main.Token.(
Token main.Token.)
Token main.Token.;
    AFTER: // don't let the text below grow this window wider
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: label
Token main.Token.(
Token main.Token.d_string: "NOTE: the position of this window cannot be reset from within itself."
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: ui
Token main.Token..
Token main.Token.d_ident: collapsing
Token main.Token.(
Token main.Token.d_string: "Interaction"
Token main.Token.,
Token main.Token.|
Token main.Token.d_ident: ui
Token main.Token.|
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: interaction
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: memory
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: mem
Token main.Token.|
Token main.Token.d_ident: mem
Token main.Token..
Token main.Token.d_ident: interaction
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: clone
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: interaction
Token main.Token..
Token main.Token.d_ident: ui
Token main.Token.(
Token main.Token.d_ident: ui
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.}
Token main.Token.kw_impl
Token main.Token.d_ident: Context
Token main.Token.{
    BEFORE: /// Edit the active [`Style`].
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: style_ui
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: ui
Token main.Token.:
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: Ui
Token main.Token.)
Token main.Token.{
Token main.Token.kw_let
Token main.Token.kw_mut
Token main.Token.d_ident: style
Token main.Token.:
Token main.Token.d_ident: Style
Token main.Token.=
Token main.Token.(
Token main.Token.*
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: style
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: clone
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: style
Token main.Token..
Token main.Token.d_ident: ui
Token main.Token.(
Token main.Token.d_ident: ui
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: set_style
Token main.Token.(
Token main.Token.d_ident: style
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.}
    BEFORE: /// ## Accessibility
Token main.Token.kw_impl
Token main.Token.d_ident: Context
Token main.Token.{
    BEFORE: /// Call the provided function with the given ID pushed on the stack of
    BEFORE: /// parent IDs for accessibility purposes. If the `accesskit` feature
    BEFORE: /// is disabled or if AccessKit support is not active for this frame,
    BEFORE: /// the function is still called, but with no other effect.
    BEFORE: ///
    BEFORE: /// No locks are held while the given closure is called.
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: allow
Token main.Token.(
Token main.Token.d_ident: clippy
Token main.Token.::
Token main.Token.d_ident: unused_self
Token main.Token.)
Token main.Token.]
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: inline
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: with_accessibility_parent
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: _id
Token main.Token.:
Token main.Token.d_ident: Id
Token main.Token.,
Token main.Token.d_ident: f
Token main.Token.:
Token main.Token.kw_impl
Token main.Token.d_ident: FnOnce
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.{
    BEFORE: // TODO(emilk): this isn't thread-safe - another thread can call this function between the push/pop calls
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: cfg
Token main.Token.(
Token main.Token.d_ident: feature
Token main.Token.=
Token main.Token.d_string: "accesskit"
Token main.Token.)
Token main.Token.]
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: frame_state_mut
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: fs
Token main.Token.|
Token main.Token.{
Token main.Token.kw_if
Token main.Token.kw_let
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: state
Token main.Token.)
Token main.Token.=
Token main.Token.d_ident: fs
Token main.Token..
Token main.Token.d_ident: accesskit_state
Token main.Token..
Token main.Token.d_ident: as_mut
Token main.Token.(
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: state
Token main.Token..
Token main.Token.d_ident: parent_stack
Token main.Token..
Token main.Token.d_ident: push
Token main.Token.(
Token main.Token.d_ident: _id
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.}
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: f
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: cfg
Token main.Token.(
Token main.Token.d_ident: feature
Token main.Token.=
Token main.Token.d_string: "accesskit"
Token main.Token.)
Token main.Token.]
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: frame_state_mut
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: fs
Token main.Token.|
Token main.Token.{
Token main.Token.kw_if
Token main.Token.kw_let
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: state
Token main.Token.)
Token main.Token.=
Token main.Token.d_ident: fs
Token main.Token..
Token main.Token.d_ident: accesskit_state
Token main.Token..
Token main.Token.d_ident: as_mut
Token main.Token.(
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: assert_eq
Token main.Token.!
Token main.Token.(
Token main.Token.d_ident: state
Token main.Token..
Token main.Token.d_ident: parent_stack
Token main.Token..
Token main.Token.d_ident: pop
Token main.Token.(
Token main.Token.)
Token main.Token.,
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: _id
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.}
Token main.Token.)
Token main.Token.;
Token main.Token.}
    BEFORE: /// If AccessKit support is active for the current frame, get or create
    BEFORE: /// a node builder with the specified ID and return a mutable reference to it.
    BEFORE: /// For newly created nodes, the parent is the node with the ID at the top
    BEFORE: /// of the stack managed by [`Context::with_accessibility_parent`].
    BEFORE: ///
    BEFORE: /// The `Context` lock is held while the given closure is called!
    BEFORE: ///
    BEFORE: /// Returns `None` if acesskit is off.
    BEFORE: // TODO: consider making both RO and RW versions
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: cfg
Token main.Token.(
Token main.Token.d_ident: feature
Token main.Token.=
Token main.Token.d_string: "accesskit"
Token main.Token.)
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: accesskit_node_builder
Token main.Token.<
Token main.Token.d_ident: R
Token main.Token.>
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: id
Token main.Token.:
Token main.Token.d_ident: Id
Token main.Token.,
Token main.Token.d_ident: writer
Token main.Token.:
Token main.Token.kw_impl
Token main.Token.d_ident: FnOnce
Token main.Token.(
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: accesskit
Token main.Token.::
Token main.Token.d_ident: NodeBuilder
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: R
Token main.Token.,
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: Option
Token main.Token.<
Token main.Token.d_ident: R
Token main.Token.>
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.{
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: viewport
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: frame_state
Token main.Token..
Token main.Token.d_ident: accesskit_state
Token main.Token..
Token main.Token.d_ident: is_some
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: then
Token main.Token.(
Token main.Token.|
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: accesskit_node_builder
Token main.Token.(
Token main.Token.d_ident: id
Token main.Token.)
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: map
Token main.Token.(
Token main.Token.d_ident: writer
Token main.Token.)
Token main.Token.}
Token main.Token.)
Token main.Token.}
    BEFORE: /// Enable generation of AccessKit tree updates in all future frames.
    BEFORE: ///
    BEFORE: /// If it's practical for the egui integration to immediately run the egui
    BEFORE: /// application when it is either initializing the AccessKit adapter or
    BEFORE: /// being called by the AccessKit adapter to provide the initial tree update,
    BEFORE: /// then it should do so, to provide a complete AccessKit tree to the adapter
    BEFORE: /// immediately. Otherwise, it should enqueue a repaint and use the
    BEFORE: /// placeholder tree update from [`Context::accesskit_placeholder_tree_update`]
    BEFORE: /// in the meantime.
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: cfg
Token main.Token.(
Token main.Token.d_ident: feature
Token main.Token.=
Token main.Token.d_string: "accesskit"
Token main.Token.)
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: enable_accesskit
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: is_accesskit_enabled
Token main.Token.=
Token main.Token.d_ident: true
Token main.Token.)
Token main.Token.;
Token main.Token.}
    BEFORE: /// Return a tree update that the egui integration should provide to the
    BEFORE: /// AccessKit adapter if it cannot immediately run the egui application
    BEFORE: /// to get a full tree update after running [`Context::enable_accesskit`].
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: cfg
Token main.Token.(
Token main.Token.d_ident: feature
Token main.Token.=
Token main.Token.d_string: "accesskit"
Token main.Token.)
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: accesskit_placeholder_tree_update
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: accesskit
Token main.Token.::
Token main.Token.d_ident: TreeUpdate
Token main.Token.{
Token main.Token.d_ident: crate
Token main.Token.::
Token main.Token.d_ident: profile_function
Token main.Token.!
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_use
Token main.Token.d_ident: accesskit
Token main.Token.::
Token main.Token.{
Token main.Token.d_ident: NodeBuilder
Token main.Token.,
Token main.Token.d_ident: Role
Token main.Token.,
Token main.Token.d_ident: Tree
Token main.Token.,
Token main.Token.d_ident: TreeUpdate
Token main.Token.}
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: root_id
Token main.Token.=
Token main.Token.d_ident: crate
Token main.Token.::
Token main.Token.d_ident: accesskit_root_id
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: accesskit_id
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.d_ident: TreeUpdate
Token main.Token.{
Token main.Token.d_ident: nodes
Token main.Token.:
Token main.Token.d_ident: vec
Token main.Token.!
Token main.Token.[
Token main.Token.(
Token main.Token.d_ident: root_id
Token main.Token.,
Token main.Token.d_ident: NodeBuilder
Token main.Token.::
Token main.Token.d_ident: new
Token main.Token.(
Token main.Token.d_ident: Role
Token main.Token.::
Token main.Token.d_ident: Window
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: build
Token main.Token.(
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: accesskit_node_classes
Token main.Token.)
Token main.Token.,
Token main.Token.)
Token main.Token.]
Token main.Token.,
Token main.Token.d_ident: tree
Token main.Token.:
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: Tree
Token main.Token.::
Token main.Token.d_ident: new
Token main.Token.(
Token main.Token.d_ident: root_id
Token main.Token.)
Token main.Token.)
Token main.Token.,
Token main.Token.d_ident: focus
Token main.Token.:
Token main.Token.d_ident: root_id
Token main.Token.,
Token main.Token.}
Token main.Token.)
Token main.Token.}
Token main.Token.}
    BEFORE: /// ## Image loading
Token main.Token.kw_impl
Token main.Token.d_ident: Context
Token main.Token.{
    BEFORE: /// Associate some static bytes with a `uri`.
    BEFORE: ///
    BEFORE: /// The same `uri` may be passed to [`Ui::image`] later to load the bytes as an image.
    BEFORE: ///
    BEFORE: /// By convention, the `uri` should start with `bytes://`.
    BEFORE: /// Following that convention will lead to better error messages.
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: include_bytes
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: uri
Token main.Token.:
Token main.Token.kw_impl
Token main.Token.d_ident: Into
Token main.Token.<
Token main.Token.d_ident: Cow
Token main.Token.<
Token main.Token.'
Token main.Token.kw_static
Token main.Token.,
Token main.Token.d_ident: str
Token main.Token.>
Token main.Token.>
Token main.Token.,
Token main.Token.d_ident: bytes
Token main.Token.:
Token main.Token.kw_impl
Token main.Token.d_ident: Into
Token main.Token.<
Token main.Token.d_ident: Bytes
Token main.Token.>
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: loaders
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: include
Token main.Token..
Token main.Token.d_ident: insert
Token main.Token.(
Token main.Token.d_ident: uri
Token main.Token.,
Token main.Token.d_ident: bytes
Token main.Token.)
Token main.Token.;
Token main.Token.}
    BEFORE: /// Returns `true` if the chain of bytes, image, or texture loaders
    BEFORE: /// contains a loader with the given `id`.
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: is_loader_installed
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: id
Token main.Token.:
Token main.Token.&
Token main.Token.d_ident: str
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: bool
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: loaders
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: loaders
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: loaders
Token main.Token..
Token main.Token.d_ident: bytes
Token main.Token..
Token main.Token.d_ident: lock
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: iter
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: any
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: l
Token main.Token.|
Token main.Token.d_ident: l
Token main.Token..
Token main.Token.d_ident: id
Token main.Token.(
Token main.Token.)
Token main.Token.==
Token main.Token.d_ident: id
Token main.Token.)
Token main.Token.|
Token main.Token.|
Token main.Token.d_ident: loaders
Token main.Token..
Token main.Token.d_ident: image
Token main.Token..
Token main.Token.d_ident: lock
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: iter
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: any
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: l
Token main.Token.|
Token main.Token.d_ident: l
Token main.Token..
Token main.Token.d_ident: id
Token main.Token.(
Token main.Token.)
Token main.Token.==
Token main.Token.d_ident: id
Token main.Token.)
Token main.Token.|
Token main.Token.|
Token main.Token.d_ident: loaders
Token main.Token..
Token main.Token.d_ident: texture
Token main.Token..
Token main.Token.d_ident: lock
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: iter
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: any
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: l
Token main.Token.|
Token main.Token.d_ident: l
Token main.Token..
Token main.Token.d_ident: id
Token main.Token.(
Token main.Token.)
Token main.Token.==
Token main.Token.d_ident: id
Token main.Token.)
Token main.Token.}
    BEFORE: /// Add a new bytes loader.
    BEFORE: ///
    BEFORE: /// It will be tried first, before any already installed loaders.
    BEFORE: ///
    BEFORE: /// See [`load`] for more information.
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: add_bytes_loader
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: loader
Token main.Token.:
Token main.Token.d_ident: Arc
Token main.Token.<
Token main.Token.kw_dyn
Token main.Token.d_ident: load
Token main.Token.::
Token main.Token.d_ident: BytesLoader
Token main.Token.+
Token main.Token.d_ident: Send
Token main.Token.+
Token main.Token.d_ident: Sync
Token main.Token.+
Token main.Token.'
Token main.Token.kw_static
Token main.Token.>
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: loaders
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: bytes
Token main.Token..
Token main.Token.d_ident: lock
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: push
Token main.Token.(
Token main.Token.d_ident: loader
Token main.Token.)
Token main.Token.;
Token main.Token.}
    BEFORE: /// Add a new image loader.
    BEFORE: ///
    BEFORE: /// It will be tried first, before any already installed loaders.
    BEFORE: ///
    BEFORE: /// See [`load`] for more information.
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: add_image_loader
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: loader
Token main.Token.:
Token main.Token.d_ident: Arc
Token main.Token.<
Token main.Token.kw_dyn
Token main.Token.d_ident: load
Token main.Token.::
Token main.Token.d_ident: ImageLoader
Token main.Token.+
Token main.Token.d_ident: Send
Token main.Token.+
Token main.Token.d_ident: Sync
Token main.Token.+
Token main.Token.'
Token main.Token.kw_static
Token main.Token.>
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: loaders
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: image
Token main.Token..
Token main.Token.d_ident: lock
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: push
Token main.Token.(
Token main.Token.d_ident: loader
Token main.Token.)
Token main.Token.;
Token main.Token.}
    BEFORE: /// Add a new texture loader.
    BEFORE: ///
    BEFORE: /// It will be tried first, before any already installed loaders.
    BEFORE: ///
    BEFORE: /// See [`load`] for more information.
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: add_texture_loader
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: loader
Token main.Token.:
Token main.Token.d_ident: Arc
Token main.Token.<
Token main.Token.kw_dyn
Token main.Token.d_ident: load
Token main.Token.::
Token main.Token.d_ident: TextureLoader
Token main.Token.+
Token main.Token.d_ident: Send
Token main.Token.+
Token main.Token.d_ident: Sync
Token main.Token.+
Token main.Token.'
Token main.Token.kw_static
Token main.Token.>
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: loaders
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: texture
Token main.Token..
Token main.Token.d_ident: lock
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: push
Token main.Token.(
Token main.Token.d_ident: loader
Token main.Token.)
Token main.Token.;
Token main.Token.}
    BEFORE: /// Release all memory and textures related to the given image URI.
    BEFORE: ///
    BEFORE: /// If you attempt to load the image again, it will be reloaded from scratch.
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: forget_image
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: uri
Token main.Token.:
Token main.Token.&
Token main.Token.d_ident: str
Token main.Token.)
Token main.Token.{
Token main.Token.kw_use
Token main.Token.d_ident: load
Token main.Token.::
Token main.Token.d_ident: BytesLoader
Token main.Token.d_ident: as
Token main.Token.d_ident: _
Token main.Token.;
Token main.Token.d_ident: crate
Token main.Token.::
Token main.Token.d_ident: profile_function
Token main.Token.!
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: loaders
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: loaders
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: loaders
Token main.Token..
Token main.Token.d_ident: include
Token main.Token..
Token main.Token.d_ident: forget
Token main.Token.(
Token main.Token.d_ident: uri
Token main.Token.)
Token main.Token.;
Token main.Token.kw_for
Token main.Token.d_ident: loader
Token main.Token.kw_in
Token main.Token.d_ident: loaders
Token main.Token..
Token main.Token.d_ident: bytes
Token main.Token..
Token main.Token.d_ident: lock
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: iter
Token main.Token.(
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: loader
Token main.Token..
Token main.Token.d_ident: forget
Token main.Token.(
Token main.Token.d_ident: uri
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.kw_for
Token main.Token.d_ident: loader
Token main.Token.kw_in
Token main.Token.d_ident: loaders
Token main.Token..
Token main.Token.d_ident: image
Token main.Token..
Token main.Token.d_ident: lock
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: iter
Token main.Token.(
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: loader
Token main.Token..
Token main.Token.d_ident: forget
Token main.Token.(
Token main.Token.d_ident: uri
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.kw_for
Token main.Token.d_ident: loader
Token main.Token.kw_in
Token main.Token.d_ident: loaders
Token main.Token..
Token main.Token.d_ident: texture
Token main.Token..
Token main.Token.d_ident: lock
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: iter
Token main.Token.(
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: loader
Token main.Token..
Token main.Token.d_ident: forget
Token main.Token.(
Token main.Token.d_ident: uri
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.}
    BEFORE: /// Release all memory and textures related to images used in [`Ui::image`] or [`Image`].
    BEFORE: ///
    BEFORE: /// If you attempt to load any images again, they will be reloaded from scratch.
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: forget_all_images
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.{
Token main.Token.kw_use
Token main.Token.d_ident: load
Token main.Token.::
Token main.Token.d_ident: BytesLoader
Token main.Token.d_ident: as
Token main.Token.d_ident: _
Token main.Token.;
Token main.Token.d_ident: crate
Token main.Token.::
Token main.Token.d_ident: profile_function
Token main.Token.!
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: loaders
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: loaders
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: loaders
Token main.Token..
Token main.Token.d_ident: include
Token main.Token..
Token main.Token.d_ident: forget_all
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_for
Token main.Token.d_ident: loader
Token main.Token.kw_in
Token main.Token.d_ident: loaders
Token main.Token..
Token main.Token.d_ident: bytes
Token main.Token..
Token main.Token.d_ident: lock
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: iter
Token main.Token.(
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: loader
Token main.Token..
Token main.Token.d_ident: forget_all
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.kw_for
Token main.Token.d_ident: loader
Token main.Token.kw_in
Token main.Token.d_ident: loaders
Token main.Token..
Token main.Token.d_ident: image
Token main.Token..
Token main.Token.d_ident: lock
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: iter
Token main.Token.(
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: loader
Token main.Token..
Token main.Token.d_ident: forget_all
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.kw_for
Token main.Token.d_ident: loader
Token main.Token.kw_in
Token main.Token.d_ident: loaders
Token main.Token..
Token main.Token.d_ident: texture
Token main.Token..
Token main.Token.d_ident: lock
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: iter
Token main.Token.(
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: loader
Token main.Token..
Token main.Token.d_ident: forget_all
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.}
    BEFORE: /// Try loading the bytes from the given uri using any available bytes loaders.
    BEFORE: ///
    BEFORE: /// Loaders are expected to cache results, so that this call is immediate-mode safe.
    BEFORE: ///
    BEFORE: /// This calls the loaders one by one in the order in which they were registered.
    BEFORE: /// If a loader returns [`LoadError::NotSupported`][not_supported],
    BEFORE: /// then the next loader is called. This process repeats until all loaders have
    BEFORE: /// been exhausted, at which point this returns [`LoadError::NotSupported`][not_supported].
    BEFORE: ///
    BEFORE: /// # Errors
    BEFORE: /// This may fail with:
    BEFORE: /// - [`LoadError::NotSupported`][not_supported] if none of the registered loaders support loading the given `uri`.
    BEFORE: /// - [`LoadError::Loading`][custom] if one of the loaders _does_ support loading the `uri`, but the loading process failed.
    BEFORE: ///
    BEFORE: /// ⚠ May deadlock if called from within a `BytesLoader`!
    BEFORE: ///
    BEFORE: /// [not_supported]: crate::load::LoadError::NotSupported
    BEFORE: /// [custom]: crate::load::LoadError::Loading
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: try_load_bytes
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: uri
Token main.Token.:
Token main.Token.&
Token main.Token.d_ident: str
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: load
Token main.Token.::
Token main.Token.d_ident: BytesLoadResult
Token main.Token.{
Token main.Token.d_ident: crate
Token main.Token.::
Token main.Token.d_ident: profile_function
Token main.Token.!
Token main.Token.(
Token main.Token.d_ident: uri
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: loaders
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: loaders
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: bytes_loaders
Token main.Token.=
Token main.Token.d_ident: loaders
Token main.Token..
Token main.Token.d_ident: bytes
Token main.Token..
Token main.Token.d_ident: lock
Token main.Token.(
Token main.Token.)
Token main.Token.;
    BEFORE: // Try most recently added loaders first (hence `.rev()`)
Token main.Token.kw_for
Token main.Token.d_ident: loader
Token main.Token.kw_in
Token main.Token.d_ident: bytes_loaders
Token main.Token..
Token main.Token.d_ident: iter
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: rev
Token main.Token.(
Token main.Token.)
Token main.Token.{
Token main.Token.kw_match
Token main.Token.d_ident: loader
Token main.Token..
Token main.Token.d_ident: load
Token main.Token.(
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: uri
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: Err
Token main.Token.(
Token main.Token.d_ident: load
Token main.Token.::
Token main.Token.d_ident: LoadError
Token main.Token.::
Token main.Token.d_ident: NotSupported
Token main.Token.)
Token main.Token.=>
Token main.Token.d_ident: continue
Token main.Token.,
Token main.Token.d_ident: result
Token main.Token.=>
Token main.Token.kw_return
Token main.Token.d_ident: result
Token main.Token.,
Token main.Token.}
Token main.Token.}
Token main.Token.d_ident: Err
Token main.Token.(
Token main.Token.d_ident: load
Token main.Token.::
Token main.Token.d_ident: LoadError
Token main.Token.::
Token main.Token.d_ident: NoMatchingBytesLoader
Token main.Token.)
Token main.Token.}
    BEFORE: /// Try loading the image from the given uri using any available image loaders.
    BEFORE: ///
    BEFORE: /// Loaders are expected to cache results, so that this call is immediate-mode safe.
    BEFORE: ///
    BEFORE: /// This calls the loaders one by one in the order in which they were registered.
    BEFORE: /// If a loader returns [`LoadError::NotSupported`][not_supported],
    BEFORE: /// then the next loader is called. This process repeats until all loaders have
    BEFORE: /// been exhausted, at which point this returns [`LoadError::NotSupported`][not_supported].
    BEFORE: ///
    BEFORE: /// # Errors
    BEFORE: /// This may fail with:
    BEFORE: /// - [`LoadError::NoImageLoaders`][no_image_loaders] if tbere are no registered image loaders.
    BEFORE: /// - [`LoadError::NotSupported`][not_supported] if none of the registered loaders support loading the given `uri`.
    BEFORE: /// - [`LoadError::Loading`][custom] if one of the loaders _does_ support loading the `uri`, but the loading process failed.
    BEFORE: ///
    BEFORE: /// ⚠ May deadlock if called from within an `ImageLoader`!
    BEFORE: ///
    BEFORE: /// [no_image_loaders]: crate::load::LoadError::NoImageLoaders
    BEFORE: /// [not_supported]: crate::load::LoadError::NotSupported
    BEFORE: /// [custom]: crate::load::LoadError::Loading
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: try_load_image
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: uri
Token main.Token.:
Token main.Token.&
Token main.Token.d_ident: str
Token main.Token.,
Token main.Token.d_ident: size_hint
Token main.Token.:
Token main.Token.d_ident: load
Token main.Token.::
Token main.Token.d_ident: SizeHint
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: load
Token main.Token.::
Token main.Token.d_ident: ImageLoadResult
Token main.Token.{
Token main.Token.d_ident: crate
Token main.Token.::
Token main.Token.d_ident: profile_function
Token main.Token.!
Token main.Token.(
Token main.Token.d_ident: uri
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: loaders
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: loaders
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: image_loaders
Token main.Token.=
Token main.Token.d_ident: loaders
Token main.Token..
Token main.Token.d_ident: image
Token main.Token..
Token main.Token.d_ident: lock
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_if
Token main.Token.d_ident: image_loaders
Token main.Token..
Token main.Token.d_ident: is_empty
Token main.Token.(
Token main.Token.)
Token main.Token.{
Token main.Token.kw_return
Token main.Token.d_ident: Err
Token main.Token.(
Token main.Token.d_ident: load
Token main.Token.::
Token main.Token.d_ident: LoadError
Token main.Token.::
Token main.Token.d_ident: NoImageLoaders
Token main.Token.)
Token main.Token.;
Token main.Token.}
    BEFORE: // Try most recently added loaders first (hence `.rev()`)
Token main.Token.kw_for
Token main.Token.d_ident: loader
Token main.Token.kw_in
Token main.Token.d_ident: image_loaders
Token main.Token..
Token main.Token.d_ident: iter
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: rev
Token main.Token.(
Token main.Token.)
Token main.Token.{
Token main.Token.kw_match
Token main.Token.d_ident: loader
Token main.Token..
Token main.Token.d_ident: load
Token main.Token.(
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: uri
Token main.Token.,
Token main.Token.d_ident: size_hint
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: Err
Token main.Token.(
Token main.Token.d_ident: load
Token main.Token.::
Token main.Token.d_ident: LoadError
Token main.Token.::
Token main.Token.d_ident: NotSupported
Token main.Token.)
Token main.Token.=>
Token main.Token.d_ident: continue
Token main.Token.,
Token main.Token.d_ident: result
Token main.Token.=>
Token main.Token.kw_return
Token main.Token.d_ident: result
Token main.Token.,
Token main.Token.}
Token main.Token.}
Token main.Token.d_ident: Err
Token main.Token.(
Token main.Token.d_ident: load
Token main.Token.::
Token main.Token.d_ident: LoadError
Token main.Token.::
Token main.Token.d_ident: NoMatchingImageLoader
Token main.Token.)
Token main.Token.}
    BEFORE: /// Try loading the texture from the given uri using any available texture loaders.
    BEFORE: ///
    BEFORE: /// Loaders are expected to cache results, so that this call is immediate-mode safe.
    BEFORE: ///
    BEFORE: /// This calls the loaders one by one in the order in which they were registered.
    BEFORE: /// If a loader returns [`LoadError::NotSupported`][not_supported],
    BEFORE: /// then the next loader is called. This process repeats until all loaders have
    BEFORE: /// been exhausted, at which point this returns [`LoadError::NotSupported`][not_supported].
    BEFORE: ///
    BEFORE: /// # Errors
    BEFORE: /// This may fail with:
    BEFORE: /// - [`LoadError::NotSupported`][not_supported] if none of the registered loaders support loading the given `uri`.
    BEFORE: /// - [`LoadError::Loading`][custom] if one of the loaders _does_ support loading the `uri`, but the loading process failed.
    BEFORE: ///
    BEFORE: /// ⚠ May deadlock if called from within a `TextureLoader`!
    BEFORE: ///
    BEFORE: /// [not_supported]: crate::load::LoadError::NotSupported
    BEFORE: /// [custom]: crate::load::LoadError::Loading
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: try_load_texture
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: uri
Token main.Token.:
Token main.Token.&
Token main.Token.d_ident: str
Token main.Token.,
Token main.Token.d_ident: texture_options
Token main.Token.:
Token main.Token.d_ident: TextureOptions
Token main.Token.,
Token main.Token.d_ident: size_hint
Token main.Token.:
Token main.Token.d_ident: load
Token main.Token.::
Token main.Token.d_ident: SizeHint
Token main.Token.,
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: load
Token main.Token.::
Token main.Token.d_ident: TextureLoadResult
Token main.Token.{
Token main.Token.d_ident: crate
Token main.Token.::
Token main.Token.d_ident: profile_function
Token main.Token.!
Token main.Token.(
Token main.Token.d_ident: uri
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: loaders
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: loaders
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: texture_loaders
Token main.Token.=
Token main.Token.d_ident: loaders
Token main.Token..
Token main.Token.d_ident: texture
Token main.Token..
Token main.Token.d_ident: lock
Token main.Token.(
Token main.Token.)
Token main.Token.;
    BEFORE: // Try most recently added loaders first (hence `.rev()`)
Token main.Token.kw_for
Token main.Token.d_ident: loader
Token main.Token.kw_in
Token main.Token.d_ident: texture_loaders
Token main.Token..
Token main.Token.d_ident: iter
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: rev
Token main.Token.(
Token main.Token.)
Token main.Token.{
Token main.Token.kw_match
Token main.Token.d_ident: loader
Token main.Token..
Token main.Token.d_ident: load
Token main.Token.(
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: uri
Token main.Token.,
Token main.Token.d_ident: texture_options
Token main.Token.,
Token main.Token.d_ident: size_hint
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: Err
Token main.Token.(
Token main.Token.d_ident: load
Token main.Token.::
Token main.Token.d_ident: LoadError
Token main.Token.::
Token main.Token.d_ident: NotSupported
Token main.Token.)
Token main.Token.=>
Token main.Token.d_ident: continue
Token main.Token.,
Token main.Token.d_ident: result
Token main.Token.=>
Token main.Token.kw_return
Token main.Token.d_ident: result
Token main.Token.,
Token main.Token.}
Token main.Token.}
Token main.Token.d_ident: Err
Token main.Token.(
Token main.Token.d_ident: load
Token main.Token.::
Token main.Token.d_ident: LoadError
Token main.Token.::
Token main.Token.d_ident: NoMatchingTextureLoader
Token main.Token.)
Token main.Token.}
    BEFORE: /// The loaders of bytes, images, and textures.
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: loaders
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: Arc
Token main.Token.<
Token main.Token.d_ident: Loaders
Token main.Token.>
Token main.Token.{
Token main.Token.d_ident: crate
Token main.Token.::
Token main.Token.d_ident: profile_function
Token main.Token.!
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: read
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: this
Token main.Token.|
Token main.Token.d_ident: this
Token main.Token..
Token main.Token.d_ident: loaders
Token main.Token..
Token main.Token.d_ident: clone
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.}
Token main.Token.}
    BEFORE: /// ## Viewports
Token main.Token.kw_impl
Token main.Token.d_ident: Context
Token main.Token.{
    BEFORE: /// Return the `ViewportId` of the current viewport.
    BEFORE: ///
    BEFORE: /// If this is the root viewport, this will return [`ViewportId::ROOT`].
    BEFORE: ///
    BEFORE: /// Don't use this outside of `Self::run`, or after `Self::end_frame`.
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: viewport_id
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: ViewportId
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: read
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: viewport_id
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.}
    BEFORE: /// Return the `ViewportId` of his parent.
    BEFORE: ///
    BEFORE: /// If this is the root viewport, this will return [`ViewportId::ROOT`].
    BEFORE: ///
    BEFORE: /// Don't use this outside of `Self::run`, or after `Self::end_frame`.
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: parent_viewport_id
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: ViewportId
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: read
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: parent_viewport_id
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.}
    BEFORE: /// For integrations: Set this to render a sync viewport.
    BEFORE: ///
    BEFORE: /// This will only set the callback for the current thread,
    BEFORE: /// which most likely should be the main thread.
    BEFORE: ///
    BEFORE: /// When an immediate viewport is created with [`Self::show_viewport_immediate`] it will be rendered by this function.
    BEFORE: ///
    BEFORE: /// When called, the integration needs to:
    BEFORE: /// * Check if there already is a window for this viewport id, and if not open one
    BEFORE: /// * Set the window attributes (position, size, …) based on [`ImmediateViewport::builder`].
    BEFORE: /// * Call [`Context::run`] with [`ImmediateViewport::viewport_ui_cb`].
    BEFORE: /// * Handle the output from [`Context::run`], including rendering
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: allow
Token main.Token.(
Token main.Token.d_ident: clippy
Token main.Token.::
Token main.Token.d_ident: unused_self
Token main.Token.)
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: set_immediate_viewport_renderer
Token main.Token.(
Token main.Token.d_ident: callback
Token main.Token.:
Token main.Token.kw_impl
Token main.Token.kw_for
Token main.Token.<
Token main.Token.'
Token main.Token.d_ident: a
Token main.Token.>
Token main.Token.d_ident: Fn
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: Self
Token main.Token.,
Token main.Token.d_ident: ImmediateViewport
Token main.Token.<
Token main.Token.'
Token main.Token.d_ident: a
Token main.Token.>
Token main.Token.)
Token main.Token.+
Token main.Token.'
Token main.Token.kw_static
Token main.Token.,
Token main.Token.)
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: callback
Token main.Token.=
Token main.Token.d_ident: Box
Token main.Token.::
Token main.Token.d_ident: new
Token main.Token.(
Token main.Token.d_ident: callback
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: IMMEDIATE_VIEWPORT_RENDERER
Token main.Token..
Token main.Token.d_ident: with
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: render_sync
Token main.Token.|
Token main.Token.{
Token main.Token.d_ident: render_sync
Token main.Token..
Token main.Token.d_ident: replace
Token main.Token.(
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: callback
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.)
Token main.Token.;
Token main.Token.}
    BEFORE: /// If `true`, [`Self::show_viewport_deferred`] and [`Self::show_viewport_immediate`] will
    BEFORE: /// embed the new viewports inside the existing one, instead of spawning a new native window.
    BEFORE: ///
    BEFORE: /// `eframe` sets this to `false` on supported platforms, but the default value is `true`.
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: embed_viewports
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: bool
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: read
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: embed_viewports
Token main.Token.)
Token main.Token.}
    BEFORE: /// If `true`, [`Self::show_viewport_deferred`] and [`Self::show_viewport_immediate`] will
    BEFORE: /// embed the new viewports inside the existing one, instead of spawning a new native window.
    BEFORE: ///
    BEFORE: /// `eframe` sets this to `false` on supported platforms, but the default value is `true`.
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: set_embed_viewports
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: value
Token main.Token.:
Token main.Token.d_ident: bool
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: embed_viewports
Token main.Token.=
Token main.Token.d_ident: value
Token main.Token.)
Token main.Token.;
Token main.Token.}
    BEFORE: /// Send a command to the current viewport.
    BEFORE: ///
    BEFORE: /// This lets you affect the current viewport, e.g. resizing the window.
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: send_viewport_cmd
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: command
Token main.Token.:
Token main.Token.d_ident: ViewportCommand
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: send_viewport_cmd_to
Token main.Token.(
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: viewport_id
Token main.Token.(
Token main.Token.)
Token main.Token.,
Token main.Token.d_ident: command
Token main.Token.)
Token main.Token.;
Token main.Token.}
    BEFORE: /// Send a command to a specific viewport.
    BEFORE: ///
    BEFORE: /// This lets you affect another viewport, e.g. resizing its window.
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: send_viewport_cmd_to
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: id
Token main.Token.:
Token main.Token.d_ident: ViewportId
Token main.Token.,
Token main.Token.d_ident: command
Token main.Token.:
Token main.Token.d_ident: ViewportCommand
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: request_repaint_of
Token main.Token.(
Token main.Token.d_ident: id
Token main.Token.)
Token main.Token.;
Token main.Token.kw_if
Token main.Token.d_ident: command
Token main.Token..
Token main.Token.d_ident: requires_parent_repaint
Token main.Token.(
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: request_repaint_of
Token main.Token.(
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: parent_viewport_id
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: viewport_for
Token main.Token.(
Token main.Token.d_ident: id
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: commands
Token main.Token..
Token main.Token.d_ident: push
Token main.Token.(
Token main.Token.d_ident: command
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.}
    BEFORE: /// Show a deferred viewport, creating a new native window, if possible.
    BEFORE: ///
    BEFORE: /// The given id must be unique for each viewport.
    BEFORE: ///
    BEFORE: /// You need to call this each frame when the child viewport should exist.
    BEFORE: ///
    BEFORE: /// You can check if the user wants to close the viewport by checking the
    BEFORE: /// [`crate::ViewportInfo::close_requested`] flags found in [`crate::InputState::viewport`].
    BEFORE: ///
    BEFORE: /// The given callback will be called whenever the child viewport needs repainting,
    BEFORE: /// e.g. on an event or when [`Self::request_repaint`] is called.
    BEFORE: /// This means it may be called multiple times, for instance while the
    BEFORE: /// parent viewport (the caller) is sleeping but the child viewport is animating.
    BEFORE: ///
    BEFORE: /// You will need to wrap your viewport state in an `Arc<RwLock<T>>` or `Arc<Mutex<T>>`.
    BEFORE: /// When this is called again with the same id in `ViewportBuilder` the render function for that viewport will be updated.
    BEFORE: ///
    BEFORE: /// You can also use [`Self::show_viewport_immediate`], which uses a simpler `FnOnce`
    BEFORE: /// with no need for `Send` or `Sync`. The downside is that it will require
    BEFORE: /// the parent viewport (the caller) to repaint anytime the child is repainted,
    BEFORE: /// and vice versa.
    BEFORE: ///
    BEFORE: /// If [`Context::embed_viewports`] is `true` (e.g. if the current egui
    BEFORE: /// backend does not support multiple viewports), the given callback
    BEFORE: /// will be called immediately, embedding the new viewport in the current one.
    BEFORE: /// You can check this with the [`ViewportClass`] given in the callback.
    BEFORE: /// If you find [`ViewportClass::Embedded`], you need to create a new [`crate::Window`] for you content.
    BEFORE: ///
    BEFORE: /// See [`crate::viewport`] for more information about viewports.
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: show_viewport_deferred
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: new_viewport_id
Token main.Token.:
Token main.Token.d_ident: ViewportId
Token main.Token.,
Token main.Token.d_ident: viewport_builder
Token main.Token.:
Token main.Token.d_ident: ViewportBuilder
Token main.Token.,
Token main.Token.d_ident: viewport_ui_cb
Token main.Token.:
Token main.Token.kw_impl
Token main.Token.d_ident: Fn
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: Self
Token main.Token.,
Token main.Token.d_ident: ViewportClass
Token main.Token.)
Token main.Token.+
Token main.Token.d_ident: Send
Token main.Token.+
Token main.Token.d_ident: Sync
Token main.Token.+
Token main.Token.'
Token main.Token.kw_static
Token main.Token.,
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: crate
Token main.Token.::
Token main.Token.d_ident: profile_function
Token main.Token.!
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_if
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: embed_viewports
Token main.Token.(
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: viewport_ui_cb
Token main.Token.(
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: ViewportClass
Token main.Token.::
Token main.Token.d_ident: Embedded
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.kw_else
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.{
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: viewport_parents
Token main.Token..
Token main.Token.d_ident: insert
Token main.Token.(
Token main.Token.d_ident: new_viewport_id
Token main.Token.,
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: viewport_id
Token main.Token.(
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: viewport
Token main.Token.=
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: viewports
Token main.Token..
Token main.Token.d_ident: entry
Token main.Token.(
Token main.Token.d_ident: new_viewport_id
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: or_default
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: class
Token main.Token.=
Token main.Token.d_ident: ViewportClass
Token main.Token.::
Token main.Token.d_ident: Deferred
Token main.Token.;
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: builder
Token main.Token.=
Token main.Token.d_ident: viewport_builder
Token main.Token.;
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: used
Token main.Token.=
Token main.Token.d_ident: true
Token main.Token.;
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: viewport_ui_cb
Token main.Token.=
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: Arc
Token main.Token.::
Token main.Token.d_ident: new
Token main.Token.(
Token main.Token.d_ident: move
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.{
Token main.Token.(
Token main.Token.d_ident: viewport_ui_cb
Token main.Token.)
Token main.Token.(
Token main.Token.d_ident: ctx
Token main.Token.,
Token main.Token.d_ident: ViewportClass
Token main.Token.::
Token main.Token.d_ident: Deferred
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.}
    BEFORE: /// Show an immediate viewport, creating a new native window, if possible.
    BEFORE: ///
    BEFORE: /// This is the easier type of viewport to use, but it is less performant
    BEFORE: /// at it requires both parent and child to repaint if any one of them needs repainting,
    BEFORE: /// which efficvely produce double work for two viewports, and triple work for three viewports, etc.
    BEFORE: /// To avoid this, use [`Self::show_viewport_deferred`] instead.
    BEFORE: ///
    BEFORE: /// The given id must be unique for each viewport.
    BEFORE: ///
    BEFORE: /// You need to call this each frame when the child viewport should exist.
    BEFORE: ///
    BEFORE: /// You can check if the user wants to close the viewport by checking the
    BEFORE: /// [`crate::ViewportInfo::close_requested`] flags found in [`crate::InputState::viewport`].
    BEFORE: ///
    BEFORE: /// The given ui function will be called immediately.
    BEFORE: /// This may only be called on the main thread.
    BEFORE: /// This call will pause the current viewport and render the child viewport in its own window.
    BEFORE: /// This means that the child viewport will not be repainted when the parent viewport is repainted, and vice versa.
    BEFORE: ///
    BEFORE: /// If [`Context::embed_viewports`] is `true` (e.g. if the current egui
    BEFORE: /// backend does not support multiple viewports), the given callback
    BEFORE: /// will be called immediately, embedding the new viewport in the current one.
    BEFORE: /// You can check this with the [`ViewportClass`] given in the callback.
    BEFORE: /// If you find [`ViewportClass::Embedded`], you need to create a new [`crate::Window`] for you content.
    BEFORE: ///
    BEFORE: /// See [`crate::viewport`] for more information about viewports.
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: show_viewport_immediate
Token main.Token.<
Token main.Token.d_ident: T
Token main.Token.>
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: new_viewport_id
Token main.Token.:
Token main.Token.d_ident: ViewportId
Token main.Token.,
Token main.Token.d_ident: builder
Token main.Token.:
Token main.Token.d_ident: ViewportBuilder
Token main.Token.,
Token main.Token.d_ident: viewport_ui_cb
Token main.Token.:
Token main.Token.kw_impl
Token main.Token.d_ident: FnOnce
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: Self
Token main.Token.,
Token main.Token.d_ident: ViewportClass
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: T
Token main.Token.,
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: T
Token main.Token.{
Token main.Token.d_ident: crate
Token main.Token.::
Token main.Token.d_ident: profile_function
Token main.Token.!
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_if
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: embed_viewports
Token main.Token.(
Token main.Token.)
Token main.Token.{
Token main.Token.kw_return
Token main.Token.d_ident: viewport_ui_cb
Token main.Token.(
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: ViewportClass
Token main.Token.::
Token main.Token.d_ident: Embedded
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.d_ident: IMMEDIATE_VIEWPORT_RENDERER
Token main.Token..
Token main.Token.d_ident: with
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: immediate_viewport_renderer
Token main.Token.|
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: immediate_viewport_renderer
Token main.Token.=
Token main.Token.d_ident: immediate_viewport_renderer
Token main.Token..
Token main.Token.d_ident: borrow
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: immediate_viewport_renderer
Token main.Token.)
Token main.Token.=
Token main.Token.d_ident: immediate_viewport_renderer
Token main.Token..
Token main.Token.d_ident: as_ref
Token main.Token.(
Token main.Token.)
Token main.Token.kw_else
Token main.Token.{
    BEFORE: // This egui backend does not support multiple viewports.
Token main.Token.kw_return
Token main.Token.d_ident: viewport_ui_cb
Token main.Token.(
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: ViewportClass
Token main.Token.::
Token main.Token.d_ident: Embedded
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: ids
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: parent_viewport_id
Token main.Token.=
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: viewport_id
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: viewport_parents
Token main.Token..
Token main.Token.d_ident: insert
Token main.Token.(
Token main.Token.d_ident: new_viewport_id
Token main.Token.,
Token main.Token.d_ident: parent_viewport_id
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: viewport
Token main.Token.=
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: viewports
Token main.Token..
Token main.Token.d_ident: entry
Token main.Token.(
Token main.Token.d_ident: new_viewport_id
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: or_default
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: builder
Token main.Token.=
Token main.Token.d_ident: builder
Token main.Token..
Token main.Token.d_ident: clone
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: used
Token main.Token.=
Token main.Token.d_ident: true
Token main.Token.;
Token main.Token.d_ident: viewport
Token main.Token..
Token main.Token.d_ident: viewport_ui_cb
Token main.Token.=
Token main.Token.d_ident: None
Token main.Token.;
    AFTER: // it is immediate
Token main.Token.d_ident: ViewportIdPair
Token main.Token.::
Token main.Token.d_ident: from_self_and_parent
Token main.Token.(
Token main.Token.d_ident: new_viewport_id
Token main.Token.,
Token main.Token.d_ident: parent_viewport_id
Token main.Token.)
Token main.Token.}
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.kw_mut
Token main.Token.d_ident: out
Token main.Token.=
Token main.Token.d_ident: None
Token main.Token.;
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: out
Token main.Token.=
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: out
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: viewport
Token main.Token.=
Token main.Token.d_ident: ImmediateViewport
Token main.Token.{
Token main.Token.d_ident: ids
Token main.Token.,
Token main.Token.d_ident: builder
Token main.Token.,
Token main.Token.d_ident: viewport_ui_cb
Token main.Token.:
Token main.Token.d_ident: Box
Token main.Token.::
Token main.Token.d_ident: new
Token main.Token.(
Token main.Token.d_ident: move
Token main.Token.|
Token main.Token.d_ident: context
Token main.Token.|
Token main.Token.{
Token main.Token.*
Token main.Token.d_ident: out
Token main.Token.=
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: viewport_ui_cb
Token main.Token.(
Token main.Token.d_ident: context
Token main.Token.,
Token main.Token.d_ident: ViewportClass
Token main.Token.::
Token main.Token.d_ident: Immediate
Token main.Token.)
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.)
Token main.Token.,
Token main.Token.}
Token main.Token.;
Token main.Token.d_ident: immediate_viewport_renderer
Token main.Token.(
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: viewport
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.d_ident: out
Token main.Token..
Token main.Token.d_ident: expect
Token main.Token.(
Token main.Token.d_string: "egui backend is implemented incorrectly - the user callback was never called"
Token main.Token.,
Token main.Token.)
Token main.Token.}
Token main.Token.)
Token main.Token.}
Token main.Token.}
    BEFORE: /// ## Interaction
Token main.Token.kw_impl
Token main.Token.d_ident: Context
Token main.Token.{
    BEFORE: /// Read you what widgets are currently being interacted with.
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: interaction_snapshot
Token main.Token.<
Token main.Token.d_ident: R
Token main.Token.>
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: reader
Token main.Token.:
Token main.Token.kw_impl
Token main.Token.d_ident: FnOnce
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: InteractionSnapshot
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: R
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: R
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: w
Token main.Token.|
Token main.Token.d_ident: reader
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: w
Token main.Token..
Token main.Token.d_ident: viewport
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: interact_widgets
Token main.Token.)
Token main.Token.)
Token main.Token.}
    BEFORE: /// The widget currently being dragged, if any.
    BEFORE: ///
    BEFORE: /// For widgets that sense both clicks and drags, this will
    BEFORE: /// not be set until the mouse cursor has moved a certain distance.
    BEFORE: ///
    BEFORE: /// NOTE: if the widget was released this frame, this will be `None`.
    BEFORE: /// Use [`Self::drag_stopped_id`] instead.
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: dragged_id
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: Option
Token main.Token.<
Token main.Token.d_ident: Id
Token main.Token.>
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: interaction_snapshot
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: i
Token main.Token.|
Token main.Token.d_ident: i
Token main.Token..
Token main.Token.d_ident: dragged
Token main.Token.)
Token main.Token.}
    BEFORE: /// Is this specific widget being dragged?
    BEFORE: ///
    BEFORE: /// A widget that sense both clicks and drags is only marked as "dragged"
    BEFORE: /// when the mouse has moved a bit
    BEFORE: ///
    BEFORE: /// See also: [`crate::Response::dragged`].
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: is_being_dragged
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: id
Token main.Token.:
Token main.Token.d_ident: Id
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: bool
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: dragged_id
Token main.Token.(
Token main.Token.)
Token main.Token.==
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: id
Token main.Token.)
Token main.Token.}
    BEFORE: /// This widget just started being dragged this frame.
    BEFORE: ///
    BEFORE: /// The same widget should also be found in [`Self::dragged_id`].
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: drag_started_id
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: Option
Token main.Token.<
Token main.Token.d_ident: Id
Token main.Token.>
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: interaction_snapshot
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: i
Token main.Token.|
Token main.Token.d_ident: i
Token main.Token..
Token main.Token.d_ident: drag_started
Token main.Token.)
Token main.Token.}
    BEFORE: /// This widget was being dragged, but was released this frame
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: drag_stopped_id
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: Option
Token main.Token.<
Token main.Token.d_ident: Id
Token main.Token.>
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: interaction_snapshot
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: i
Token main.Token.|
Token main.Token.d_ident: i
Token main.Token..
Token main.Token.d_ident: drag_stopped
Token main.Token.)
Token main.Token.}
    BEFORE: /// Set which widget is being dragged.
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: set_dragged_id
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: id
Token main.Token.:
Token main.Token.d_ident: Id
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: vp
Token main.Token.=
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: viewport
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: i
Token main.Token.=
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: vp
Token main.Token..
Token main.Token.d_ident: interact_widgets
Token main.Token.;
Token main.Token.kw_if
Token main.Token.d_ident: i
Token main.Token..
Token main.Token.d_ident: dragged
Token main.Token.!
Token main.Token.=
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: id
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: i
Token main.Token..
Token main.Token.d_ident: drag_stopped
Token main.Token.=
Token main.Token.d_ident: i
Token main.Token..
Token main.Token.d_ident: dragged
Token main.Token..
Token main.Token.d_ident: or
Token main.Token.(
Token main.Token.d_ident: i
Token main.Token..
Token main.Token.d_ident: drag_stopped
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: i
Token main.Token..
Token main.Token.d_ident: dragged
Token main.Token.=
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: id
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: i
Token main.Token..
Token main.Token.d_ident: drag_started
Token main.Token.=
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: id
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: memory
Token main.Token..
Token main.Token.d_ident: interaction_mut
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: potential_drag_id
Token main.Token.=
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: id
Token main.Token.)
Token main.Token.;
Token main.Token.}
Token main.Token.)
Token main.Token.;
Token main.Token.}
    BEFORE: /// Stop dragging any widget.
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: stop_dragging
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: write
Token main.Token.(
Token main.Token.|
Token main.Token.d_ident: ctx
Token main.Token.|
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: vp
Token main.Token.=
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: viewport
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.kw_let
Token main.Token.d_ident: i
Token main.Token.=
Token main.Token.&
Token main.Token.kw_mut
Token main.Token.d_ident: vp
Token main.Token..
Token main.Token.d_ident: interact_widgets
Token main.Token.;
Token main.Token.kw_if
Token main.Token.d_ident: i
Token main.Token..
Token main.Token.d_ident: dragged
Token main.Token..
Token main.Token.d_ident: is_some
Token main.Token.(
Token main.Token.)
Token main.Token.{
Token main.Token.d_ident: i
Token main.Token..
Token main.Token.d_ident: drag_stopped
Token main.Token.=
Token main.Token.d_ident: i
Token main.Token..
Token main.Token.d_ident: dragged
Token main.Token.;
Token main.Token.d_ident: i
Token main.Token..
Token main.Token.d_ident: dragged
Token main.Token.=
Token main.Token.d_ident: None
Token main.Token.;
Token main.Token.}
Token main.Token.d_ident: ctx
Token main.Token..
Token main.Token.d_ident: memory
Token main.Token..
Token main.Token.d_ident: interaction_mut
Token main.Token.(
Token main.Token.)
Token main.Token..
Token main.Token.d_ident: potential_drag_id
Token main.Token.=
Token main.Token.d_ident: None
Token main.Token.;
Token main.Token.}
Token main.Token.)
Token main.Token.;
Token main.Token.}
    BEFORE: /// Is something else being dragged?
    BEFORE: ///
    BEFORE: /// Returns true if we are dragging something, but not the given widget.
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: inline
Token main.Token.(
Token main.Token.d_ident: always
Token main.Token.)
Token main.Token.]
Token main.Token.kw_pub
Token main.Token.kw_fn
Token main.Token.d_ident: dragging_something_else
Token main.Token.(
Token main.Token.&
Token main.Token.d_ident: self
Token main.Token.,
Token main.Token.d_ident: not_this
Token main.Token.:
Token main.Token.d_ident: Id
Token main.Token.)
Token main.Token.->
Token main.Token.d_ident: bool
Token main.Token.{
Token main.Token.kw_let
Token main.Token.d_ident: dragged
Token main.Token.=
Token main.Token.d_ident: self
Token main.Token..
Token main.Token.d_ident: dragged_id
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.d_ident: dragged
Token main.Token..
Token main.Token.d_ident: is_some
Token main.Token.(
Token main.Token.)
Token main.Token.&
Token main.Token.&
Token main.Token.d_ident: dragged
Token main.Token.!
Token main.Token.=
Token main.Token.d_ident: Some
Token main.Token.(
Token main.Token.d_ident: not_this
Token main.Token.)
Token main.Token.}
Token main.Token.}
Token main.Token.#
Token main.Token.[
Token main.Token.d_ident: test
Token main.Token.]
Token main.Token.kw_fn
Token main.Token.d_ident: context_impl_send_sync
Token main.Token.(
Token main.Token.)
Token main.Token.{
Token main.Token.kw_fn
Token main.Token.d_ident: assert_send_sync
Token main.Token.<
Token main.Token.d_ident: T
Token main.Token.:
Token main.Token.d_ident: Send
Token main.Token.+
Token main.Token.d_ident: Sync
Token main.Token.>
Token main.Token.(
Token main.Token.)
Token main.Token.{
Token main.Token.}
Token main.Token.d_ident: assert_send_sync
Token main.Token.::
Token main.Token.<
Token main.Token.d_ident: Context
Token main.Token.>
Token main.Token.(
Token main.Token.)
Token main.Token.;
Token main.Token.}
